// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
// @ts-nocheck

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "."

import {ObjectMeta} from "../meta/v1";

export namespace rabbitmq {
    export namespace v1beta1 {
        /**
         * Spec is the desired state of the RabbitmqCluster Custom Resource.
         */
        export interface RabbitmqClusterSpec {
            /**
             * Affinity scheduling rules to be applied on created Pods.
             */
            affinity?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinity;
            /**
             * Image is the name of the RabbitMQ docker image to use for RabbitMQ nodes in the RabbitmqCluster. Must be provided together with ImagePullSecrets in order to use an image in a private registry.
             */
            image?: string;
            /**
             * List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.
             */
            imagePullSecrets?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecImagePullSecrets[];
            override?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverride;
            /**
             * The desired persistent storage configuration for each Pod in the cluster.
             */
            persistence?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecPersistence;
            /**
             * Configuration options for RabbitMQ Pods created in the cluster.
             */
            rabbitmq?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecRabbitmq;
            /**
             * Replicas is the number of nodes in the RabbitMQ cluster. Each node is deployed as a Replica in a StatefulSet. Only 1, 3, 5 replicas clusters are tested. This value should be an odd number to ensure the resultant cluster can establish exactly one quorum of nodes in the event of a fragmenting network partition.
             */
            replicas?: number;
            /**
             * The desired compute resource requirements of Pods in the cluster.
             */
            resources?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecResources;
            /**
             * The desired state of the Kubernetes Service to create for the cluster.
             */
            service?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecService;
            /**
             * If unset, or set to false, the cluster will run `rabbitmq-queues rebalance all` whenever the cluster is updated. Set to true to prevent the operator rebalancing queue leaders after a cluster update. Has no effect if the cluster only consists of one node. For more information, see https://www.rabbitmq.com/rabbitmq-queues.8.html#rebalance
             */
            skipPostDeploySteps?: boolean;
            /**
             * TerminationGracePeriodSeconds is the timeout that each rabbitmqcluster pod will have to terminate gracefully. It defaults to 604800 seconds ( a week long) to ensure that the container preStop lifecycle hook can finish running. For more information, see: https://github.com/rabbitmq/cluster-operator/blob/main/docs/design/20200520-graceful-pod-termination.md
             */
            terminationGracePeriodSeconds?: number;
            /**
             * TLS-related configuration for the RabbitMQ cluster.
             */
            tls?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecTls;
            /**
             * Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.
             */
            tolerations?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecTolerations[];
        }

        /**
         * Affinity scheduling rules to be applied on created Pods.
         */
        export interface RabbitmqClusterSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RabbitmqClusterSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
             */
            namespaceSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is alpha-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RabbitmqClusterSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface RabbitmqClusterSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        export interface RabbitmqClusterSpecOverride {
            service?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideService;
            statefulSet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSet;
        }

        export interface RabbitmqClusterSpecOverrideService {
            metadata?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideServiceMetadata;
            spec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideServiceSpec;
        }

        export interface RabbitmqClusterSpecOverrideServiceMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideServiceSpec {
            allocateLoadBalancerNodePorts?: boolean;
            clusterIP?: string;
            clusterIPs?: string[];
            externalIPs?: string[];
            externalName?: string;
            externalTrafficPolicy?: string;
            healthCheckNodePort?: number;
            internalTrafficPolicy?: string;
            ipFamilies?: string[];
            ipFamilyPolicy?: string;
            loadBalancerClass?: string;
            loadBalancerIP?: string;
            loadBalancerSourceRanges?: string[];
            ports?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideServiceSpecPorts[];
            publishNotReadyAddresses?: boolean;
            selector?: {[key: string]: string};
            sessionAffinity?: string;
            sessionAffinityConfig?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig;
            topologyKeys?: string[];
            type?: string;
        }

        export interface RabbitmqClusterSpecOverrideServiceSpecPorts {
            appProtocol?: string;
            name?: string;
            nodePort?: number;
            port: number;
            protocol?: string;
            targetPort?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort;
        }

        export interface RabbitmqClusterSpecOverrideServiceSpecPortsTargetPort {
        }

        export interface RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfig {
            clientIP?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIP;
        }

        export interface RabbitmqClusterSpecOverrideServiceSpecSessionAffinityConfigClientIP {
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSet {
            metadata?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetMetadata;
            spec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpec;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpec {
            podManagementPolicy?: string;
            replicas?: number;
            selector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecSelector;
            serviceName?: string;
            template?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplate;
            updateStrategy?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy;
            volumeClaimTemplates?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplate {
            metadata?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata;
            spec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpec {
            activeDeadlineSeconds?: number;
            affinity?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity;
            automountServiceAccountToken?: boolean;
            containers: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers[];
            dnsConfig?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig;
            dnsPolicy?: string;
            enableServiceLinks?: boolean;
            ephemeralContainers?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers[];
            hostAliases?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases[];
            hostIPC?: boolean;
            hostNetwork?: boolean;
            hostPID?: boolean;
            hostname?: string;
            imagePullSecrets?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets[];
            initContainers?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers[];
            nodeName?: string;
            nodeSelector?: {[key: string]: string};
            overhead?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead};
            preemptionPolicy?: string;
            priority?: number;
            priorityClassName?: string;
            readinessGates?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates[];
            restartPolicy?: string;
            runtimeClassName?: string;
            schedulerName?: string;
            securityContext?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext;
            serviceAccount?: string;
            serviceAccountName?: string;
            setHostnameAsFQDN?: boolean;
            shareProcessNamespace?: boolean;
            subdomain?: string;
            terminationGracePeriodSeconds?: number;
            tolerations?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations[];
            topologySpreadConstraints?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints[];
            volumes?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinity {
            nodeAffinity?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity;
            podAffinity?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity;
            podAntiAffinity?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            weight: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            matchFields?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            matchFields?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            weight: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            namespaceSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            namespaceSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            namespaces?: string[];
            topologyKey: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainers {
            args?: string[];
            command?: string[];
            env?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv[];
            envFrom?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle;
            livenessProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe;
            name: string;
            ports?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts[];
            readinessProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe;
            resources?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources;
            securityContext?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext;
            startupProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices[];
            volumeMounts?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFrom {
            configMapRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFrom {
            configMapKeyRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor;
            resource: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecycle {
            postStart?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart;
            preStop?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStart {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePostStartTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStop {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLifecyclePreStopTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersLivenessProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersReadinessProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResources {
            limits?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits};
            requests?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesLimits {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersResourcesRequests {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersStartupProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfig {
            nameservers?: string[];
            options?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions[];
            searches?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecDnsConfigOptions {
            name?: string;
            value?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainers {
            args?: string[];
            command?: string[];
            env?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv[];
            envFrom?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle;
            livenessProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe;
            name: string;
            ports?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts[];
            readinessProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe;
            resources?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources;
            securityContext?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext;
            startupProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            targetContainerName?: string;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices[];
            volumeMounts?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFrom {
            configMapRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor;
            resource: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecycle {
            postStart?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart;
            preStop?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStart {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStop {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResources {
            limits?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits};
            requests?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesLimits {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersResourcesRequests {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecEphemeralContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecHostAliases {
            hostnames?: string[];
            ip?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecImagePullSecrets {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainers {
            args?: string[];
            command?: string[];
            env?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv[];
            envFrom?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom[];
            image?: string;
            imagePullPolicy?: string;
            lifecycle?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle;
            livenessProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe;
            name: string;
            ports?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts[];
            readinessProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe;
            resources?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources;
            securityContext?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext;
            startupProbe?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe;
            stdin?: boolean;
            stdinOnce?: boolean;
            terminationMessagePath?: string;
            terminationMessagePolicy?: string;
            tty?: boolean;
            volumeDevices?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices[];
            volumeMounts?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts[];
            workingDir?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnv {
            name: string;
            value?: string;
            valueFrom?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFrom {
            configMapRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef;
            prefix?: string;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromConfigMapRef {
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvFromSecretRef {
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFrom {
            configMapKeyRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef {
            containerName?: string;
            divisor?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor;
            resource: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefDivisor {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef {
            key: string;
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecycle {
            postStart?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart;
            preStop?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStart {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStop {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersLivenessProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersPorts {
            containerPort: number;
            hostIP?: string;
            hostPort?: number;
            name?: string;
            protocol?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersReadinessProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResources {
            limits?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits};
            requests?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesLimits {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersResourcesRequests {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContext {
            allowPrivilegeEscalation?: boolean;
            capabilities?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities;
            privileged?: boolean;
            procMount?: string;
            readOnlyRootFilesystem?: boolean;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextCapabilities {
            add?: string[];
            drop?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbe {
            exec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec;
            failureThreshold?: number;
            httpGet?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet;
            initialDelaySeconds?: number;
            periodSeconds?: number;
            successThreshold?: number;
            tcpSocket?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket;
            terminationGracePeriodSeconds?: number;
            timeoutSeconds?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeExec {
            command?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGet {
            host?: string;
            httpHeaders?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            path?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort;
            scheme?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeHttpGetPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocket {
            host?: string;
            port: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersStartupProbeTcpSocketPort {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeDevices {
            devicePath: string;
            name: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecInitContainersVolumeMounts {
            mountPath: string;
            mountPropagation?: string;
            name: string;
            readOnly?: boolean;
            subPath?: string;
            subPathExpr?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecOverhead {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecReadinessGates {
            conditionType: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContext {
            fsGroup?: number;
            fsGroupChangePolicy?: string;
            runAsGroup?: number;
            runAsNonRoot?: boolean;
            runAsUser?: number;
            seLinuxOptions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile;
            supplementalGroups?: number[];
            sysctls?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls[];
            windowsOptions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions {
            level?: string;
            role?: string;
            type?: string;
            user?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSeccompProfile {
            localhostProfile?: string;
            type: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecSecurityContextWindowsOptions {
            gmsaCredentialSpec?: string;
            gmsaCredentialSpecName?: string;
            runAsUserName?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTolerations {
            effect?: string;
            key?: string;
            operator?: string;
            tolerationSeconds?: number;
            value?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraints {
            labelSelector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector;
            maxSkew: number;
            topologyKey: string;
            whenUnsatisfiable: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumes {
            awsElasticBlockStore?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore;
            azureDisk?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk;
            azureFile?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile;
            cephfs?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs;
            cinder?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder;
            configMap?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap;
            csi?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi;
            downwardAPI?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPI;
            emptyDir?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir;
            ephemeral?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral;
            fc?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc;
            flexVolume?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume;
            flocker?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker;
            gcePersistentDisk?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk;
            gitRepo?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo;
            glusterfs?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs;
            hostPath?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath;
            iscsi?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi;
            name: string;
            nfs?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs;
            persistentVolumeClaim?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk;
            portworxVolume?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume;
            projected?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected;
            quobyte?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte;
            rbd?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd;
            scaleIO?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIO;
            secret?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret;
            storageos?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos;
            vsphereVolume?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAwsElasticBlockStore {
            fsType?: string;
            partition?: number;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureDisk {
            cachingMode?: string;
            diskName: string;
            diskURI: string;
            fsType?: string;
            kind?: string;
            readOnly?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesAzureFile {
            readOnly?: boolean;
            secretName: string;
            shareName: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfs {
            monitors: string[];
            path?: string;
            readOnly?: boolean;
            secretFile?: string;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef;
            user?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCephfsSecretRef {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinder {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef;
            volumeID: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCinderSecretRef {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMap {
            defaultMode?: number;
            items?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsi {
            driver: string;
            fsType?: string;
            nodePublishSecretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef;
            readOnly?: boolean;
            volumeAttributes?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesCsiNodePublishSecretRef {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPI {
            defaultMode?: number;
            items?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPIItems[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPIItems {
            fieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisor;
            resource: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDir {
            medium?: string;
            sizeLimit?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEmptyDirSizeLimit {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeral {
            volumeClaimTemplate?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate {
            metadata?: {[key: string]: any};
            spec: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: string[];
            dataSource?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            resources?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            limits?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits};
            requests?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesLimits {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesRequests {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFc {
            fsType?: string;
            lun?: number;
            readOnly?: boolean;
            targetWWNs?: string[];
            wwids?: string[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolume {
            driver: string;
            fsType?: string;
            options?: {[key: string]: string};
            readOnly?: boolean;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlexVolumeSecretRef {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesFlocker {
            datasetName?: string;
            datasetUUID?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGcePersistentDisk {
            fsType?: string;
            partition?: number;
            pdName: string;
            readOnly?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGitRepo {
            directory?: string;
            repository: string;
            revision?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesGlusterfs {
            endpoints: string;
            path: string;
            readOnly?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesHostPath {
            path: string;
            type?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsi {
            chapAuthDiscovery?: boolean;
            chapAuthSession?: boolean;
            fsType?: string;
            initiatorName?: string;
            iqn: string;
            iscsiInterface?: string;
            lun: number;
            portals?: string[];
            readOnly?: boolean;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef;
            targetPortal: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesIscsiSecretRef {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesNfs {
            path: string;
            readOnly?: boolean;
            server: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPersistentVolumeClaim {
            claimName: string;
            readOnly?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPhotonPersistentDisk {
            fsType?: string;
            pdID: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesPortworxVolume {
            fsType?: string;
            readOnly?: boolean;
            volumeID: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjected {
            defaultMode?: number;
            sources?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSources {
            configMap?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap;
            downwardAPI?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPI;
            secret?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret;
            serviceAccountToken?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMap {
            items?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesConfigMapItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPI {
            items?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems[];
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            mode?: number;
            path: string;
            resourceFieldRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: string;
            fieldPath: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: string;
            divisor?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor;
            resource: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisor {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecret {
            items?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems[];
            name?: string;
            optional?: boolean;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            audience?: string;
            expirationSeconds?: number;
            path: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesQuobyte {
            group?: string;
            readOnly?: boolean;
            registry: string;
            tenant?: string;
            user?: string;
            volume: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbd {
            fsType?: string;
            image: string;
            keyring?: string;
            monitors: string[];
            pool?: string;
            readOnly?: boolean;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef;
            user?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesRbdSecretRef {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIO {
            fsType?: string;
            gateway: string;
            protectionDomain?: string;
            readOnly?: boolean;
            secretRef: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIOSecretRef;
            sslEnabled?: boolean;
            storageMode?: string;
            storagePool?: string;
            system: string;
            volumeName?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesScaleIOSecretRef {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecret {
            defaultMode?: number;
            items?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems[];
            optional?: boolean;
            secretName?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesSecretItems {
            key: string;
            mode?: number;
            path: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageos {
            fsType?: string;
            readOnly?: boolean;
            secretRef?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef;
            volumeName?: string;
            volumeNamespace?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesStorageosSecretRef {
            name?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecTemplateSpecVolumesVsphereVolume {
            fsType?: string;
            storagePolicyID?: string;
            storagePolicyName?: string;
            volumePath: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategy {
            rollingUpdate?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate;
            type?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecUpdateStrategyRollingUpdate {
            partition?: number;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplates {
            apiVersion?: string;
            kind?: string;
            metadata?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata;
            spec?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesMetadata {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
            name?: string;
            namespace?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpec {
            accessModes?: string[];
            dataSource?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource;
            resources?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources;
            selector?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector;
            storageClassName?: string;
            volumeMode?: string;
            volumeName?: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecDataSource {
            apiGroup?: string;
            kind: string;
            name: string;
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResources {
            limits?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits};
            requests?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesLimits {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecResourcesRequests {
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelector {
            matchExpressions?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions[];
            matchLabels?: {[key: string]: string};
        }

        export interface RabbitmqClusterSpecOverrideStatefulSetSpecVolumeClaimTemplatesSpecSelectorMatchExpressions {
            key: string;
            operator: string;
            values?: string[];
        }

        /**
         * The desired persistent storage configuration for each Pod in the cluster.
         */
        export interface RabbitmqClusterSpecPersistence {
            /**
             * The requested size of the persistent volume attached to each Pod in the RabbitmqCluster. The format of this field matches that defined by kubernetes/apimachinery. See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info on the format of this field.
             */
            storage?: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecPersistenceStorage;
            /**
             * The name of the StorageClass to claim a PersistentVolume from.
             */
            storageClassName?: string;
        }

        export interface RabbitmqClusterSpecPersistenceStorage {
        }

        /**
         * Configuration options for RabbitMQ Pods created in the cluster.
         */
        export interface RabbitmqClusterSpecRabbitmq {
            /**
             * Modify to add to the rabbitmq.conf file in addition to default configurations set by the operator. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime. For more information on this config, see https://www.rabbitmq.com/configure.html#config-file
             */
            additionalConfig?: string;
            /**
             * List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.
             */
            additionalPlugins?: string[];
            /**
             * Specify any rabbitmq advanced.config configurations to apply to the cluster. For more information on advanced config, see https://www.rabbitmq.com/configure.html#advanced-config-file
             */
            advancedConfig?: string;
            /**
             * Modify to add to the rabbitmq-env.conf file. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime. For more information on env config, see https://www.rabbitmq.com/man/rabbitmq-env.conf.5.html
             */
            envConfig?: string;
        }

        /**
         * The desired compute resource requirements of Pods in the cluster.
         */
        export interface RabbitmqClusterSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecResourcesLimits};
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: {[key: string]: outputs.rabbitmq.v1beta1.RabbitmqClusterSpecResourcesRequests};
        }

        export interface RabbitmqClusterSpecResourcesLimits {
        }

        export interface RabbitmqClusterSpecResourcesRequests {
        }

        /**
         * The desired state of the Kubernetes Service to create for the cluster.
         */
        export interface RabbitmqClusterSpecService {
            /**
             * Annotations to add to the Service.
             */
            annotations?: {[key: string]: string};
            /**
             * Type of Service to create for the cluster. Must be one of: ClusterIP, LoadBalancer, NodePort. For more info see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType
             */
            type?: string;
        }

        /**
         * TLS-related configuration for the RabbitMQ cluster.
         */
        export interface RabbitmqClusterSpecTls {
            /**
             * Name of a Secret in the same Namespace as the RabbitmqCluster, containing the Certificate Authority's public certificate for TLS. The Secret must store this as ca.crt. This Secret can be created by running `kubectl create secret generic ca-secret --from-file=ca.crt=path/to/ca.cert` Used for mTLS, and TLS for rabbitmq_web_stomp and rabbitmq_web_mqtt.
             */
            caSecretName?: string;
            /**
             * When set to true, the RabbitmqCluster disables non-TLS listeners for RabbitMQ, management plugin and for any enabled plugins in the following list: stomp, mqtt, web_stomp, web_mqtt. Only TLS-enabled clients will be able to connect.
             */
            disableNonTLSListeners?: boolean;
            /**
             * Name of a Secret in the same Namespace as the RabbitmqCluster, containing the server's private key & public certificate for TLS. The Secret must store these as tls.key and tls.crt, respectively. This Secret can be created by running `kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key`
             */
            secretName?: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface RabbitmqClusterSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Status presents the observed state of RabbitmqCluster
         */
        export interface RabbitmqClusterStatus {
            /**
             * Binding exposes a secret containing the binding information for this RabbitmqCluster. It implements the service binding Provisioned Service duck type. See: https://k8s-service-bindings.github.io/spec/#provisioned-service
             */
            binding?: outputs.rabbitmq.v1beta1.RabbitmqClusterStatusBinding;
            /**
             * Set of Conditions describing the current state of the RabbitmqCluster
             */
            conditions: outputs.rabbitmq.v1beta1.RabbitmqClusterStatusConditions[];
            /**
             * Identifying information on internal resources
             */
            defaultUser?: outputs.rabbitmq.v1beta1.RabbitmqClusterStatusDefaultUser;
            /**
             * observedGeneration is the most recent successful generation observed for this RabbitmqCluster. It corresponds to the RabbitmqCluster's generation, which is updated on mutation by the API Server.
             */
            observedGeneration?: number;
        }

        /**
         * Binding exposes a secret containing the binding information for this RabbitmqCluster. It implements the service binding Provisioned Service duck type. See: https://k8s-service-bindings.github.io/spec/#provisioned-service
         */
        export interface RabbitmqClusterStatusBinding {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        export interface RabbitmqClusterStatusConditions {
            /**
             * The last time this Condition type changed.
             */
            lastTransitionTime?: string;
            /**
             * Full text reason for current status of the condition.
             */
            message?: string;
            /**
             * One word, camel-case reason for current status of the condition.
             */
            reason?: string;
            /**
             * True, False, or Unknown
             */
            status: string;
            /**
             * Type indicates the scope of RabbitmqCluster status addressed by the condition.
             */
            type: string;
        }

        /**
         * Identifying information on internal resources
         */
        export interface RabbitmqClusterStatusDefaultUser {
            /**
             * Reference to the Kubernetes Secret containing the credentials of the default user.
             */
            secretReference?: outputs.rabbitmq.v1beta1.RabbitmqClusterStatusDefaultUserSecretReference;
            /**
             * Reference to the Kubernetes Service serving the cluster.
             */
            serviceReference?: outputs.rabbitmq.v1beta1.RabbitmqClusterStatusDefaultUserServiceReference;
        }

        /**
         * Reference to the Kubernetes Secret containing the credentials of the default user.
         */
        export interface RabbitmqClusterStatusDefaultUserSecretReference {
            /**
             * Key-value pairs in the Secret corresponding to `username` and `password`
             */
            keys: {[key: string]: string};
            /**
             * Name of the Secret containing the default user credentials
             */
            name: string;
            /**
             * Namespace of the Secret containing the default user credentials
             */
            namespace: string;
        }

        /**
         * Reference to the Kubernetes Service serving the cluster.
         */
        export interface RabbitmqClusterStatusDefaultUserServiceReference {
            /**
             * Name of the Service serving the cluster
             */
            name: string;
            /**
             * Namespace of the Service serving the cluster
             */
            namespace: string;
        }
    }
}
