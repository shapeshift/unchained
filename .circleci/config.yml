version: 2.1

executors:
  pulumi:
    docker:
      - image: pulumi/pulumi-nodejs:3.111.1

aliases:
  - &only-feature
    filters:
      branches:
        ignore:
          - cosmos

  - &only-cosmos
    filters:
      branches:
        only:
          - cosmos
  
  - &params
    organization:
      type: string
    assetName:
      description: the k8s asset name
      type: string
    environment:
      description: environment to deploy into. empty string ("") is our prod
      type: string
      default: ""
    network:
      type: string
      default: mainnet
    pulumi-stack:
      description: pulumi stack to deploy to
      type: string
    pulumi-dir:
      description: path to pulumi directory
      type: string
    pulumi-command:
      type: string
      default: preview
    api:
      type: boolean
      default: true
    api-autoscaling:
      type: boolean
    api-cpu-threshold:
      type: integer
    api-max-replicas:
      type: integer
    api-cpu-limit:
      type: string
    api-cpu-request:
      type: string
      default: ""
    api-memory-limit:
      type: string
    api-memory-request:
      type: string
      default: ""
    api-replicas:
      type: integer
    stateful-service-replicas:
      type: integer
      default: 0
    service-name-1:
      type: string
      default: ""
    service-image-1:
      type: string
      default: ""
    service-cpu-limit-1:
      type: string
      default: ""
    service-cpu-request-1:
      type: string
      default: ""
    service-memory-limit-1:
      type: string
      default: ""
    service-storage-size-1:
      type: string
      default: ""
    service-storage-class-1:
      type: string
      default: ""
    service-storage-iops-1:
      type: string
      default: ""
    service-storage-throughput-1:
      type: string
      default: ""
    service-name-2:
      type: string
      default: ""
    service-image-2:
      type: string
      default: ""
    service-cpu-limit-2:
      type: string
      default: ""
    service-cpu-request-2:
      type: string
      default: ""
    service-memory-limit-2:
      type: string
      default: ""
    service-storage-size-2:
      type: string
      default: ""
    service-storage-class-2:
      type: string
      default: ""
    service-storage-iops-2:
      type: string
      default: ""
    service-storage-throughput-2:
      type: string
      default: ""
    service-name-3:
      type: string
      default: ""
    service-image-3:
      type: string
      default: ""
    service-cpu-limit-3:
      type: string
      default: ""
    service-cpu-request-3:
      type: string
      default: ""
    service-memory-limit-3:
      type: string
      default: ""
    service-storage-size-3:
      type: string
      default: ""
    service-storage-class-3:
      type: string
      default: ""
    service-storage-iops-3:
      type: string
      default: ""
    service-storage-throughput-3:
      type: string
      default: ""

  - &cosmos
    assetName: cosmos
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/cosmos/pulumi
    api-key: $NOW_NODES_API_KEY_COSMOS
    lcd-url: https://cosmos-shapeshift.nownodes.io
    grpc-url: cosmos-shapeshift.nownodes.io
    rpc-url: https://cosmos-tendermint-shapeshift.nownodes.io
    ws-url: wss://cosmos-tendermint-shapeshift.nownodes.io
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 75
    api-memory-limit: 1Gi
    api-memory-request: 500Mi

  - &cosmos-dev
    <<: *cosmos
    environment: dev
    pulumi-stack: public-dev-us-east-2
    api-key: $NOW_NODES_API_KEY_COSMOS
    api-replicas: 1
    api-max-replicas: 2
    api-memory-limit: 500Mi

commands:
  precheck:
    description: install dependencies
    steps:
      - run:
          command: |
            wget https://go.dev/dl/go1.22.1.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.22.1.linux-amd64.tar.gz
      - run:
          command: yarn install --immutable
      - run:
          command: yarn build
      - run:
          command: yarn lint
      - run:
          command: yarn test
      - run:
          working_directory: go
          command: go get ./...
      - run:
          working_directory: go
          command: make
      - run:
          working_directory: go
          command: golangci-lint run --version --verbose

  postcheck:
    description: perform postcheck operations
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e5:8a:56:6c:d5:ed:72:93:97:0b:65:8c:6a:f3:ca:98"
      - run:
          name: update openapi spec
          command: |
            for file in $(git diff --name-only); do [[ $file == *"swagger.json" ]] && git add $file; done
            if [[ $(git diff --staged --name-only) ]]; then git commit -m "chore: update openapi spec [skip ci]"; git push origin $(git branch --show-current); fi

  generic-dependencies:
    description: setup misc tooling
    parameters:
      organization:
        type: string
    steps:
      - run:
          name: add environment variables
          command: |
            echo 'export ADDITIONAL_ROOT_DOMAIN_NAME=$<< parameters.organization >>_ADDITIONAL_ROOT_DOMAIN_NAME' >> $BASH_ENV
            echo 'export PULUMI_ACCESS_TOKEN=$<< parameters.organization >>_PULUMI_ACCESS_TOKEN' >> $BASH_ENV
            echo 'export IPFS_CLUSTER_SECRET=$IPFS_CLUSTER_SECRET' >> $BASH_ENV
            echo 'export IPFS_CLUSTER_PRIV_KEY=$IPFS_CLUSTER_PRIV_KEY' >> $BASH_ENV
      - run:
          name: install tools
          command: |
            apt update
            apt install wget unzip -y
      - run:
          name: install aws-cli
          command: |
            wget -O awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: install docker cli
          command: |
            wget -O docker-ce-cli.deb https://download.docker.com/linux/debian/dists/bullseye/pool/stable/amd64/docker-ce-cli_26.0.0-1~debian.11~bullseye_amd64.deb
            dpkg -i docker-ce-cli.deb
      - run:
          name: install docker buildx plugin
          command: |
            wget -O docker-buildx-plugin.deb https://download.docker.com/linux/debian/dists/bullseye/pool/stable/amd64/docker-buildx-plugin_0.13.1-1~debian.11~bullseye_amd64.deb
            dpkg -i docker-buildx-plugin.deb
      - run:
          name: install kubectl
          command: |
            wget -O kubectl "https://dl.k8s.io/release/v1.29.2/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: create aws credentials file
          command: |
            mkdir ~/.aws
            echo [default] > ~/.aws/credentials
            echo aws_access_key_id = $<< parameters.organization >>_AWS_ACCESS_KEY_ID >> ~/.aws/credentials
            echo aws_secret_access_key = $<< parameters.organization >>_AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials

  pulumi-dependencies:
    description: set up pulumi dependencies
    parameters:
      organization:
        type: string
    steps:
      - generic-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: install helm charts
          command: |
            wget -O helm.tar.gz https://get.helm.sh/helm-v3.14.3-linux-amd64.tar.gz
            tar -zxvf helm.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
            helm repo add autoscaler https://kubernetes.github.io/autoscaler
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm repo add eks https://aws.github.io/eks-charts
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo add traefik https://helm.traefik.io/traefik
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
            helm repo add piraeus-charts https://piraeus.io/helm-charts/
            helm repo update
      - run:
          name: install pulumi plugin resources
          command: |
            pulumi plugin install resource aws 5.29.1
            pulumi plugin install resource kubernetes 3.23.1
            pulumi plugin install resource eks 1.0.1

jobs:
  deploy-coinstack-go:
    description: deploy a specific go coinstack
    executor: pulumi
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      <<: *params
      api-key:
        type: string
        default: ''
      lcd-url:
        type: string
      lcd-v1-url:
        type: string
        default: ""
      grpc-url:
        type: string
        default: ""
      rpc-url:
        type: string
      rpc-v1-url:
        type: string
        default: ""
      ws-url:
        type: string
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: add custom environment variables
          command: |
            echo 'export API_KEY=<< parameters.api-key >>' >> $BASH_ENV
            echo 'export LCD_URL=<< parameters.lcd-url >>' >> $BASH_ENV
            echo 'export LCD_V1_URL=<< parameters.lcd-v1-url >>' >> $BASH_ENV
            echo 'export GRPC_URL=<< parameters.grpc-url >>' >> $BASH_ENV
            echo 'export RPC_URL=<< parameters.rpc-url >>' >> $BASH_ENV
            echo 'export RPC_V1_URL=<< parameters.rpc-v1-url >>' >> $BASH_ENV
            echo 'export WS_URL=<< parameters.ws-url >>' >> $BASH_ENV
      - run:
          name: pulumi
          working_directory: go/<< parameters.pulumi-dir >>
          command: |
            yarn install --immutable
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/<< parameters.pulumi-stack >>
            pulumi config set --path unchained:coinstack.assetName << parameters.assetName >>
            pulumi config set --path unchained:coinstack.stack $<< parameters.organization >>_PULUMI_ORG/common/dependencies-us-east-2
            [ -n "<< parameters.environment >>" ] && pulumi config set --path unchained:coinstack.environment << parameters.environment >>
            pulumi config set --path unchained:coinstack.network << parameters.network >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.enabled << parameters.api-autoscaling >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.cpuThreshold << parameters.api-cpu-threshold >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.maxReplicas << parameters.api-max-replicas >>
            [ "<< parameters.api >>" = true ] && [ -n "<< parameters.api-cpu-request >>" ] && pulumi config set --path unchained:coinstack.api.cpuRequest << parameters.api-cpu-request >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.cpuLimit << parameters.api-cpu-limit >>
            [ "<< parameters.api >>" = true ] && [ -n "<< parameters.api-memory-request >>" ] && pulumi config set --path unchained:coinstack.api.memoryRequest << parameters.api-memory-request >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.memoryLimit << parameters.api-memory-limit >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.replicas << parameters.api-replicas >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && pulumi config set --path unchained:coinstack.statefulService.replicas << parameters.stateful-service-replicas >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].name << parameters.service-name-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].image << parameters.service-image-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].cpuLimit << parameters.service-cpu-limit-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].cpuRequest << parameters.service-cpu-request-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].memoryLimit << parameters.service-memory-limit-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].storageSize << parameters.service-storage-size-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-class-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].storageClassName << parameters.service-storage-class-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-iops-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].storageIops << parameters.service-storage-iops-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-throughput-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].storageThroughput << parameters.service-storage-throughput-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].name << parameters.service-name-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].image << parameters.service-image-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].cpuLimit << parameters.service-cpu-limit-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].cpuRequest << parameters.service-cpu-request-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].memoryLimit << parameters.service-memory-limit-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].storageSize << parameters.service-storage-size-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-class-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].storageClassName << parameters.service-storage-class-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-iops-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].storageIops << parameters.service-storage-iops-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-throughput-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].storageThroughput << parameters.service-storage-throughput-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].name << parameters.service-name-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].image << parameters.service-image-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].cpuLimit << parameters.service-cpu-limit-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].cpuRequest << parameters.service-cpu-request-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].memoryLimit << parameters.service-memory-limit-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].storageSize << parameters.service-storage-size-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-class-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].storageClassName << parameters.service-storage-class-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-iops-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].storageIops << parameters.service-storage-iops-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-throughput-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].storageThroughput << parameters.service-storage-throughput-3 >>
            pulumi << parameters.pulumi-command >> --refresh --suppress-outputs

  lint-and-test:
    description: lint and test project
    machine:
      image: ubuntu-2204:current
    resource_class: large
    steps:
      - checkout
      - precheck

  lint-and-test-persist:
    description: lint and test project (persist to workspace)
    machine:
      image: ubuntu-2204:current
    resource_class: large
    steps:
      - checkout
      - precheck
      - postcheck
      - run:
          name: Remove devDependencies
          command: yarn --production --ignore-scripts --prefer-offline --silent --frozen-lockfile
      - persist_to_workspace:
          root: "~"
          paths:
            - project

workflows:
  version: 2

  check:
    jobs:
      - lint-and-test:
          name: lint and test project
          <<: *only-feature

  deploy-cosmos:
    jobs:
      - lint-and-test-persist:
          name: lint and test project (persist to workspace)
          <<: *only-cosmos

      - deploy-coinstack-go:
          name: deploy cosmos develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - lint and test project (persist to workspace)
          <<: [*cosmos-dev, *only-cosmos]

      - approve-coinstack:
          name: start prod deployment
          type: approval
          requires:
            - deploy cosmos develop
          <<: *only-cosmos

      - deploy-coinstack-go:
          name: preview cosmos
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - start prod deployment
          <<: [*cosmos, *only-cosmos]

      - approve-coinstack:
          name: approve cosmos coinstack
          type: approval
          requires:
            - preview cosmos
          <<: *only-cosmos

      - deploy-coinstack-go:
          name: deploy cosmos
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve cosmos coinstack
          <<: [*cosmos, *only-cosmos]