version: 2.1

executors:
  pulumi:
    docker:
      - image: pulumi/pulumi-nodejs:3.34.0

aliases:
  - &only-feature
    filters:
      branches:
        ignore:
          - main
          - develop

  - &only-develop
    filters:
      branches:
        only:
          - develop

  - &only-main
    filters:
      branches:
        only:
          - main

  - &bitcoin
    coinstack: bitcoin
    pulumi-stack: public
    pulumi-dir: coinstacks/bitcoin/pulumi
    indexer-cpu-limit: "4"
    indexer-cpu-request: "2"
    indexer-memory-limit: 24Gi
    indexer-replicas: 2
    indexer-storage-size: 500Gi
    indexer-url: http://bitcoin-indexer-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://bitcoin-indexer-svc.unchained.svc.cluster.local:8001/websocket
    daemon-image: ruimarinho/bitcoin-core:0.21.0
    daemon-cpu-limit: "2"
    daemon-cpu-request: "1"
    daemon-memory-limit: 12Gi
    daemon-storage-size: 650Gi
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi
    rpc-url: http://user:password@bitcoin-indexer-svc.unchained.svc.cluster.local:8332

  - &bitcoin-dev
    <<: *bitcoin
    environment: dev
    pulumi-stack: public-dev
    indexer-replicas: 1
    indexer-url: http://bitcoin-indexer-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://bitcoin-indexer-svc.unchained-dev.svc.cluster.local:8001/websocket
    rpc-url: http://user:password@bitcoin-indexer-svc.unchained-dev.svc.cluster.local:8332
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi

  - &ethereum
    coinstack: ethereum
    pulumi-stack: public
    pulumi-dir: coinstacks/ethereum/pulumi
    indexer-cpu-limit: "4"
    indexer-cpu-request: "2"
    indexer-memory-limit: 12Gi
    indexer-replicas: 2
    indexer-storage-size: 500Gi
    indexer-url: http://ethereum-indexer-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://ethereum-indexer-svc.unchained.svc.cluster.local:8001/websocket
    daemon-image: ethereum/client-go:v1.10.19
    daemon-cpu-limit: "4"
    daemon-cpu-request: "3"
    daemon-memory-limit: 32Gi
    daemon-storage-size: 2000Gi
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi
    rpc-url: http://ethereum-indexer-svc.unchained.svc.cluster.local:8332

  - &ethereum-dev
    <<: *ethereum
    environment: dev
    pulumi-stack: public-dev
    indexer-replicas: 1
    indexer-url: http://ethereum-indexer-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://ethereum-indexer-svc.unchained-dev.svc.cluster.local:8001/websocket
    rpc-url: http://ethereum-indexer-svc.unchained-dev.svc.cluster.local:8332
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi

  - &cosmos
    coinstack: cosmos
    pulumi-stack: public
    pulumi-dir: coinstacks/cosmos/pulumi
    lcd-url: https://cosmoshub-4--lcd--archive.datahub.figment.io
    grpc-url: cosmoshub-4--grpc--archive.grpc.datahub.figment.io:443
    rpc-url: https://cosmoshub-4--rpc--archive.datahub.figment.io
    ws-url: wss://cosmoshub-4--rpc--archive.datahub.figment.io
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi

  - &cosmos-dev
    <<: *cosmos
    environment: dev
    pulumi-stack: public-dev
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi

  - &osmosis
    coinstack: osmosis
    pulumi-stack: public
    pulumi-dir: coinstacks/osmosis/pulumi
    lcd-url: https://osmosis-1--lcd--archive.datahub.figment.io
    rpc-url: https://osmosis-1--rpc--archive.datahub.figment.io
    grpc-url: https://osmosis-1--grpc--archive.datahub.figment.io
    ws-url: wss://osmosis-1--rpc--archive.datahub.figment.io
    keplr-url: https://lcd-osmosis.keplr.app
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi

  - &osmosis-dev
    <<: *osmosis
    environment: dev
    pulumi-stack: public-dev
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi

  - &avalanche
    coinstack: avalanche
    pulumi-stack: public
    pulumi-dir: coinstacks/avalanche/pulumi
    indexer-cpu-limit: "4"
    indexer-cpu-request: "2"
    indexer-memory-limit: 12Gi
    indexer-replicas: 2
    indexer-storage-size: 500Gi
    indexer-url: http://avalanche-indexer-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://avalanche-indexer-svc.unchained.svc.cluster.local:8001/websocket
    rpc-url: https://avalanche--mainnet--rpc.datahub.figment.io/apikey/14c056a2415b6e0d2b9f55985214f3f1/ext/bc/C/rpc
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi

  - &avalanche-dev
    <<: *avalanche
    environment: dev
    pulumi-stack: public-dev
    indexer-replicas: 2
    indexer-url: http://avalanche-indexer-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://avalanche-indexer-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi

  - &dogecoin
    coinstack: dogecoin
    pulumi-stack: public
    pulumi-dir: coinstacks/dogecoin/pulumi
    indexer-cpu-limit: "4"
    indexer-cpu-request: "2"
    indexer-memory-limit: 24Gi
    indexer-replicas: 2
    indexer-storage-size: 250Gi
    indexer-url: http://dogecoin-indexer-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://dogecoin-indexer-svc.unchained.svc.cluster.local:8001/websocket
    daemon-image: greenbigfrog/dogecoin:1.14.5
    daemon-cpu-limit: "2"
    daemon-cpu-request: "1"
    daemon-memory-limit: 12Gi
    daemon-storage-size: 250Gi
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi
    rpc-url: http://user:password@dogecoin-indexer-svc.unchained.svc.cluster.local:8332

  - &dogecoin-dev
    <<: *dogecoin
    environment: dev
    pulumi-stack: public-dev
    indexer-replicas: 1
    indexer-url: http://dogecoin-indexer-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://dogecoin-indexer-svc.unchained-dev.svc.cluster.local:8001/websocket
    rpc-url: http://user:password@dogecoin-indexer-svc.unchained-dev.svc.cluster.local:8332
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi

  - &litecoin
    coinstack: litecoin
    pulumi-stack: public
    pulumi-dir: coinstacks/litecoin/pulumi
    indexer-cpu-limit: "4"
    indexer-cpu-request: "2"
    indexer-memory-limit: 24Gi
    indexer-replicas: 2
    indexer-storage-size: 250Gi
    indexer-url: http://litecoin-indexer-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://litecoin-indexer-svc.unchained.svc.cluster.local:8001/websocket
    daemon-image: uphold/litecoin-core:0.18.1
    daemon-cpu-limit: "2"
    daemon-cpu-request: "1"
    daemon-memory-limit: 12Gi
    daemon-storage-size: 250Gi
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi
    rpc-url: http://user:password@litecoin-indexer-svc.unchained.svc.cluster.local:8332

  - &litecoin-dev
    <<: *litecoin
    environment: dev
    pulumi-stack: public-dev
    indexer-replicas: 1
    indexer-url: http://litecoin-indexer-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://litecoin-indexer-svc.unchained-dev.svc.cluster.local:8001/websocket
    rpc-url: http://user:password@litecoin-indexer-svc.unchained-dev.svc.cluster.local:8332
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi

  - &bitcoincash
    coinstack: bitcoincash
    pulumi-stack: public
    pulumi-dir: coinstacks/bitcoincash/pulumi
    indexer-cpu-limit: "4"
    indexer-cpu-request: "2"
    indexer-memory-limit: 24Gi
    indexer-replicas: 2
    indexer-storage-size: 250Gi
    indexer-url: http://bitcoincash-indexer-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://bitcoincash-indexer-svc.unchained.svc.cluster.local:8001/websocket
    daemon-image: zquestz/bitcoin-cash-node:24.1.0
    daemon-cpu-limit: "2"
    daemon-cpu-request: "1"
    daemon-memory-limit: 12Gi
    daemon-storage-size: 250Gi
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi
    rpc-url: http://user:password@bitcoincash-indexer-svc.unchained.svc.cluster.local:8332

  - &bitcoincash-dev
    <<: *bitcoincash
    environment: dev
    pulumi-stack: public-dev
    indexer-replicas: 1
    indexer-url: http://bitcoincash-indexer-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://bitcoincash-indexer-svc.unchained-dev.svc.cluster.local:8001/websocket
    rpc-url: http://user:password@bitcoincash-indexer-svc.unchained-dev.svc.cluster.local:8332
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi

  - &thorchain
    coinstack: thorchain
    pulumi-stack: public
    pulumi-dir: coinstacks/thorchain/pulumi
    lcd-url: http://thorchain:password@thorchain-svc.unchained.svc.cluster.local:1317
    rpc-url: http://thorchain:password@thorchain-svc.unchained.svc.cluster.local:27147
    ws-url: ws://thorchain:password@thorchain-svc.unchained.svc.cluster.local:27147
    api: false
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 30
    api-memory-limit: 2Gi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: registry.gitlab.com/thorchain/thornode:chaosnet-multichain-1.95.0
    service-cpu-limit-1: "4"
    service-memory-limit-1: 4Gi
    service-storage-size-1: 1536Gi
    service-name-2: timescaledb
    service-image-2: timescale/timescaledb:2.2.0-pg13
    service-cpu-limit-2: "2"
    service-memory-limit-2: 3Gi
    service-storage-size-2: 200Gi
    service-name-3: indexer
    service-image-3: registry.gitlab.com/thorchain/midgard:2.9.1
    service-cpu-limit-3: 500m
    service-memory-limit-3: 512Mi
    service-storage-size-3: 50Gi

  - &thorchain-dev
    <<: *thorchain
    environment: dev
    pulumi-stack: public-dev
    lcd-url: http://thorchain:password@thorchain-svc.unchained-dev.svc.cluster.local:1317
    rpc-url: http://thorchain:password@thorchain-svc.unchained-dev.svc.cluster.local:27147
    ws-url: ws://thorchain:password@thorchain-svc.unchained-dev.svc.cluster.local:27147
    api-max-replicas: 3
    api-cpu-limit: 300m
    api-memory-limit: 1Gi
    stateful-service-replicas: 1

commands:
  setup-runtime:
    description: setup runtime environment
    steps:
      - run:
          name: environment variables
          command: |
            echo 'export GOPATH=/home/circleci/go' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:/usr/local/go/bin:$PATH' >> $BASH_ENV
            echo 'export PATH=/home/circleci/.yarn/bin:$PATH' >> $BASH_ENV
            echo 'export PATH=/opt/jdk-11/bin:$PATH' >> $BASH_ENV
      - run:
          name: golang
          command: |
            sudo apt-get update && sudo apt-get install -y --no-install-recommends g++ libc6-dev
            sudo rm -rf /var/lib/apt/lists/*
            curl -sSL "https://golang.org/dl/go1.17.6.linux-amd64.tar.gz" | sudo tar -xz -C /usr/local/
            mkdir -p /home/circleci/go/bin
            curl -sSL "https://github.com/gotestyourself/gotestsum/releases/download/v1.7.0/gotestsum_1.7.0_linux_amd64.tar.gz" | sudo tar -xz -C /usr/local/bin gotestsum
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v1.44.2
      - run:
          name: node
          command: |
            curl -L -o node.tar.xz "https://nodejs.org/dist/v14.17.3/node-v14.17.3-linux-x64.tar.xz"
            sudo tar -xJf node.tar.xz -C /usr/local --strip-components=1
            rm node.tar.xz
            sudo ln -s /usr/local/bin/node /usr/local/bin/nodejs
      - run:
          name: yarn
          command: |
            curl -L -o yarn.tar.gz "https://yarnpkg.com/downloads/1.22.11/yarn-v1.22.11.tar.gz"
            sudo tar -xzf yarn.tar.gz -C /opt/
            rm yarn.tar.gz
            sudo ln -s /opt/yarn-v1.22.11/bin/yarn /usr/local/bin/yarn
            sudo ln -s /opt/yarn-v1.22.11/bin/yarnpkg /usr/local/bin/yarnpkg
      - run:
          name: goswagger
          command: docker pull quay.io/goswagger/swagger:v0.29.0

  unchained-precheck-node:
    description: install node dependencies, build, lint and test
    steps:
      - run:
          working_directory: node
          name: yarn install
          command: yarn install --immutable
      - run:
          working_directory: node
          name: build
          command: yarn build
      - run:
          working_directory: node
          name: lint
          command: yarn lint
      - run:
          working_directory: node
          name: test
          command: yarn test

  unchained-precheck-go:
    description: install go dependencies, make, lint and test
    steps:
      - run:
          working_directory: go
          name: go get
          command: go get ./...
      - run:
          working_directory: go
          name: make
          command: make
      - run:
          working_directory: go/pulumi
          name: install common pulumi dependencies
          command: yarn install --immutable
      - run:
         working_directory: go
         name: lint
         command: golangci-lint run
      #- run:
      #    working_directory: go
      #    name: test
      #    command: make test

  pulumi-dependencies:
    description: set up pulumi dependencies
    parameters:
      organization:
        type: string
    steps:
      - run:
          name: add environment variables
          command: |
            echo 'export ADDITIONAL_ROOT_DOMAIN_NAME=$<< parameters.organization >>_ADDITIONAL_ROOT_DOMAIN_NAME' >> $BASH_ENV
            echo 'export PULUMI_ACCESS_TOKEN=$<< parameters.organization >>_PULUMI_ACCESS_TOKEN' >> $BASH_ENV
      - run:
          name: install tools
          command: |
            apt update
            apt install wget unzip
      - run:
          name: install aws-cli
          command: |
            wget -O awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: install docker cli
          command: |
            wget -O dockercli.deb https://download.docker.com/linux/debian/dists/buster/pool/stable/amd64/docker-ce-cli_20.10.5~3-0~debian-buster_amd64.deb
            dpkg -i dockercli.deb
      - run:
          name: install kubectl
          command: |
            wget -O kubectl "https://dl.k8s.io/release/v1.21.3/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: install helm charts
          command: |
            wget -O helm.tar.gz https://get.helm.sh/helm-v3.6.2-linux-amd64.tar.gz
            tar -zxvf helm.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
            helm repo add autoscaler https://kubernetes.github.io/autoscaler
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm repo add eks https://aws.github.io/eks-charts
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo add traefik https://helm.traefik.io/traefik
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - run:
          name: install pulumi plugin resources
          command: |
            pulumi plugin install resource aws v5.8.0
            pulumi plugin install resource kubernetes v3.19.3
            pulumi plugin install resource eks 0.40.0
      - run:
          name: create aws credentials file
          command: |
            mkdir ~/.aws
            echo [default] > ~/.aws/credentials
            echo aws_access_key_id = $<< parameters.organization >>_AWS_ACCESS_KEY_ID >> ~/.aws/credentials
            echo aws_secret_access_key = $<< parameters.organization >>_AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials

jobs:
  deploy-dependencies:
    description: deploy all common unchained dependencies
    executor: pulumi
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      organization:
        type: string
      pulumi-command:
        type: string
        default: preview
    steps:
      - setup_remote_docker:
          version: 20.10.2
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: pulumi
          working_directory: node/pulumi
          command: |
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/dependencies
            pulumi config set --path unchained:common.cluster eks
            pulumi config set --path unchained:common.isLocal false
            pulumi config set --path unchained:common.additionalEnvironments[0] dev
            pulumi config set --path unchained:common.additionalEnvironments[1] monitoring
            pulumi config set --path unchained:common.eks.allAZs true
            pulumi config set --path unchained:common.eks.autoscaling true
            pulumi config set --path unchained:common.eks.region $AWS_REGION
            pulumi config set --path unchained:common.eks.cidrBlock 10.0.0.0/16
            pulumi config set --path unchained:common.eks.nodeGroups[0].name spot
            pulumi config set --path unchained:common.eks.nodeGroups[0].type SPOT
            pulumi config set --path unchained:common.eks.nodeGroups[0].minSize 1
            pulumi config set --path unchained:common.eks.nodeGroups[0].maxSize 5
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[0] r5.4xlarge
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[1] r5a.4xlarge
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[2] r5b.4xlarge
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[3] r5n.4xlarge
            pulumi config set --path unchained:common.eks.traefik.autoscaling.enabled true
            pulumi config set --path unchained:common.eks.traefik.autoscaling.cpuThreshold 20
            pulumi config set --path unchained:common.eks.traefik.autoscaling.maxReplicas 15
            pulumi config set --path unchained:common.eks.traefik.replicas 5
            pulumi config set --path unchained:common.eks.traefik.resources.cpu 300m
            pulumi config set --path unchained:common.eks.traefik.resources.memory 512Mi
            pulumi config set --path unchained:common.eks.traefik.whitelist[0] 173.245.48.0/20
            pulumi config set --path unchained:common.eks.traefik.whitelist[1] 103.21.244.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[2] 103.22.200.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[3] 103.31.4.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[4] 141.101.64.0/18
            pulumi config set --path unchained:common.eks.traefik.whitelist[5] 108.162.192.0/18
            pulumi config set --path unchained:common.eks.traefik.whitelist[6] 190.93.240.0/20
            pulumi config set --path unchained:common.eks.traefik.whitelist[7] 188.114.96.0/20
            pulumi config set --path unchained:common.eks.traefik.whitelist[8] 197.234.240.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[9] 198.41.128.0/17
            pulumi config set --path unchained:common.eks.traefik.whitelist[10] 162.158.0.0/15
            pulumi config set --path unchained:common.eks.traefik.whitelist[11] 104.16.0.0/13
            pulumi config set --path unchained:common.eks.traefik.whitelist[12] 104.24.0.0/14
            pulumi config set --path unchained:common.eks.traefik.whitelist[13] 172.64.0.0/13
            pulumi config set --path unchained:common.eks.traefik.whitelist[14] 131.0.72.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[15] $AWS_NAT_ADDRESS_0
            pulumi config set --path unchained:common.eks.traefik.whitelist[16] $AWS_NAT_ADDRESS_1
            pulumi config set --path unchained:common.eks.traefik.whitelist[17] $AWS_NAT_ADDRESS_2
            pulumi config set --path unchained:common.eks.traefik.whitelist[18] $VPN_ADDRESS_0
            pulumi config set --path unchained:common.eks.traefik.whitelist[19] $VPN_ADDRESS_1
            pulumi config set --path unchained:common.eks.traefik.whitelist[20] $VPN_ADDRESS_2
            pulumi config set --path unchained:common.eks.traefik.whitelist[21] $VPN_ADDRESS_3
            pulumi config set --path unchained:common.eks.traefik.whitelist[22] $VPN_ADDRESS_4
            pulumi config set --path unchained:common.eks.traefik.whitelist[23] $AWS_TAXISTAKE_NAT_ADDRESS_0
            pulumi config set --path unchained:common.eks.traefik.whitelist[24] $AWS_TAXISTAKE_NAT_ADDRESS_1
            pulumi config set --path unchained:common.eks.traefik.whitelist[25] $AWS_TAXISTAKE_NAT_ADDRESS_2
            pulumi config set --path unchained:common.dockerhub.username $DOCKERHUB_USERNAME
            pulumi config set --path unchained:common.dockerhub.password $DOCKERHUB_PASSWORD --plaintext
            pulumi config set --path unchained:common.dockerhub.server docker.io
            pulumi config set --path unchained:common.rootDomainName $<< parameters.organization >>_ROOT_DOMAIN_NAME
            pulumi <<parameters.pulumi-command>> --suppress-outputs

  deploy-coinstack-node:
    description: deploy a specific node coinstack
    executor: pulumi
    environment:
      DOCKER_BUILDKIT: 1
      LOG_LEVEL: debug
      MIDGARD_URL: https://midgard.thorchain.info
      MONGO_DBNAME: coinstack
    parameters:
      organization:
        type: string
      coinstack:
        description: coinstack name
        type: string
      environment:
        description: environment to deploy into. empty string ('') is our prod
        type: string
        default: ""
      network:
        type: string
        default: mainnet
      pulumi-stack:
        description: pulumi stack to deploy to (public)
        type: string
      pulumi-dir:
        description: path to pulumi directory
        type: string
      pulumi-command:
        type: string
        default: preview
      indexer-cpu-limit:
        type: string
      indexer-cpu-request:
        type: string
      indexer-memory-limit:
        type: string
      indexer-replicas:
        type: integer
      indexer-storage-size:
        type: string
      indexer-url:
        type: string
      indexer-ws-url:
        type: string
      rpc-url:
        type: string
      daemon-image:
        type: string
        default: ""
      daemon-cpu-limit:
        type: string
        default: ""
      daemon-cpu-request:
        type: string
        default: ""
      daemon-memory-limit:
        type: string
        default: ""
      daemon-storage-size:
        type: string
        default: ""
      api:
        type: boolean
        default: true
      api-autoscaling:
        type: boolean
        default: false 
      api-cpu-threshold:
        type: integer
        default: 0 
      api-max-replicas:
        type: integer
        default: 0 
      api-cpu-limit:
        type: string
        default: ""
      api-cpu-request:
        type: string
        default: ""
      api-memory-limit:
        type: string
        default: ""
      api-replicas:
        type: integer
        default: 0 
    steps:
      - setup_remote_docker:
          version: 20.10.2
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: add custom environment variables
          command: |
            echo 'export INDEXER_URL=<< parameters.indexer-url >>' >> $BASH_ENV
            echo 'export INDEXER_WS_URL=<< parameters.indexer-ws-url >>' >> $BASH_ENV
            echo 'export NETWORK=<< parameters.network >>' >> $BASH_ENV
            echo 'export RPC_URL=<< parameters.rpc-url >>' >> $BASH_ENV
      - run:
          name: pulumi
          working_directory: node/<< parameters.pulumi-dir >>
          command: |
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/<< parameters.pulumi-stack >>
            pulumi config set --path unchained:<< parameters.coinstack >>.stack $<< parameters.organization >>_PULUMI_ORG/common/dependencies
            [ -n "<< parameters.environment >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.environment << parameters.environment >>
            pulumi config set --path unchained:<< parameters.coinstack >>.network << parameters.network >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.autoscaling.enabled << parameters.api-autoscaling >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.autoscaling.cpuThreshold << parameters.api-cpu-threshold >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.autoscaling.maxReplicas << parameters.api-max-replicas >>
            [ "<< parameters.api >>" = true ] && [ -n "<< parameters.api-cpu-limit >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.cpuLimit << parameters.api-cpu-limit >>
            [ "<< parameters.api >>" = true ] && [ -n "<< parameters.api-cpu-request >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.cpuRequest << parameters.api-cpu-request >>
            [ "<< parameters.api >>" = true ] && [ -n "<< parameters.api-memory-limit >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.memoryLimit << parameters.api-memory-limit >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.replicas << parameters.api-replicas >>
            pulumi config set --path unchained:<< parameters.coinstack >>.indexer.cpuLimit << parameters.indexer-cpu-limit >>
            pulumi config set --path unchained:<< parameters.coinstack >>.indexer.cpuRequest << parameters.indexer-cpu-request >>
            pulumi config set --path unchained:<< parameters.coinstack >>.indexer.memoryLimit << parameters.indexer-memory-limit >>
            pulumi config set --path unchained:<< parameters.coinstack >>.indexer.replicas << parameters.indexer-replicas >>
            pulumi config set --path unchained:<< parameters.coinstack >>.indexer.storageSize << parameters.indexer-storage-size >>
            [ -n "<< parameters.daemon-image >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.indexer.daemon.image << parameters.daemon-image >>
            [ -n "<< parameters.daemon-cpu-limit >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.indexer.daemon.cpuLimit << parameters.daemon-cpu-limit >>
            [ -n "<< parameters.daemon-cpu-request >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.indexer.daemon.cpuRequest << parameters.daemon-cpu-request >>
            [ -n "<< parameters.daemon-memory-limit >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.indexer.daemon.memoryLimit << parameters.daemon-memory-limit >>
            [ -n "<< parameters.daemon-storage-size >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.indexer.daemon.storageSize << parameters.daemon-storage-size >>
            pulumi << parameters.pulumi-command >> --suppress-outputs

  deploy-coinstack-go:
    description: deploy a specific go coinstack
    executor: pulumi
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      organization:
        type: string
      coinstack:
        description: coinstack name
        type: string
      environment:
        description: environment to deploy into. empty string ('') is our prod
        type: string
        default: ""
      network:
        type: string
        default: mainnet
      pulumi-stack:
        description: pulumi stack to deploy to (public)
        type: string
      pulumi-dir:
        description: path to pulumi directory
        type: string
      pulumi-command:
        type: string
        default: preview
      lcd-url:
        type: string
      grpc-url:
        type: string
        default: ""
      rpc-url:
        type: string
      keplr-url:
        type: string
        default: ""
      ws-url:
        type: string
      api:
        type: boolean
        default: true
      api-autoscaling:
        type: boolean
      api-cpu-threshold:
        type: integer
      api-max-replicas:
        type: integer
      api-cpu-limit:
        type: string
      api-cpu-request:
        type: string
      api-memory-limit:
        type: string
      api-replicas:
        type: integer
      stateful-service-replicas:
        type: integer
        default: 0
      service-name-1:
        type: string
        default: ""
      service-image-1:
        type: string
        default: ""
      service-cpu-limit-1:
        type: string
        default: ""
      service-memory-limit-1:
        type: string
        default: ""
      service-storage-size-1:
        type: string
        default: ""
      service-name-2:
        type: string
        default: ""
      service-image-2:
        type: string
        default: ""
      service-cpu-limit-2:
        type: string
        default: ""
      service-memory-limit-2:
        type: string
        default: ""
      service-storage-size-2:
        type: string
        default: ""
      service-name-3:
        type: string
        default: ""
      service-image-3:
        type: string
        default: ""
      service-cpu-limit-3:
        type: string
        default: ""
      service-memory-limit-3:
        type: string
        default: ""
      service-storage-size-3:
        type: string
        default: ""
    steps:
      - setup_remote_docker:
          version: 20.10.2
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: add custom environment variables
          command: |
            echo 'export LCD_URL=<< parameters.lcd-url >>' >> $BASH_ENV
            echo 'export GRPC_URL=<< parameters.grpc-url >>' >> $BASH_ENV
            echo 'export RPC_URL=<< parameters.rpc-url >>' >> $BASH_ENV
            echo 'export WS_URL=<< parameters.ws-url >>' >> $BASH_ENV
            echo 'export API_KEY=$<< parameters.organization >>_DATAHUB_API_KEY' >> $BASH_ENV
            echo 'export KEPLR_URL=<< parameters.keplr-url >>' >> $BASH_ENV
      - run:
          name: pulumi
          working_directory: go/<< parameters.pulumi-dir >>
          command: |
            yarn install --immutable
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/<< parameters.pulumi-stack >>
            pulumi config set --path unchained:<< parameters.coinstack >>.stack $<< parameters.organization >>_PULUMI_ORG/common/dependencies
            [ -n "<< parameters.environment >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.environment << parameters.environment >>
            pulumi config set --path unchained:<< parameters.coinstack >>.network << parameters.network >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.autoscaling.enabled << parameters.api-autoscaling >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.autoscaling.cpuThreshold << parameters.api-cpu-threshold >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.autoscaling.maxReplicas << parameters.api-max-replicas >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.cpuLimit << parameters.api-cpu-limit >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.cpuRequest << parameters.api-cpu-request >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.memoryLimit << parameters.api-memory-limit >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:<< parameters.coinstack >>.api.replicas << parameters.api-replicas >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] &&pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.replicas << parameters.stateful-service-replicas >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-1 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[0].name << parameters.service-name-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-1 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[0].image << parameters.service-image-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-1 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[0].cpuLimit << parameters.service-cpu-limit-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-1 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[0].memoryLimit << parameters.service-memory-limit-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-1 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[0].storageSize << parameters.service-storage-size-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-2 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[1].name << parameters.service-name-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-2 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[1].image << parameters.service-image-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-2 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[1].cpuLimit << parameters.service-cpu-limit-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-2 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[1].memoryLimit << parameters.service-memory-limit-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-2 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[1].storageSize << parameters.service-storage-size-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-3 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[2].name << parameters.service-name-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-3 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[2].image << parameters.service-image-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-3 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[2].cpuLimit << parameters.service-cpu-limit-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-3 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[2].memoryLimit << parameters.service-memory-limit-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-3 >>" ] && pulumi config set --path unchained:<< parameters.coinstack >>.statefulService.services[2].storageSize << parameters.service-storage-size-3 >>
            pulumi << parameters.pulumi-command >> --suppress-outputs

  deploy-monitoring:
    description: deploy unchained monitoring stack
    executor: pulumi
    parameters:
      organization:
        type: string
      pulumi-command:
        type: string
        default: preview
    steps:
      - setup_remote_docker:
          version: 20.10.2
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: pulumi
          working_directory: node/monitoring
          command: |
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/prod
            pulumi config set --path unchained:monitoring.stack $<< parameters.organization >>_PULUMI_ORG/common/dependencies
            pulumi config set --path unchained:monitoring.environment monitoring
            pulumi config set --path unchained:monitoring.githubOrg $<< parameters.organization>>_GITHUB_ORG
            pulumi config set --path unchained:monitoring.githubOauthID $<< parameters.organization>>_GITHUB_OAUTH_ID
            pulumi config set --path unchained:monitoring.githubOauthSecret $<< parameters.organization>>_GITHUB_OAUTH_SECRET --plaintext
            pulumi config set --path unchained:monitoring.alerting true
            pulumi config set --path unchained:monitoring.opsgenieApiKey $<< parameters.organization >>_OPSGENIE_API_KEY
            pulumi <<parameters.pulumi-command>> --suppress-outputs

  lint-and-test:
    description: lint and test project
    machine:
      image: ubuntu-2004:202111-02
    resource_class: large
    steps:
      - checkout
      - setup-runtime
      - unchained-precheck-go
      - unchained-precheck-node

  lint-and-test-persist:
    description: lint and test project (persist to workspace)
    machine:
      image: ubuntu-2004:202111-02
    resource_class: large
    steps:
      - checkout
      - setup-runtime
      - unchained-precheck-go
      - unchained-precheck-node
      - run:
          name: Remove devDependencies
          command: yarn --production --ignore-scripts --prefer-offline --silent --frozen-lockfile
      - persist_to_workspace:
          root: "~"
          paths:
            - project

workflows:
  version: 2

  check:
    jobs:
      - lint-and-test:
          name: lint and test project
          <<: *only-feature

  deploy-development:
    jobs:
      - lint-and-test-persist:
          name: lint and test project (persist to workspace)
          <<: *only-develop

      ########## (SHAPESHIFT) ##########
      - deploy-dependencies:
          name: deploy dependencies (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - lint and test project (persist to workspace)
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy bitcoin develop (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *bitcoin-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy dogecoin develop (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *dogecoin-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy litecoin develop (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *litecoin-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy bitcoincash develop (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *bitcoincash-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy ethereum develop (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *ethereum-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy avalanche develop (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *avalanche-dev
          <<: *only-develop

      - deploy-coinstack-go:
          name: deploy cosmos develop (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *cosmos-dev
          <<: *only-develop

      - deploy-coinstack-go:
          name: deploy osmosis develop (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *osmosis-dev
          <<: *only-develop

      - deploy-coinstack-go:
          name: deploy thorchain develop (shapshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies (shapeshift)
          <<: *thorchain-dev
          <<: *only-develop

  deploy-monitoring:
    jobs:
      - approve-monitoring-workflow:
          name: approve monitoring workflow
          type: approval
          <<: *only-develop

      - lint-and-test-persist:
          name: lint and test project (persist to workplace)
          requires:
            - approve monitoring workflow
          <<: *only-develop

      ########## (SHAPESHIFT) ##########
      - deploy-monitoring:
          name: preview monitoring (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview
          requires:
            - lint and test project (persist to workplace)
          <<: *only-develop

      - approve-monitoring:
          name: approve shapeshift
          type: approval
          requires:
            - preview monitoring (shapeshift)
          <<: *only-develop

      - deploy-monitoring:
          name: deploy monitoring (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - approve shapeshift
          <<: *only-develop

      ########## (TAXISTAKE) ##########
      - deploy-monitoring:
          name: preview monitoring (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - lint and test project (persist to workplace)
          <<: *only-develop

      - approve-monitoring:
          name: approve taxistake
          type: approval
          requires:
            - preview monitoring (taxistake)
          <<: *only-develop

      - deploy-monitoring:
          name: deploy monitoring (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve taxistake
          <<: *only-develop

  deploy-main:
    jobs:
      - lint-and-test-persist:
          name: lint and test project (persist to workspace)
          <<: *only-main

      ########## (SHAPESHIFT) ##########
      - deploy-dependencies:
          name: validate dependencies (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview --expect-no-changes
          requires:
            - lint and test project (persist to workspace)
          <<: *only-main

      ####### BITCOIN
      - deploy-coinstack-node:
          name: preview bitcoin (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview
          requires:
            - validate dependencies (shapeshift)
          <<: *bitcoin
          <<: *only-main

      - approve-coinstack:
          name: approve bitcoin coinstack (shapeshift)
          type: approval
          requires:
            - preview bitcoin (shapeshift)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy bitcoin (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - approve bitcoin coinstack (shapeshift)
          <<: *bitcoin
          <<: *only-main

      ####### BITCOINCASH
      - deploy-coinstack-node:
          name: preview bitcoincash (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview
          requires:
            - validate dependencies (shapeshift)
          <<: *bitcoincash
          <<: *only-main

      - approve-coinstack:
          name: approve bitcoincash coinstack (shapeshift)
          type: approval
          requires:
            - preview bitcoincash (shapeshift)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy bitcoincash (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - approve bitcoincash coinstack (shapeshift)
          <<: *bitcoincash
          <<: *only-main

      ####### DOGECOIN
      - deploy-coinstack-node:
          name: preview dogecoin (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview
          requires:
            - validate dependencies (shapeshift)
          <<: *dogecoin
          <<: *only-main

      - approve-coinstack:
          name: approve dogecoin coinstack (shapeshift)
          type: approval
          requires:
            - preview dogecoin (shapeshift)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy dogecoin (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - approve dogecoin coinstack (shapeshift)
          <<: *dogecoin
          <<: *only-main

      ####### LITECOIN
      - deploy-coinstack-node:
          name: preview litecoin (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview
          requires:
            - validate dependencies (shapeshift)
          <<: *litecoin
          <<: *only-main

      - approve-coinstack:
          name: approve litecoin coinstack (shapeshift)
          type: approval
          requires:
            - preview litecoin (shapeshift)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy litecoin (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - approve litecoin coinstack (shapeshift)
          <<: *litecoin
          <<: *only-main

      ####### ETHEREUM
      - deploy-coinstack-node:
          name: preview ethereum (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview
          requires:
            - validate dependencies (shapeshift)
          <<: *ethereum
          <<: *only-main

      - approve-coinstack:
          name: approve ethereum coinstack (shapeshift)
          type: approval
          requires:
            - preview ethereum (shapeshift)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy ethereum (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - approve ethereum coinstack (shapeshift)
          <<: *ethereum
          <<: *only-main

      ####### AVALANCHE
      - deploy-coinstack-node:
          name: preview avalanche (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview
          requires:
            - validate dependencies (shapeshift)
          <<: *avalanche
          <<: *only-main

      - approve-coinstack:
          name: approve avalanche coinstack (shapeshift)
          type: approval
          requires:
            - preview avalanche (shapeshift)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy avalanche (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - approve avalanche coinstack (shapeshift)
          <<: *avalanche
          <<: *only-main

      ####### COSMOS
      - deploy-coinstack-go:
          name: preview cosmos (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: preview
          requires:
            - validate dependencies (shapeshift)
          <<: *cosmos
          <<: *only-main

      - approve-coinstack:
          name: approve cosmos coinstack (shapeshift)
          type: approval
          requires:
            - preview cosmos (shapeshift)
          <<: *only-main

      - deploy-coinstack-go:
          name: deploy cosmos (shapeshift)
          organization: SHAPESHIFT
          pulumi-command: up -f --yes
          requires:
            - approve cosmos coinstack (shapeshift)
          <<: *cosmos
          <<: *only-main

      ########## (TAXISTAKE) ##########
      - deploy-dependencies:
          name: preview dependencies (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - lint and test project (persist to workspace)
          <<: *only-main

      - approve-taxistake:
          name: approve dependencies (taxistake)
          type: approval
          requires:
            - preview dependencies (taxistake)
          <<: *only-main

      - deploy-dependencies:
          name: deploy dependencies (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve dependencies (taxistake)
          <<: *only-main

      ####### BITCOIN
      - deploy-coinstack-node:
          name: preview bitcoin (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - deploy dependencies (taxistake)
          <<: *bitcoin
          <<: *only-main

      - approve-coinstack:
          name: approve bitcoin coinstack (taxistake)
          type: approval
          requires:
            - preview bitcoin (taxistake)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy bitcoin (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve bitcoin coinstack (taxistake)
          <<: *bitcoin
          <<: *only-main

      ####### BITCOINCASH
      - deploy-coinstack-node:
          name: preview bitcoincash (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - deploy dependencies (taxistake)
          <<: *bitcoincash
          <<: *only-main

      - approve-coinstack:
          name: approve bitcoincash coinstack (taxistake)
          type: approval
          requires:
            - preview bitcoincash (taxistake)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy bitcoincash (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve bitcoincash coinstack (taxistake)
          <<: *bitcoincash
          <<: *only-main

      ####### DOGECOIN
      - deploy-coinstack-node:
          name: preview dogecoin (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - deploy dependencies (taxistake)
          <<: *dogecoin
          <<: *only-main

      - approve-coinstack:
          name: approve dogecoin coinstack (taxistake)
          type: approval
          requires:
            - preview dogecoin (taxistake)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy dogecoin (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve dogecoin coinstack (taxistake)
          <<: *dogecoin
          <<: *only-main

      ####### LITECOIN
      - deploy-coinstack-node:
          name: preview litecoin (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - deploy dependencies (taxistake)
          <<: *litecoin
          <<: *only-main

      - approve-coinstack:
          name: approve litecoin coinstack (taxistake)
          type: approval
          requires:
            - preview litecoin (taxistake)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy litecoin (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve litecoin coinstack (taxistake)
          <<: *litecoin
          <<: *only-main

      ####### ETHEREUM
      - deploy-coinstack-node:
          name: preview ethereum (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - deploy dependencies (taxistake)
          <<: *ethereum
          <<: *only-main

      - approve-coinstack:
          name: approve ethereum coinstack (taxistake)
          type: approval
          requires:
            - preview ethereum (taxistake)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy ethereum (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve ethereum coinstack (taxistake)
          <<: *ethereum
          <<: *only-main

      ####### AVALANCHE
      - deploy-coinstack-node:
          name: preview avalanche (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - deploy dependencies (taxistake)
          <<: *avalanche
          <<: *only-main

      - approve-coinstack:
          name: approve avalanche coinstack (taxistake)
          type: approval
          requires:
            - preview avalanche (taxistake)
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy avalanche (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve avalanche coinstack (taxistake)
          <<: *avalanche
          <<: *only-main

      ####### COSMOS
      - deploy-coinstack-go:
          name: preview cosmos (taxistake)
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - deploy dependencies (taxistake)
          <<: *cosmos
          <<: *only-main

      - approve-coinstack:
          name: approve cosmos coinstack (taxistake)
          type: approval
          requires:
            - preview cosmos (taxistake)
          <<: *only-main

      - deploy-coinstack-go:
          name: deploy cosmos (taxistake)
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve cosmos coinstack (taxistake)
          <<: *cosmos
          <<: *only-main
