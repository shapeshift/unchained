version: 2.1

executors:
  pulumi:
    docker:
      - image: pulumi/pulumi-nodejs:3.50.2
  golang:
    docker:
      - image: golang:1.20.3-bullseye

aliases:
  - &only-feature
    filters:
      branches:
        ignore:
          - main
          - develop

  - &only-develop
    filters:
      branches:
        only:
          - develop

  - &only-main
    filters:
      branches:
        only:
          - main
  
  - &params
    organization:
      type: string
    assetName:
      description: the k8s asset name
      type: string
    environment:
      description: environment to deploy into. empty string ('') is our prod
      type: string
      default: ""
    network:
      type: string
      default: mainnet
    pulumi-stack:
      description: pulumi stack to deploy to
      type: string
    pulumi-dir:
      description: path to pulumi directory
      type: string
    pulumi-command:
      type: string
      default: preview
    api:
      type: boolean
      default: true
    api-autoscaling:
      type: boolean
    api-cpu-threshold:
      type: integer
    api-max-replicas:
      type: integer
    api-cpu-limit:
      type: string
    api-cpu-request:
      type: string
    api-memory-limit:
      type: string
    api-replicas:
      type: integer
    stateful-service-replicas:
      type: integer
      default: 0
    stateful-service-backup:
      type: boolean
      default: false
    stateful-service-backup-count:
      type: integer
      default: 3
    stateful-service-backup-schedule:
      type: string
      default: "0 4 * * 0" 
    service-name-1:
      type: string
      default: ""
    service-image-1:
      type: string
      default: ""
    service-cpu-limit-1:
      type: string
      default: ""
    service-cpu-request-1:
      type: string
      default: ""
    service-memory-limit-1:
      type: string
      default: ""
    service-memory-request-1:
      type: string
      default: ""
    service-storage-size-1:
      type: string
      default: ""
    service-name-2:
      type: string
      default: ""
    service-image-2:
      type: string
      default: ""
    service-cpu-limit-2:
      type: string
      default: ""
    service-cpu-request-2:
      type: string
      default: ""
    service-memory-limit-2:
      type: string
      default: ""
    service-memory-request-2:
      type: string
      default: ""
    service-storage-size-2:
      type: string
      default: ""
    service-name-3:
      type: string
      default: ""
    service-image-3:
      type: string
      default: ""
    service-cpu-limit-3:
      type: string
      default: ""
    service-cpu-request-3:
      type: string
      default: ""
    service-memory-limit-3:
      type: string
      default: ""
    service-memory-request-3:
      type: string
      default: ""
    service-storage-size-3:
      type: string
      default: ""

  - &bitcoin
    assetName: bitcoin
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/bitcoin/pulumi
    rpc-url: http://user:password@bitcoin-svc.unchained.svc.cluster.local:8332
    indexer-url: http://bitcoin-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://bitcoin-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: shapeshiftdao/bitcoin-core:25.0
    service-cpu-limit-1: "2"
    service-cpu-request-1: "1"
    service-memory-limit-1: 8Gi
    service-storage-size-1: 650Gi
    service-name-2: indexer
    service-image-2: shapeshiftdao/unchained-blockbook:fdc2b86
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 40Gi
    service-storage-size-2: 500Gi

  - &bitcoin-dev
    <<: *bitcoin
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://user:password@bitcoin-svc.unchained-dev.svc.cluster.local:8332
    indexer-url: http://bitcoin-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://bitcoin-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &ethereum
    assetName: ethereum
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/ethereum/pulumi
    rpc-url: http://ethereum-svc.unchained.svc.cluster.local:8332
    indexer-url: http://ethereum-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://ethereum-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: ethereum/client-go:v1.12.0
    service-cpu-limit-1: "4"
    service-cpu-request-1: "2"
    service-memory-limit-1: 32Gi
    service-storage-size-1: 2500Gi
    service-name-2: daemon-beacon
    service-image-2: gcr.io/prysmaticlabs/prysm/beacon-chain:v4.0.5
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 12Gi
    service-storage-size-2: 500Gi
    service-name-3: indexer
    service-image-3: shapeshiftdao/unchained-blockbook:fdc2b86
    service-cpu-limit-3: "2"
    service-cpu-request-3: "1"
    service-memory-limit-3: 16Gi
    service-storage-size-3: 500Gi

  - &ethereum-dev
    <<: *ethereum
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://ethereum-svc.unchained-dev.svc.cluster.local:8332
    indexer-url: http://ethereum-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://ethereum-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1
    # “At 04:00 on Wednesday.”
    stateful-service-backup: true
    stateful-service-backup-schedule: "0 4 * * 3"
    stateful-service-backup-count: 1

  - &cosmos
    assetName: cosmos
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/cosmos/pulumi
    lcd-url: http://cosmos-svc.unchained.svc.cluster.local:1317
    grpc-url: cosmos-svc.unchained.svc.cluster.local:9090
    rpc-url: http://cosmos-svc.unchained.svc.cluster.local:26657
    ws-url: ws://cosmos-svc.unchained.svc.cluster.local:26657
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: shapeshiftdao/cosmoshub:v9.1.1
    service-cpu-limit-1: "4"
    service-cpu-request-1: "2"
    service-memory-limit-1: 32Gi
    service-storage-size-1: 3000Gi

  - &cosmos-dev
    <<: *cosmos
    environment: dev
    pulumi-stack: public-dev-us-east-2
    lcd-url: http://cosmos-svc.unchained-dev.svc.cluster.local:1317
    grpc-url: cosmos-svc.unchained-dev.svc.cluster.local:9090
    rpc-url: http://cosmos-svc.unchained-dev.svc.cluster.local:26657
    ws-url: ws://cosmos-svc.unchained-dev.svc.cluster.local:26657
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &osmosis
    assetName: osmosis
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/osmosis/pulumi
    lcd-url: http://osmosis-svc.unchained.svc.cluster.local:1317
    rpc-url: http://osmosis-svc.unchained.svc.cluster.local:26657
    ws-url: ws://osmosis-svc.unchained.svc.cluster.local:26657
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: shapeshiftdao/osmosis:v15.1.2
    service-cpu-limit-1: "4"
    service-cpu-request-1: "2"
    service-memory-request-1: 32Gi
    service-storage-size-1: 1000Gi

  - &osmosis-dev
    <<: *osmosis
    environment: dev
    pulumi-stack: public-dev-us-east-2
    lcd-url: http://osmosis-svc.unchained-dev.svc.cluster.local:1317
    rpc-url: http://osmosis-svc.unchained-dev.svc.cluster.local:26657
    ws-url: ws://osmosis-svc.unchained-dev.svc.cluster.local:26657
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &avalanche
    assetName: avalanche
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/avalanche/pulumi
    rpc-url: http://avalanche-svc.unchained.svc.cluster.local:9650/ext/bc/C/rpc
    indexer-url: http://avalanche-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://avalanche-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: avaplatform/avalanchego:v1.10.2
    service-cpu-limit-1: "2"
    service-cpu-request-1: "1"
    service-memory-limit-1: 12Gi
    service-storage-size-1: 4500Gi
    service-name-2: indexer
    service-image-2: shapeshiftdao/unchained-blockbook:fdc2b86
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 6Gi
    service-storage-size-2: 500Gi

  - &avalanche-dev
    <<: *avalanche
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://avalanche-svc.unchained-dev.svc.cluster.local:9650/ext/bc/C/rpc
    indexer-url: http://avalanche-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://avalanche-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &dogecoin
    assetName: dogecoin
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/dogecoin/pulumi
    rpc-url: http://user:password@dogecoin-svc.unchained.svc.cluster.local:8332
    indexer-url: http://dogecoin-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://dogecoin-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: shapeshiftdao/dogecoin:1.14.6
    service-cpu-limit-1: "2"
    service-cpu-request-1: "1"
    service-memory-limit-1: 4Gi
    service-storage-size-1: 250Gi
    service-name-2: indexer
    service-image-2: shapeshiftdao/unchained-blockbook:fdc2b86
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 16Gi
    service-storage-size-2: 250Gi

  - &dogecoin-dev
    <<: *dogecoin
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://user:password@dogecoin-svc.unchained-dev.svc.cluster.local:8332
    indexer-url: http://dogecoin-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://dogecoin-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &litecoin
    assetName: litecoin
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/litecoin/pulumi
    rpc-url: http://user:password@litecoin-svc.unchained.svc.cluster.local:8332
    indexer-url: http://litecoin-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://litecoin-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: uphold/litecoin-core:0.21
    service-cpu-limit-1: "2"
    service-cpu-request-1: "1"
    service-memory-limit-1: 4Gi
    service-storage-size-1: 250Gi
    service-name-2: indexer
    service-image-2: shapeshiftdao/unchained-blockbook:fdc2b86
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 12Gi
    service-storage-size-2: 250Gi

  - &litecoin-dev
    <<: *litecoin
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://user:password@litecoin-svc.unchained-dev.svc.cluster.local:8332
    indexer-url: http://litecoin-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://litecoin-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &bitcoincash
    assetName: bitcoincash
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/bitcoincash/pulumi
    rpc-url: http://user:password@bitcoincash-svc.unchained.svc.cluster.local:8332
    indexer-url: http://bitcoincash-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://bitcoincash-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: shapeshiftdao/bitcoin-cash-node:26.1.0
    service-cpu-limit-1: "2"
    service-cpu-request-1: "1"
    service-memory-limit-1: 4Gi
    service-storage-size-1: 250Gi
    service-name-2: indexer
    service-image-2: shapeshiftdao/unchained-blockbook:fdc2b86
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 8Gi
    service-storage-size-2: 250Gi

  - &bitcoincash-dev
    <<: *bitcoincash
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://user:password@bitcoincash-svc.unchained-dev.svc.cluster.local:8332
    indexer-url: http://bitcoincash-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://bitcoincash-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &thorchain
    assetName: thorchain
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/thorchain/pulumi
    lcd-url: http://thorchain-svc.unchained.svc.cluster.local:1317
    rpc-url: http://thorchain-svc.unchained.svc.cluster.local:27147
    ws-url: ws://thorchain-svc.unchained.svc.cluster.local:27147
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: registry.gitlab.com/thorchain/thornode:chaosnet-multichain-1.113.0
    service-cpu-limit-1: "2"
    service-cpu-request-1: "1"
    service-memory-limit-1: 8Gi
    service-storage-size-1: 2500Gi
    service-name-2: timescaledb
    service-image-2: timescale/timescaledb:2.2.0-pg13
    service-cpu-request-2: "2"
    service-cpu-limit-2: "4"
    service-memory-limit-2: 8Gi
    service-storage-size-2: 500Gi
    service-name-3: indexer
    service-image-3: registry.gitlab.com/thorchain/midgard:2.13.0
    service-cpu-limit-3: 500m
    service-cpu-request-3: 250m
    service-memory-limit-3: 1Gi
    service-storage-size-3: 100Gi

  - &thorchain-dev
    <<: *thorchain
    environment: dev
    pulumi-stack: public-dev-us-east-2
    lcd-url: http://thorchain-svc.unchained-dev.svc.cluster.local:1317
    rpc-url: http://thorchain-svc.unchained-dev.svc.cluster.local:27147
    ws-url: ws://thorchain-svc.unchained-dev.svc.cluster.local:27147
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &optimism
    assetName: optimism
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/optimism/pulumi
    rpc-url: http://optimism-svc.unchained.svc.cluster.local:8545
    indexer-url: http://optimism-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://optimism-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:v1.101105.3
    service-cpu-limit-1: "8"
    service-cpu-request-1: "4"
    service-memory-limit-1: 24Gi
    service-storage-size-1: 500Gi
    service-name-2: op-node
    service-image-2: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.1.0
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 2Gi
    service-storage-size-2: 100Gi
    service-name-3: indexer
    service-image-3: shapeshiftdao/unchained-blockbook:optimism-bedrock-3c86cce
    service-cpu-limit-3: "2"
    service-cpu-request-3: "1"
    service-memory-limit-3: 12Gi
    service-storage-size-3: 500Gi

  - &optimism-dev
    <<: *optimism
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://optimism-svc.unchained-dev.svc.cluster.local:8545
    indexer-url: http://optimism-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://optimism-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1

  - &bnbsmartchain
    assetName: bnbsmartchain
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/bnbsmartchain/pulumi
    rpc-url: http://bnbsmartchain-svc.unchained.svc.cluster.local:8545
    indexer-url: http://bnbsmartchain-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://bnbsmartchain-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: shapeshiftdao/bnb-smart-chain:v1.2.5
    service-cpu-limit-1: "16"
    service-cpu-request-1: "8"
    service-memory-limit-1: 72Gi
    service-memory-request-1: 48Gi
    service-storage-size-1: 4000Gi
    service-name-2: indexer
    service-image-2: shapeshiftdao/unchained-blockbook:fdc2b86
    service-cpu-limit-2: "4"
    service-cpu-request-2: "2"
    service-memory-limit-2: 24Gi
    service-storage-size-2: 750Gi

  - &bnbsmartchain-dev
    <<: *bnbsmartchain
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://bnbsmartchain-svc.unchained-dev.svc.cluster.local:8545
    indexer-url: http://bnbsmartchain-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://bnbsmartchain-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1
    stateful-service-backup: true
    stateful-service-backup-schedule: "0 4 * * 3,6"
    stateful-service-backup-count: 2

  - &polygon
    assetName: polygon
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/polygon/pulumi
    rpc-url: http://polygon-svc.unchained.svc.cluster.local:8545
    indexer-url: http://polygon-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://polygon-svc.unchained.svc.cluster.local:8001/websocket
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 500m
    api-cpu-request: 250m
    api-cpu-threshold: 50
    api-memory-limit: 500Mi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: 0xpolygon/bor:0.3.9
    service-cpu-limit-1: "16"
    service-cpu-request-1: "8"
    service-memory-request-1: 32Gi
    service-memory-limit-1: 48Gi
    service-storage-size-1: 4000Gi
    service-name-2: heimdall
    service-image-2: 0xpolygon/heimdall:0.3.4-beta
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 2Gi
    service-storage-size-2: 500Gi
    service-name-3: indexer
    service-image-3: shapeshiftdao/unchained-blockbook:polygon-e655dd8
    service-cpu-limit-3: "4"
    service-cpu-request-3: "2"
    service-memory-limit-3: 24Gi
    service-storage-size-3: 500Gi


  - &polygon-dev
    <<: *polygon
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://polygon-svc.unchained-dev.svc.cluster.local:8545
    indexer-url: http://polygon-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://polygon-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-cpu-limit: 300m
    api-memory-limit: 250Mi
    stateful-service-replicas: 1
    stateful-service-backup: true
    stateful-service-backup-schedule: "0 4 * * 3,6"
    stateful-service-backup-count: 2


  - &gnosis
    assetName: gnosis
    pulumi-stack: public-us-east-2
    pulumi-dir: coinstacks/gnosis/pulumi
    rpc-url: http://gnosis-svc.unchained.svc.cluster.local:8545
    indexer-url: http://gnosis-svc.unchained.svc.cluster.local:8001
    indexer-ws-url: ws://gnosis-svc.unchained.svc.cluster.local:8001/websocket
    api: true
    api-autoscaling: true
    api-replicas: 2
    api-max-replicas: 6
    api-cpu-limit: 1000m
    api-cpu-request: 500m
    api-cpu-threshold: 50
    api-memory-limit: 2Gi
    stateful-service-replicas: 2
    service-name-1: daemon
    service-image-1: nethermind/nethermind:1.19.2
    service-cpu-limit-1: "2"
    service-cpu-request-1: "1"
    service-memory-limit-1: 16Gi
    service-storage-size-1: 1000Gi
    service-name-2: daemon-beacon
    service-image-2: sigp/lighthouse:v4.2.0
    service-cpu-limit-2: "2"
    service-cpu-request-2: "1"
    service-memory-limit-2: 4Gi
    service-storage-size-2: 500Gi
    service-name-3: indexer
    service-image-3: shapeshiftdao/unchained-blockbook:gnosis-9c25fc0
    service-cpu-limit-3: "2"
    service-cpu-request-3: "1"
    service-memory-limit-3: 24Gi
    service-storage-size-3: 500Gi


  - &gnosis-dev
    <<: *gnosis
    environment: dev
    pulumi-stack: public-dev-us-east-2
    rpc-url: http://gnosis-svc.unchained-dev.svc.cluster.local:8545
    indexer-url: http://gnosis-svc.unchained-dev.svc.cluster.local:8001
    indexer-ws-url: ws://gnosis-svc.unchained-dev.svc.cluster.local:8001/websocket
    api-replicas: 1
    api-max-replicas: 2
    api-memory-limit: 2Gi
    stateful-service-replicas: 1
    stateful-service-backup: true
    stateful-service-backup-schedule: "0 4 * * 3"
    stateful-service-backup-count: 1

commands:
  precheck:
    description: install dependencies
    steps:
      - run:
          command: yarn install --immutable
      - run:
          command: yarn build
      - run:
          command: yarn lint
      - run:
          command: yarn test
      - run:
          working_directory: go
          command: go get ./...
      - run:
          working_directory: go
          command: make
      - run:
         working_directory: go
         command: golangci-lint run --version --verbose 

  postcheck:
    description: perform postcheck operations
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e5:8a:56:6c:d5:ed:72:93:97:0b:65:8c:6a:f3:ca:98"
      - run:
          name: update openapi spec
          command: |
            for file in $(git diff --name-only); do [[ $file == *"swagger.json" ]] && git add $file; done
            if [[ $(git diff --staged --name-only) ]]; then git commit -m "chore: update openapi spec [skip ci]"; git push origin $(git branch --show-current); fi

  generic-dependencies:
    description: setup misc tooling
    parameters:
      organization:
        type: string
    steps:
      - run:
          name: add environment variables
          command: |
            echo 'export ADDITIONAL_ROOT_DOMAIN_NAME=$<< parameters.organization >>_ADDITIONAL_ROOT_DOMAIN_NAME' >> $BASH_ENV
            echo 'export PULUMI_ACCESS_TOKEN=$<< parameters.organization >>_PULUMI_ACCESS_TOKEN' >> $BASH_ENV
            echo 'export IPFS_CLUSTER_SECRET=$IPFS_CLUSTER_SECRET' >> $BASH_ENV
            echo 'export IPFS_CLUSTER_PRIV_KEY=$IPFS_CLUSTER_PRIV_KEY' >> $BASH_ENV
      - run:
          name: install tools
          command: |
            apt update
            apt install wget unzip -y
      - run:
          name: install aws-cli
          command: |
            wget -O awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: install docker cli
          command: |
            wget -O dockercli.deb https://download.docker.com/linux/debian/dists/buster/pool/stable/amd64/docker-ce-cli_20.10.22~3-0~debian-buster_amd64.deb
            dpkg -i dockercli.deb
      - run:
          name: install kubectl
          command: |
            wget -O kubectl "https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: create aws credentials file
          command: |
            mkdir ~/.aws
            echo [default] > ~/.aws/credentials
            echo aws_access_key_id = $<< parameters.organization >>_AWS_ACCESS_KEY_ID >> ~/.aws/credentials
            echo aws_secret_access_key = $<< parameters.organization >>_AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials
    
  kube-prometheus-dependencies:
    description: setup kube-prometheus
    parameters:
      organization:
        type: string
    steps:
      - generic-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: Setup Jsonnet
          working_directory: monitoring/my-kube-prometheus
          command: |
            go install github.com/google/go-jsonnet/cmd/jsonnet@latest
            go install github.com/brancz/gojsontoyaml@latest
            go install -a github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest
            jb install
      - run:
          name: update kubeconfig
          command: aws eks update-kubeconfig --region $AWS_REGION --name $UNCHAINED_EKS_CLUSTER
        
  pulumi-dependencies:
    description: set up pulumi dependencies
    parameters:
      organization:
        type: string
    steps:
      - generic-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: install helm charts
          command: |
            wget -O helm.tar.gz https://get.helm.sh/helm-v3.11.0-linux-amd64.tar.gz
            tar -zxvf helm.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
            helm repo add autoscaler https://kubernetes.github.io/autoscaler
            helm repo add bitnami https://charts.bitnami.com/bitnami
            helm repo add eks https://aws.github.io/eks-charts
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo add traefik https://helm.traefik.io/traefik
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
            helm repo add piraeus-charts https://piraeus.io/helm-charts/
            helm repo update
      - run:
          name: install pulumi plugin resources
          command: |
            pulumi plugin install resource aws 5.29.1
            pulumi plugin install resource kubernetes 3.23.1
            pulumi plugin install resource eks 1.0.1

jobs:
  deploy-dependencies:
    description: deploy all common unchained dependencies
    executor: pulumi
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      organization:
        type: string
      pulumi-command:
        type: string
        default: preview
    steps:
      - setup_remote_docker:
          version: 20.10.18
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: pulumi
          working_directory: pulumi/src/cluster
          command: |
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/dependencies-us-east-2
            pulumi config set --path unchained:common.cluster eks
            pulumi config set --path unchained:common.additionalEnvironments[0] dev
            pulumi config set --path unchained:common.additionalEnvironments[1] monitoring
            pulumi config set --path unchained:common.eks.allAZs true
            pulumi config set --path unchained:common.eks.autoscaling true
            pulumi config set --path unchained:common.eks.region $AWS_REGION
            pulumi config set --path unchained:common.eks.cidrBlock 10.0.0.0/16
            pulumi config set --path unchained:common.eks.nodeGroups[0].name spot
            pulumi config set --path unchained:common.eks.nodeGroups[0].type SPOT
            pulumi config set --path unchained:common.eks.nodeGroups[0].desired 6
            pulumi config set --path unchained:common.eks.nodeGroups[0].minSize 6
            pulumi config set --path unchained:common.eks.nodeGroups[0].maxSize 8
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[0] r6in.4xlarge
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[1] r6idn.4xlarge
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[2] r6a.4xlarge
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[3] r6i.4xlarge
            pulumi config set --path unchained:common.eks.nodeGroups[0].instanceTypes[4] r6id.4xlarge
            pulumi config set --path unchained:common.eks.traefik.autoscaling.enabled true
            pulumi config set --path unchained:common.eks.traefik.autoscaling.memoryThreshold 50
            pulumi config set --path unchained:common.eks.traefik.autoscaling.cpuThreshold 80
            pulumi config set --path unchained:common.eks.traefik.autoscaling.maxReplicas 20
            pulumi config set --path unchained:common.eks.traefik.autoscaling.minReplicas 5
            pulumi config set --path unchained:common.eks.traefik.replicas 5
            pulumi config set --path unchained:common.eks.traefik.resources.cpu 300m
            pulumi config set --path unchained:common.eks.traefik.resources.memory 512Mi
            pulumi config set --path unchained:common.eks.traefik.whitelist[0] 173.245.48.0/20
            pulumi config set --path unchained:common.eks.traefik.whitelist[1] 103.21.244.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[2] 103.22.200.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[3] 103.31.4.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[4] 141.101.64.0/18
            pulumi config set --path unchained:common.eks.traefik.whitelist[5] 108.162.192.0/18
            pulumi config set --path unchained:common.eks.traefik.whitelist[6] 190.93.240.0/20
            pulumi config set --path unchained:common.eks.traefik.whitelist[7] 188.114.96.0/20
            pulumi config set --path unchained:common.eks.traefik.whitelist[8] 197.234.240.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[9] 198.41.128.0/17
            pulumi config set --path unchained:common.eks.traefik.whitelist[10] 162.158.0.0/15
            pulumi config set --path unchained:common.eks.traefik.whitelist[11] 104.16.0.0/13
            pulumi config set --path unchained:common.eks.traefik.whitelist[12] 104.24.0.0/14
            pulumi config set --path unchained:common.eks.traefik.whitelist[13] 172.64.0.0/13
            pulumi config set --path unchained:common.eks.traefik.whitelist[14] 131.0.72.0/22
            pulumi config set --path unchained:common.eks.traefik.whitelist[15] $AWS_TAXISTAKE_NAT_ADDRESS_0
            pulumi config set --path unchained:common.eks.traefik.whitelist[16] $AWS_TAXISTAKE_NAT_ADDRESS_1
            pulumi config set --path unchained:common.eks.traefik.whitelist[17] $AWS_TAXISTAKE_NAT_ADDRESS_2
            pulumi config set --path unchained:common.eks.volumeSize 100
            pulumi config set --path unchained:common.dockerhub.username $DOCKERHUB_USERNAME
            pulumi config set --path unchained:common.dockerhub.password $DOCKERHUB_PASSWORD --plaintext
            pulumi config set --path unchained:common.dockerhub.server docker.io
            pulumi config set --path unchained:common.rootDomainName $<< parameters.organization >>_ROOT_DOMAIN_NAME
            pulumi <<parameters.pulumi-command>> --suppress-outputs

  deploy-coinstack-node:
    description: deploy a specific node coinstack
    executor: pulumi
    environment:
      DOCKER_BUILDKIT: 1
      LOG_LEVEL: debug
    parameters:
      <<: *params
      indexer-url:
        type: string
      indexer-ws-url:
        type: string
      rpc-url:
        type: string
      etherscan-env-var:
        type: string
        default: ETHERSCAN_API_KEY
    steps:
      - setup_remote_docker:
          version: 20.10.18
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: add custom environment variables
          command: |
            echo 'export INDEXER_URL=<< parameters.indexer-url >>' >> $BASH_ENV
            echo 'export INDEXER_WS_URL=<< parameters.indexer-ws-url >>' >> $BASH_ENV
            echo 'export NETWORK=<< parameters.network >>' >> $BASH_ENV
            echo 'export RPC_URL=<< parameters.rpc-url >>' >> $BASH_ENV
            echo 'export ETHERSCAN_API_KEY=$<< parameters.etherscan-env-var >>' >> $BASH_ENV
      - run:
          name: pulumi
          working_directory: node/<< parameters.pulumi-dir >>
          command: |
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/<< parameters.pulumi-stack >>
            pulumi config set --path unchained:coinstack.assetName << parameters.assetName >>
            pulumi config set --path unchained:coinstack.stack $<< parameters.organization >>_PULUMI_ORG/common/dependencies-us-east-2
            [ -n "<< parameters.environment >>" ] && pulumi config set --path unchained:coinstack.environment << parameters.environment >>
            pulumi config set --path unchained:coinstack.network << parameters.network >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.enabled << parameters.api-autoscaling >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.cpuThreshold << parameters.api-cpu-threshold >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.maxReplicas << parameters.api-max-replicas >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.cpuLimit << parameters.api-cpu-limit >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.cpuRequest << parameters.api-cpu-request >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.memoryLimit << parameters.api-memory-limit >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.replicas << parameters.api-replicas >>
            [ "<< parameters.stateful-service-backup >>" = true ] && pulumi config set --path unchained:coinstack.statefulService.backup.count << parameters.stateful-service-backup-count >>
            [ "<< parameters.stateful-service-backup >>" = true ] && pulumi config set --path unchained:coinstack.statefulService.backup.schedule "<< parameters.stateful-service-backup-schedule >>"
            [ << parameters.stateful-service-replicas >> -gt 0 ] && pulumi config set --path unchained:coinstack.statefulService.replicas << parameters.stateful-service-replicas >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].name << parameters.service-name-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].image << parameters.service-image-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].cpuLimit << parameters.service-cpu-limit-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].cpuRequest << parameters.service-cpu-request-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].memoryLimit << parameters.service-memory-limit-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-request-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].memoryRequest << parameters.service-memory-request-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].storageSize << parameters.service-storage-size-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].name << parameters.service-name-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].image << parameters.service-image-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].cpuLimit << parameters.service-cpu-limit-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].cpuRequest << parameters.service-cpu-request-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].memoryLimit << parameters.service-memory-limit-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-request-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].memoryRequest << parameters.service-memory-request-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].storageSize << parameters.service-storage-size-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].name << parameters.service-name-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].image << parameters.service-image-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].cpuLimit << parameters.service-cpu-limit-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].cpuRequest << parameters.service-cpu-request-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].memoryLimit << parameters.service-memory-limit-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-request-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].memoryRequest << parameters.service-memory-request-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].storageSize << parameters.service-storage-size-3 >>
            pulumi << parameters.pulumi-command >> --suppress-outputs

  deploy-coinstack-go:
    description: deploy a specific go coinstack
    executor: pulumi
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      <<: *params
      lcd-url:
        type: string
      grpc-url:
        type: string
        default: ""
      rpc-url:
        type: string
      ws-url:
        type: string
    steps:
      - setup_remote_docker:
          version: 20.10.18
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: add custom environment variables
          command: |
            echo 'export LCD_URL=<< parameters.lcd-url >>' >> $BASH_ENV
            echo 'export GRPC_URL=<< parameters.grpc-url >>' >> $BASH_ENV
            echo 'export RPC_URL=<< parameters.rpc-url >>' >> $BASH_ENV
            echo 'export WS_URL=<< parameters.ws-url >>' >> $BASH_ENV
      - run:
          name: pulumi
          working_directory: go/<< parameters.pulumi-dir >>
          command: |
            yarn install --immutable
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/<< parameters.pulumi-stack >>
            pulumi config set --path unchained:coinstack.assetName << parameters.assetName >>
            pulumi config set --path unchained:coinstack.stack $<< parameters.organization >>_PULUMI_ORG/common/dependencies-us-east-2
            [ -n "<< parameters.environment >>" ] && pulumi config set --path unchained:coinstack.environment << parameters.environment >>
            pulumi config set --path unchained:coinstack.network << parameters.network >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.enabled << parameters.api-autoscaling >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.cpuThreshold << parameters.api-cpu-threshold >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.autoscaling.maxReplicas << parameters.api-max-replicas >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.cpuLimit << parameters.api-cpu-limit >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.cpuRequest << parameters.api-cpu-request >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.memoryLimit << parameters.api-memory-limit >>
            [ "<< parameters.api >>" = true ] && pulumi config set --path unchained:coinstack.api.replicas << parameters.api-replicas >>
            [ "<< parameters.stateful-service-backup >>" = true ] && pulumi config set --path unchained:coinstack.statefulService.backup.count << parameters.stateful-service-backup-count >>
            [ "<< parameters.stateful-service-backup >>" = true ] && pulumi config set --path unchained:coinstack.statefulService.backup.schedule "<< parameters.stateful-service-backup-schedule >>"
            [ << parameters.stateful-service-replicas >> -gt 0 ] && pulumi config set --path unchained:coinstack.statefulService.replicas << parameters.stateful-service-replicas >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].name << parameters.service-name-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].image << parameters.service-image-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].cpuLimit << parameters.service-cpu-limit-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].cpuRequest << parameters.service-cpu-request-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].memoryLimit << parameters.service-memory-limit-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-request-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].memoryRequest << parameters.service-memory-request-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-1 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[0].storageSize << parameters.service-storage-size-1 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].name << parameters.service-name-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].image << parameters.service-image-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].cpuLimit << parameters.service-cpu-limit-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].cpuRequest << parameters.service-cpu-request-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].memoryLimit << parameters.service-memory-limit-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-request-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].memoryRequest << parameters.service-memory-request-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-2 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[1].storageSize << parameters.service-storage-size-2 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-name-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].name << parameters.service-name-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-image-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].image << parameters.service-image-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-limit-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].cpuLimit << parameters.service-cpu-limit-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-cpu-request-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].cpuRequest << parameters.service-cpu-request-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-limit-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].memoryLimit << parameters.service-memory-limit-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-memory-request-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].memoryRequest << parameters.service-memory-request-3 >>
            [ << parameters.stateful-service-replicas >> -gt 0 ] && [ -n "<< parameters.service-storage-size-3 >>" ] && pulumi config set --path unchained:coinstack.statefulService.services[2].storageSize << parameters.service-storage-size-3 >>
            pulumi << parameters.pulumi-command >> --suppress-outputs

  deploy-monitoring-pulumi:
    description: deploy unchained monitoring stack
    executor: pulumi
    parameters:
      organization:
        type: string
      pulumi-command:
        type: string
        default: preview
    steps:
      - setup_remote_docker:
          version: 20.10.18
      - attach_workspace:
          at: ~/
      - pulumi-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: pulumi
          working_directory: monitoring/src
          command: |
            pulumi stack select $<< parameters.organization >>_PULUMI_ORG/prod-us-east-2
            pulumi config set --path unchained:monitoring.stack $<< parameters.organization >>_PULUMI_ORG/common/dependencies-us-east-2
            pulumi config set --path unchained:monitoring.environment monitoring
            pulumi <<parameters.pulumi-command>> --suppress-outputs

  preview-kube-prometheus:
    description: preview kube-prometheus monitoring stack
    executor: golang
    parameters:
      organization:
        type: string
    steps:
      - setup_remote_docker:
          version: 20.10.18
      - attach_workspace:
          at: ~/
      - checkout
      - kube-prometheus-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: setup kube-prometheus
          working_directory: monitoring/my-kube-prometheus
          command: |
            ./build.sh unchained-kube-promstack.jsonnet
      - run:
          name: diff CRD
          working_directory: monitoring/my-kube-prometheus
          command: |
            echo "CRD Changes: "
            kubectl diff -f manifests/setup/ || true #For some reason this returns -1 in CI, no idea works locally
      - run:
          name: diff Kube prometheus
          working_directory: monitoring/my-kube-prometheus
          command: |
            echo "Kube prometheus changes: "
            kubectl diff -f manifests/ || true #For some reason this returns -1 in CI, no idea works locally


  deploy-kube-prometheus:
    description: deploy unchained monitoring stack
    executor: golang
    parameters:
      organization:
        type: string
    steps:
      - setup_remote_docker:
          version: 20.10.18
      - attach_workspace:
          at: ~/
      - checkout
      - kube-prometheus-dependencies:
          organization: <<parameters.organization>>
      - run:
          name: setup kube-prometheus
          working_directory: monitoring/my-kube-prometheus
          command: |
            ./build.sh unchained-kube-promstack.jsonnet
      - run:
          name: deploy CRD
          working_directory: monitoring/my-kube-prometheus
          command: kubectl apply --server-side -f manifests/setup
      - run:
          name: deploy Kube prometheus
          working_directory: monitoring/my-kube-prometheus
          command: kubectl apply --server-side -f manifests/

  lint-and-test:
    description: lint and test project
    machine:
      image: ubuntu-2204:2022.10.2
    resource_class: large
    steps:
      - checkout
      - precheck

  lint-and-test-persist:
    description: lint and test project (persist to workspace)
    machine:
      image: ubuntu-2204:2022.10.2
    resource_class: large
    steps:
      - checkout
      - precheck
      - postcheck
      - run:
          name: Remove devDependencies
          command: yarn --production --ignore-scripts --prefer-offline --silent --frozen-lockfile
      - persist_to_workspace:
          root: "~"
          paths:
            - project

workflows:
  version: 2

  check:
    jobs:
      - lint-and-test:
          name: lint and test project
          <<: *only-feature

  deploy-development:
    jobs:
      - lint-and-test-persist:
          name: lint and test project (persist to workspace)
          <<: *only-develop

      - deploy-dependencies:
          name: deploy dependencies
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - lint and test project (persist to workspace)
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy bitcoin develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *bitcoin-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy dogecoin develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *dogecoin-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy litecoin develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *litecoin-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy bitcoincash develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *bitcoincash-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy ethereum develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *ethereum-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy avalanche develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *avalanche-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy optimism develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          etherscan-env-var: ETHERSCAN_API_KEY_OPTIMISM
          requires:
            - deploy dependencies
          <<: *optimism-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy bnbsmartchain develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          etherscan-env-var: ETHERSCAN_API_KEY_BSC
          requires:
            - deploy dependencies
          <<: *bnbsmartchain-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy polygon develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          etherscan-env-var: ETHERSCAN_API_KEY_POLYGON
          requires:
            - deploy dependencies
          <<: *polygon-dev
          <<: *only-develop

      - deploy-coinstack-node:
          name: deploy gnosis develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          etherscan-env-var: ETHERSCAN_API_KEY_GNOSIS
          requires:
            - deploy dependencies
          <<: *gnosis-dev
          <<: *only-develop

      - deploy-coinstack-go:
          name: deploy cosmos develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *cosmos-dev
          <<: *only-develop

      - deploy-coinstack-go:
          name: deploy osmosis develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *osmosis-dev
          <<: *only-develop

      - deploy-coinstack-go:
          name: deploy thorchain develop
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - deploy dependencies
          <<: *thorchain-dev
          <<: *only-develop

  deploy-monitoring:
    jobs:
      - approve-monitoring-workflow:
          name: approve monitoring workflow
          type: approval
          <<: *only-develop

      - lint-and-test-persist:
          name: lint and test project (persist to workplace)
          requires:
            - approve monitoring workflow
          <<: *only-develop

      - preview-kube-prometheus:
          name: preview monitoring kube-prometheus
          organization: TAXISTAKE
          requires:
            - lint and test project (persist to workplace)
          <<: *only-develop

      - deploy-monitoring-pulumi:
          name: preview monitoring pulumi
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - lint and test project (persist to workplace)
          <<: *only-develop

      - approve-monitoring:
          name: approve
          type: approval
          requires:
            - preview monitoring kube-prometheus
            - preview monitoring pulumi
          <<: *only-develop

      - deploy-kube-prometheus:
          name: deploy monitoring kube-prometheus
          organization: TAXISTAKE
          requires:
            - approve
          <<: *only-develop

      - deploy-monitoring-pulumi:
          name: deploy monitoring pulumi
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve
          <<: *only-develop

  deploy-main:
    jobs:
      - lint-and-test-persist:
          name: lint and test project (persist to workspace)
          <<: *only-main

      - deploy-dependencies:
          name: validate dependencies
          organization: TAXISTAKE
          pulumi-command: preview --expect-no-changes
          requires:
            - lint and test project (persist to workspace)
          <<: *only-main

      ####### BITCOIN
      - deploy-coinstack-node:
          name: preview bitcoin
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *bitcoin
          <<: *only-main

      - approve-coinstack:
          name: approve bitcoin coinstack
          type: approval
          requires:
            - preview bitcoin
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy bitcoin
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve bitcoin coinstack
          <<: *bitcoin
          <<: *only-main

      ####### BITCOINCASH
      - deploy-coinstack-node:
          name: preview bitcoincash
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *bitcoincash
          <<: *only-main

      - approve-coinstack:
          name: approve bitcoincash coinstack
          type: approval
          requires:
            - preview bitcoincash
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy bitcoincash
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve bitcoincash coinstack
          <<: *bitcoincash
          <<: *only-main

      ####### DOGECOIN
      - deploy-coinstack-node:
          name: preview dogecoin
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *dogecoin
          <<: *only-main

      - approve-coinstack:
          name: approve dogecoin coinstack
          type: approval
          requires:
            - preview dogecoin
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy dogecoin
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve dogecoin coinstack
          <<: *dogecoin
          <<: *only-main

      ####### LITECOIN
      - deploy-coinstack-node:
          name: preview litecoin
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *litecoin
          <<: *only-main

      - approve-coinstack:
          name: approve litecoin coinstack
          type: approval
          requires:
            - preview litecoin
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy litecoin
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve litecoin coinstack
          <<: *litecoin
          <<: *only-main

      ####### ETHEREUM
      - deploy-coinstack-node:
          name: preview ethereum
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *ethereum
          <<: *only-main

      - approve-coinstack:
          name: approve ethereum coinstack
          type: approval
          requires:
            - preview ethereum
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy ethereum
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve ethereum coinstack
          <<: *ethereum
          <<: *only-main

      ####### AVALANCHE
      - deploy-coinstack-node:
          name: preview avalanche
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *avalanche
          <<: *only-main

      - approve-coinstack:
          name: approve avalanche coinstack
          type: approval
          requires:
            - preview avalanche
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy avalanche
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve avalanche coinstack
          <<: *avalanche
          <<: *only-main

      ####### OPTIMISM
      - deploy-coinstack-node:
          name: preview optimism
          organization: TAXISTAKE
          pulumi-command: preview
          etherscan-env-var: ETHERSCAN_API_KEY_OPTIMISM
          requires:
            - validate dependencies
          <<: *optimism
          <<: *only-main

      - approve-coinstack:
          name: approve optimism coinstack
          type: approval
          requires:
            - preview optimism
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy optimism
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          etherscan-env-var: ETHERSCAN_API_KEY_OPTIMISM
          requires:
            - approve optimism coinstack
          <<: *optimism
          <<: *only-main

      ####### BNB SMART CHAIN
      - deploy-coinstack-node:
          name: preview bnbsmartchain
          organization: TAXISTAKE
          pulumi-command: preview
          etherscan-env-var: ETHERSCAN_API_KEY_BSC
          requires:
            - validate dependencies
          <<: *bnbsmartchain
          <<: *only-main

      - approve-coinstack:
          name: approve bnbsmartchain coinstack
          type: approval
          requires:
            - preview bnbsmartchain
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy bnbsmartchain
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          etherscan-env-var: ETHERSCAN_API_KEY_BSC
          requires:
            - approve bnbsmartchain coinstack
          <<: *bnbsmartchain
          <<: *only-main

      ####### POLYGON
      - deploy-coinstack-node:
          name: preview polygon
          organization: TAXISTAKE
          pulumi-command: preview
          etherscan-env-var: ETHERSCAN_API_KEY_POLYGON
          requires:
            - validate dependencies
          <<: *polygon
          <<: *only-main

      - approve-coinstack:
          name: approve polygon coinstack
          type: approval
          requires:
            - preview polygon
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy polygon
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          etherscan-env-var: ETHERSCAN_API_KEY_POLYGON
          requires:
            - approve polygon coinstack
          <<: *polygon
          <<: *only-main

      ####### GNOSIS
      - deploy-coinstack-node:
          name: preview gnosis
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *gnosis
          <<: *only-main

      - approve-coinstack:
          name: approve gnosis coinstack
          type: approval
          requires:
            - preview gnosis
          <<: *only-main

      - deploy-coinstack-node:
          name: deploy gnosis
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve gnosis coinstack
          <<: *gnosis
          <<: *only-main

      ####### COSMOS
      - deploy-coinstack-go:
          name: preview cosmos
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *cosmos
          <<: *only-main

      - approve-coinstack:
          name: approve cosmos coinstack
          type: approval
          requires:
            - preview cosmos
          <<: *only-main

      - deploy-coinstack-go:
          name: deploy cosmos
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve cosmos coinstack
          <<: *cosmos
          <<: *only-main

      ####### OSMOSIS
      - deploy-coinstack-go:
          name: preview osmosis
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *osmosis
          <<: *only-main

      - approve-coinstack:
          name: approve osmosis coinstack
          type: approval
          requires:
            - preview osmosis
          <<: *only-main

      - deploy-coinstack-go:
          name: deploy osmosis
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve osmosis coinstack
          <<: *osmosis
          <<: *only-main

      ####### THORCHAIN
      - deploy-coinstack-go:
          name: preview thorchain
          organization: TAXISTAKE
          pulumi-command: preview
          requires:
            - validate dependencies
          <<: *thorchain
          <<: *only-main

      - approve-coinstack:
          name: approve thorchain coinstack
          type: approval
          requires:
            - preview thorchain
          <<: *only-main

      - deploy-coinstack-go:
          name: deploy thorchain
          organization: TAXISTAKE
          pulumi-command: up -f --yes
          requires:
            - approve thorchain coinstack
          <<: *thorchain
          <<: *only-main
