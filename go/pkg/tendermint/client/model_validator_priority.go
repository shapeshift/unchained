/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ValidatorPriority struct for ValidatorPriority
type ValidatorPriority struct {
	Address *string `json:"address,omitempty"`
	PubKey *BlockResultsResponseResultPubKey `json:"pub_key,omitempty"`
	VotingPower *string `json:"voting_power,omitempty"`
	ProposerPriority *string `json:"proposer_priority,omitempty"`
}

// NewValidatorPriority instantiates a new ValidatorPriority object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidatorPriority() *ValidatorPriority {
	this := ValidatorPriority{}
	return &this
}

// NewValidatorPriorityWithDefaults instantiates a new ValidatorPriority object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatorPriorityWithDefaults() *ValidatorPriority {
	this := ValidatorPriority{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ValidatorPriority) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatorPriority) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ValidatorPriority) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ValidatorPriority) SetAddress(v string) {
	o.Address = &v
}

// GetPubKey returns the PubKey field value if set, zero value otherwise.
func (o *ValidatorPriority) GetPubKey() BlockResultsResponseResultPubKey {
	if o == nil || o.PubKey == nil {
		var ret BlockResultsResponseResultPubKey
		return ret
	}
	return *o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatorPriority) GetPubKeyOk() (*BlockResultsResponseResultPubKey, bool) {
	if o == nil || o.PubKey == nil {
		return nil, false
	}
	return o.PubKey, true
}

// HasPubKey returns a boolean if a field has been set.
func (o *ValidatorPriority) HasPubKey() bool {
	if o != nil && o.PubKey != nil {
		return true
	}

	return false
}

// SetPubKey gets a reference to the given BlockResultsResponseResultPubKey and assigns it to the PubKey field.
func (o *ValidatorPriority) SetPubKey(v BlockResultsResponseResultPubKey) {
	o.PubKey = &v
}

// GetVotingPower returns the VotingPower field value if set, zero value otherwise.
func (o *ValidatorPriority) GetVotingPower() string {
	if o == nil || o.VotingPower == nil {
		var ret string
		return ret
	}
	return *o.VotingPower
}

// GetVotingPowerOk returns a tuple with the VotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatorPriority) GetVotingPowerOk() (*string, bool) {
	if o == nil || o.VotingPower == nil {
		return nil, false
	}
	return o.VotingPower, true
}

// HasVotingPower returns a boolean if a field has been set.
func (o *ValidatorPriority) HasVotingPower() bool {
	if o != nil && o.VotingPower != nil {
		return true
	}

	return false
}

// SetVotingPower gets a reference to the given string and assigns it to the VotingPower field.
func (o *ValidatorPriority) SetVotingPower(v string) {
	o.VotingPower = &v
}

// GetProposerPriority returns the ProposerPriority field value if set, zero value otherwise.
func (o *ValidatorPriority) GetProposerPriority() string {
	if o == nil || o.ProposerPriority == nil {
		var ret string
		return ret
	}
	return *o.ProposerPriority
}

// GetProposerPriorityOk returns a tuple with the ProposerPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidatorPriority) GetProposerPriorityOk() (*string, bool) {
	if o == nil || o.ProposerPriority == nil {
		return nil, false
	}
	return o.ProposerPriority, true
}

// HasProposerPriority returns a boolean if a field has been set.
func (o *ValidatorPriority) HasProposerPriority() bool {
	if o != nil && o.ProposerPriority != nil {
		return true
	}

	return false
}

// SetProposerPriority gets a reference to the given string and assigns it to the ProposerPriority field.
func (o *ValidatorPriority) SetProposerPriority(v string) {
	o.ProposerPriority = &v
}

func (o ValidatorPriority) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.PubKey != nil {
		toSerialize["pub_key"] = o.PubKey
	}
	if o.VotingPower != nil {
		toSerialize["voting_power"] = o.VotingPower
	}
	if o.ProposerPriority != nil {
		toSerialize["proposer_priority"] = o.ProposerPriority
	}
	return json.Marshal(toSerialize)
}

type NullableValidatorPriority struct {
	value *ValidatorPriority
	isSet bool
}

func (v NullableValidatorPriority) Get() *ValidatorPriority {
	return v.value
}

func (v *NullableValidatorPriority) Set(val *ValidatorPriority) {
	v.value = val
	v.isSet = true
}

func (v NullableValidatorPriority) IsSet() bool {
	return v.isSet
}

func (v *NullableValidatorPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidatorPriority(val *ValidatorPriority) *NullableValidatorPriority {
	return &NullableValidatorPriority{value: val, isSet: true}
}

func (v NullableValidatorPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidatorPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


