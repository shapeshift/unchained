/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// GenesisResponseResultGenesis struct for GenesisResponseResultGenesis
type GenesisResponseResultGenesis struct {
	GenesisTime string `json:"genesis_time"`
	ChainId string `json:"chain_id"`
	InitialHeight string `json:"initial_height"`
	ConsensusParams NullableConsensusParams `json:"consensus_params"`
	Validators []GenesisResponseResultGenesisValidators `json:"validators"`
	AppHash string `json:"app_hash"`
	AppState *map[string]interface{} `json:"app_state,omitempty"`
}

// NewGenesisResponseResultGenesis instantiates a new GenesisResponseResultGenesis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenesisResponseResultGenesis(genesisTime string, chainId string, initialHeight string, consensusParams NullableConsensusParams, validators []GenesisResponseResultGenesisValidators, appHash string) *GenesisResponseResultGenesis {
	this := GenesisResponseResultGenesis{}
	this.GenesisTime = genesisTime
	this.ChainId = chainId
	this.InitialHeight = initialHeight
	this.ConsensusParams = consensusParams
	this.Validators = validators
	this.AppHash = appHash
	return &this
}

// NewGenesisResponseResultGenesisWithDefaults instantiates a new GenesisResponseResultGenesis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenesisResponseResultGenesisWithDefaults() *GenesisResponseResultGenesis {
	this := GenesisResponseResultGenesis{}
	return &this
}

// GetGenesisTime returns the GenesisTime field value
func (o *GenesisResponseResultGenesis) GetGenesisTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GenesisTime
}

// GetGenesisTimeOk returns a tuple with the GenesisTime field value
// and a boolean to check if the value has been set.
func (o *GenesisResponseResultGenesis) GetGenesisTimeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GenesisTime, true
}

// SetGenesisTime sets field value
func (o *GenesisResponseResultGenesis) SetGenesisTime(v string) {
	o.GenesisTime = v
}

// GetChainId returns the ChainId field value
func (o *GenesisResponseResultGenesis) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *GenesisResponseResultGenesis) GetChainIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *GenesisResponseResultGenesis) SetChainId(v string) {
	o.ChainId = v
}

// GetInitialHeight returns the InitialHeight field value
func (o *GenesisResponseResultGenesis) GetInitialHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InitialHeight
}

// GetInitialHeightOk returns a tuple with the InitialHeight field value
// and a boolean to check if the value has been set.
func (o *GenesisResponseResultGenesis) GetInitialHeightOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InitialHeight, true
}

// SetInitialHeight sets field value
func (o *GenesisResponseResultGenesis) SetInitialHeight(v string) {
	o.InitialHeight = v
}

// GetConsensusParams returns the ConsensusParams field value
// If the value is explicit nil, the zero value for ConsensusParams will be returned
func (o *GenesisResponseResultGenesis) GetConsensusParams() ConsensusParams {
	if o == nil || o.ConsensusParams.Get() == nil {
		var ret ConsensusParams
		return ret
	}

	return *o.ConsensusParams.Get()
}

// GetConsensusParamsOk returns a tuple with the ConsensusParams field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenesisResponseResultGenesis) GetConsensusParamsOk() (*ConsensusParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsensusParams.Get(), o.ConsensusParams.IsSet()
}

// SetConsensusParams sets field value
func (o *GenesisResponseResultGenesis) SetConsensusParams(v ConsensusParams) {
	o.ConsensusParams.Set(&v)
}

// GetValidators returns the Validators field value
func (o *GenesisResponseResultGenesis) GetValidators() []GenesisResponseResultGenesisValidators {
	if o == nil {
		var ret []GenesisResponseResultGenesisValidators
		return ret
	}

	return o.Validators
}

// GetValidatorsOk returns a tuple with the Validators field value
// and a boolean to check if the value has been set.
func (o *GenesisResponseResultGenesis) GetValidatorsOk() (*[]GenesisResponseResultGenesisValidators, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Validators, true
}

// SetValidators sets field value
func (o *GenesisResponseResultGenesis) SetValidators(v []GenesisResponseResultGenesisValidators) {
	o.Validators = v
}

// GetAppHash returns the AppHash field value
func (o *GenesisResponseResultGenesis) GetAppHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppHash
}

// GetAppHashOk returns a tuple with the AppHash field value
// and a boolean to check if the value has been set.
func (o *GenesisResponseResultGenesis) GetAppHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AppHash, true
}

// SetAppHash sets field value
func (o *GenesisResponseResultGenesis) SetAppHash(v string) {
	o.AppHash = v
}

// GetAppState returns the AppState field value if set, zero value otherwise.
func (o *GenesisResponseResultGenesis) GetAppState() map[string]interface{} {
	if o == nil || o.AppState == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AppState
}

// GetAppStateOk returns a tuple with the AppState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenesisResponseResultGenesis) GetAppStateOk() (*map[string]interface{}, bool) {
	if o == nil || o.AppState == nil {
		return nil, false
	}
	return o.AppState, true
}

// HasAppState returns a boolean if a field has been set.
func (o *GenesisResponseResultGenesis) HasAppState() bool {
	if o != nil && o.AppState != nil {
		return true
	}

	return false
}

// SetAppState gets a reference to the given map[string]interface{} and assigns it to the AppState field.
func (o *GenesisResponseResultGenesis) SetAppState(v map[string]interface{}) {
	o.AppState = &v
}

func (o GenesisResponseResultGenesis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["genesis_time"] = o.GenesisTime
	}
	if true {
		toSerialize["chain_id"] = o.ChainId
	}
	if true {
		toSerialize["initial_height"] = o.InitialHeight
	}
	if true {
		toSerialize["consensus_params"] = o.ConsensusParams.Get()
	}
	if true {
		toSerialize["validators"] = o.Validators
	}
	if true {
		toSerialize["app_hash"] = o.AppHash
	}
	if o.AppState != nil {
		toSerialize["app_state"] = o.AppState
	}
	return json.Marshal(toSerialize)
}

type NullableGenesisResponseResultGenesis struct {
	value *GenesisResponseResultGenesis
	isSet bool
}

func (v NullableGenesisResponseResultGenesis) Get() *GenesisResponseResultGenesis {
	return v.value
}

func (v *NullableGenesisResponseResultGenesis) Set(val *GenesisResponseResultGenesis) {
	v.value = val
	v.isSet = true
}

func (v NullableGenesisResponseResultGenesis) IsSet() bool {
	return v.isSet
}

func (v *NullableGenesisResponseResultGenesis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenesisResponseResultGenesis(val *GenesisResponseResultGenesis) *NullableGenesisResponseResultGenesis {
	return &NullableGenesisResponseResultGenesis{value: val, isSet: true}
}

func (v NullableGenesisResponseResultGenesis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenesisResponseResultGenesis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


