/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Evidence struct for Evidence
type Evidence struct {
	Type *string `json:"type,omitempty"`
	Height *int32 `json:"height,omitempty"`
	Time *int32 `json:"time,omitempty"`
	TotalVotingPower *int32 `json:"total_voting_power,omitempty"`
	Validator *Validator `json:"validator,omitempty"`
}

// NewEvidence instantiates a new Evidence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvidence() *Evidence {
	this := Evidence{}
	return &this
}

// NewEvidenceWithDefaults instantiates a new Evidence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvidenceWithDefaults() *Evidence {
	this := Evidence{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Evidence) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Evidence) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Evidence) SetType(v string) {
	o.Type = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *Evidence) GetHeight() int32 {
	if o == nil || o.Height == nil {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetHeightOk() (*int32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *Evidence) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *Evidence) SetHeight(v int32) {
	o.Height = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Evidence) GetTime() int32 {
	if o == nil || o.Time == nil {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetTimeOk() (*int32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Evidence) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *Evidence) SetTime(v int32) {
	o.Time = &v
}

// GetTotalVotingPower returns the TotalVotingPower field value if set, zero value otherwise.
func (o *Evidence) GetTotalVotingPower() int32 {
	if o == nil || o.TotalVotingPower == nil {
		var ret int32
		return ret
	}
	return *o.TotalVotingPower
}

// GetTotalVotingPowerOk returns a tuple with the TotalVotingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetTotalVotingPowerOk() (*int32, bool) {
	if o == nil || o.TotalVotingPower == nil {
		return nil, false
	}
	return o.TotalVotingPower, true
}

// HasTotalVotingPower returns a boolean if a field has been set.
func (o *Evidence) HasTotalVotingPower() bool {
	if o != nil && o.TotalVotingPower != nil {
		return true
	}

	return false
}

// SetTotalVotingPower gets a reference to the given int32 and assigns it to the TotalVotingPower field.
func (o *Evidence) SetTotalVotingPower(v int32) {
	o.TotalVotingPower = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *Evidence) GetValidator() Validator {
	if o == nil || o.Validator == nil {
		var ret Validator
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetValidatorOk() (*Validator, bool) {
	if o == nil || o.Validator == nil {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *Evidence) HasValidator() bool {
	if o != nil && o.Validator != nil {
		return true
	}

	return false
}

// SetValidator gets a reference to the given Validator and assigns it to the Validator field.
func (o *Evidence) SetValidator(v Validator) {
	o.Validator = &v
}

func (o Evidence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.TotalVotingPower != nil {
		toSerialize["total_voting_power"] = o.TotalVotingPower
	}
	if o.Validator != nil {
		toSerialize["validator"] = o.Validator
	}
	return json.Marshal(toSerialize)
}

type NullableEvidence struct {
	value *Evidence
	isSet bool
}

func (v NullableEvidence) Get() *Evidence {
	return v.value
}

func (v *NullableEvidence) Set(val *Evidence) {
	v.value = val
	v.isSet = true
}

func (v NullableEvidence) IsSet() bool {
	return v.isSet
}

func (v *NullableEvidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvidence(val *Evidence) *NullableEvidence {
	return &NullableEvidence{value: val, isSet: true}
}

func (v NullableEvidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


