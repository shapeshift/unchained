/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Monitor struct for Monitor
type Monitor struct {
	Active *bool `json:"Active,omitempty"`
	Start *string `json:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty"`
	Idle *string `json:"Idle,omitempty"`
	Bytes *string `json:"Bytes,omitempty"`
	Samples *string `json:"Samples,omitempty"`
	InstRate *string `json:"InstRate,omitempty"`
	CurRate *string `json:"CurRate,omitempty"`
	AvgRate *string `json:"AvgRate,omitempty"`
	PeakRate *string `json:"PeakRate,omitempty"`
	BytesRem *string `json:"BytesRem,omitempty"`
	TimeRem *string `json:"TimeRem,omitempty"`
	Progress *int32 `json:"Progress,omitempty"`
}

// NewMonitor instantiates a new Monitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitor() *Monitor {
	this := Monitor{}
	return &this
}

// NewMonitorWithDefaults instantiates a new Monitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorWithDefaults() *Monitor {
	this := Monitor{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Monitor) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Monitor) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Monitor) SetActive(v bool) {
	o.Active = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Monitor) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetStartOk() (*string, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Monitor) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *Monitor) SetStart(v string) {
	o.Start = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Monitor) GetDuration() string {
	if o == nil || o.Duration == nil {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetDurationOk() (*string, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Monitor) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *Monitor) SetDuration(v string) {
	o.Duration = &v
}

// GetIdle returns the Idle field value if set, zero value otherwise.
func (o *Monitor) GetIdle() string {
	if o == nil || o.Idle == nil {
		var ret string
		return ret
	}
	return *o.Idle
}

// GetIdleOk returns a tuple with the Idle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetIdleOk() (*string, bool) {
	if o == nil || o.Idle == nil {
		return nil, false
	}
	return o.Idle, true
}

// HasIdle returns a boolean if a field has been set.
func (o *Monitor) HasIdle() bool {
	if o != nil && o.Idle != nil {
		return true
	}

	return false
}

// SetIdle gets a reference to the given string and assigns it to the Idle field.
func (o *Monitor) SetIdle(v string) {
	o.Idle = &v
}

// GetBytes returns the Bytes field value if set, zero value otherwise.
func (o *Monitor) GetBytes() string {
	if o == nil || o.Bytes == nil {
		var ret string
		return ret
	}
	return *o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetBytesOk() (*string, bool) {
	if o == nil || o.Bytes == nil {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *Monitor) HasBytes() bool {
	if o != nil && o.Bytes != nil {
		return true
	}

	return false
}

// SetBytes gets a reference to the given string and assigns it to the Bytes field.
func (o *Monitor) SetBytes(v string) {
	o.Bytes = &v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *Monitor) GetSamples() string {
	if o == nil || o.Samples == nil {
		var ret string
		return ret
	}
	return *o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetSamplesOk() (*string, bool) {
	if o == nil || o.Samples == nil {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *Monitor) HasSamples() bool {
	if o != nil && o.Samples != nil {
		return true
	}

	return false
}

// SetSamples gets a reference to the given string and assigns it to the Samples field.
func (o *Monitor) SetSamples(v string) {
	o.Samples = &v
}

// GetInstRate returns the InstRate field value if set, zero value otherwise.
func (o *Monitor) GetInstRate() string {
	if o == nil || o.InstRate == nil {
		var ret string
		return ret
	}
	return *o.InstRate
}

// GetInstRateOk returns a tuple with the InstRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetInstRateOk() (*string, bool) {
	if o == nil || o.InstRate == nil {
		return nil, false
	}
	return o.InstRate, true
}

// HasInstRate returns a boolean if a field has been set.
func (o *Monitor) HasInstRate() bool {
	if o != nil && o.InstRate != nil {
		return true
	}

	return false
}

// SetInstRate gets a reference to the given string and assigns it to the InstRate field.
func (o *Monitor) SetInstRate(v string) {
	o.InstRate = &v
}

// GetCurRate returns the CurRate field value if set, zero value otherwise.
func (o *Monitor) GetCurRate() string {
	if o == nil || o.CurRate == nil {
		var ret string
		return ret
	}
	return *o.CurRate
}

// GetCurRateOk returns a tuple with the CurRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetCurRateOk() (*string, bool) {
	if o == nil || o.CurRate == nil {
		return nil, false
	}
	return o.CurRate, true
}

// HasCurRate returns a boolean if a field has been set.
func (o *Monitor) HasCurRate() bool {
	if o != nil && o.CurRate != nil {
		return true
	}

	return false
}

// SetCurRate gets a reference to the given string and assigns it to the CurRate field.
func (o *Monitor) SetCurRate(v string) {
	o.CurRate = &v
}

// GetAvgRate returns the AvgRate field value if set, zero value otherwise.
func (o *Monitor) GetAvgRate() string {
	if o == nil || o.AvgRate == nil {
		var ret string
		return ret
	}
	return *o.AvgRate
}

// GetAvgRateOk returns a tuple with the AvgRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetAvgRateOk() (*string, bool) {
	if o == nil || o.AvgRate == nil {
		return nil, false
	}
	return o.AvgRate, true
}

// HasAvgRate returns a boolean if a field has been set.
func (o *Monitor) HasAvgRate() bool {
	if o != nil && o.AvgRate != nil {
		return true
	}

	return false
}

// SetAvgRate gets a reference to the given string and assigns it to the AvgRate field.
func (o *Monitor) SetAvgRate(v string) {
	o.AvgRate = &v
}

// GetPeakRate returns the PeakRate field value if set, zero value otherwise.
func (o *Monitor) GetPeakRate() string {
	if o == nil || o.PeakRate == nil {
		var ret string
		return ret
	}
	return *o.PeakRate
}

// GetPeakRateOk returns a tuple with the PeakRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetPeakRateOk() (*string, bool) {
	if o == nil || o.PeakRate == nil {
		return nil, false
	}
	return o.PeakRate, true
}

// HasPeakRate returns a boolean if a field has been set.
func (o *Monitor) HasPeakRate() bool {
	if o != nil && o.PeakRate != nil {
		return true
	}

	return false
}

// SetPeakRate gets a reference to the given string and assigns it to the PeakRate field.
func (o *Monitor) SetPeakRate(v string) {
	o.PeakRate = &v
}

// GetBytesRem returns the BytesRem field value if set, zero value otherwise.
func (o *Monitor) GetBytesRem() string {
	if o == nil || o.BytesRem == nil {
		var ret string
		return ret
	}
	return *o.BytesRem
}

// GetBytesRemOk returns a tuple with the BytesRem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetBytesRemOk() (*string, bool) {
	if o == nil || o.BytesRem == nil {
		return nil, false
	}
	return o.BytesRem, true
}

// HasBytesRem returns a boolean if a field has been set.
func (o *Monitor) HasBytesRem() bool {
	if o != nil && o.BytesRem != nil {
		return true
	}

	return false
}

// SetBytesRem gets a reference to the given string and assigns it to the BytesRem field.
func (o *Monitor) SetBytesRem(v string) {
	o.BytesRem = &v
}

// GetTimeRem returns the TimeRem field value if set, zero value otherwise.
func (o *Monitor) GetTimeRem() string {
	if o == nil || o.TimeRem == nil {
		var ret string
		return ret
	}
	return *o.TimeRem
}

// GetTimeRemOk returns a tuple with the TimeRem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetTimeRemOk() (*string, bool) {
	if o == nil || o.TimeRem == nil {
		return nil, false
	}
	return o.TimeRem, true
}

// HasTimeRem returns a boolean if a field has been set.
func (o *Monitor) HasTimeRem() bool {
	if o != nil && o.TimeRem != nil {
		return true
	}

	return false
}

// SetTimeRem gets a reference to the given string and assigns it to the TimeRem field.
func (o *Monitor) SetTimeRem(v string) {
	o.TimeRem = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Monitor) GetProgress() int32 {
	if o == nil || o.Progress == nil {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetProgressOk() (*int32, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Monitor) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *Monitor) SetProgress(v int32) {
	o.Progress = &v
}

func (o Monitor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["Active"] = o.Active
	}
	if o.Start != nil {
		toSerialize["Start"] = o.Start
	}
	if o.Duration != nil {
		toSerialize["Duration"] = o.Duration
	}
	if o.Idle != nil {
		toSerialize["Idle"] = o.Idle
	}
	if o.Bytes != nil {
		toSerialize["Bytes"] = o.Bytes
	}
	if o.Samples != nil {
		toSerialize["Samples"] = o.Samples
	}
	if o.InstRate != nil {
		toSerialize["InstRate"] = o.InstRate
	}
	if o.CurRate != nil {
		toSerialize["CurRate"] = o.CurRate
	}
	if o.AvgRate != nil {
		toSerialize["AvgRate"] = o.AvgRate
	}
	if o.PeakRate != nil {
		toSerialize["PeakRate"] = o.PeakRate
	}
	if o.BytesRem != nil {
		toSerialize["BytesRem"] = o.BytesRem
	}
	if o.TimeRem != nil {
		toSerialize["TimeRem"] = o.TimeRem
	}
	if o.Progress != nil {
		toSerialize["Progress"] = o.Progress
	}
	return json.Marshal(toSerialize)
}

type NullableMonitor struct {
	value *Monitor
	isSet bool
}

func (v NullableMonitor) Get() *Monitor {
	return v.value
}

func (v *NullableMonitor) Set(val *Monitor) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitor(val *Monitor) *NullableMonitor {
	return &NullableMonitor{value: val, isSet: true}
}

func (v NullableMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


