/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SyncInfo struct for SyncInfo
type SyncInfo struct {
	LatestBlockHash *string `json:"latest_block_hash,omitempty"`
	LatestAppHash *string `json:"latest_app_hash,omitempty"`
	LatestBlockHeight *string `json:"latest_block_height,omitempty"`
	LatestBlockTime *string `json:"latest_block_time,omitempty"`
	EarliestBlockHash *string `json:"earliest_block_hash,omitempty"`
	EarliestAppHash *string `json:"earliest_app_hash,omitempty"`
	EarliestBlockHeight *string `json:"earliest_block_height,omitempty"`
	EarliestBlockTime *string `json:"earliest_block_time,omitempty"`
	MaxPeerBlockHeight *string `json:"max_peer_block_height,omitempty"`
	CatchingUp *bool `json:"catching_up,omitempty"`
	TotalSyncedTime *string `json:"total_synced_time,omitempty"`
	RemainingTime *string `json:"remaining_time,omitempty"`
	TotalSnapshots *string `json:"total_snapshots,omitempty"`
	ChunkProcessAvgTime *string `json:"chunk_process_avg_time,omitempty"`
	SnapshotHeight *string `json:"snapshot_height,omitempty"`
	SnapshotChunksCount *string `json:"snapshot_chunks_count,omitempty"`
	SnapshotChunksTotal *string `json:"snapshot_chunks_total,omitempty"`
	BackfilledBlocks *string `json:"backfilled_blocks,omitempty"`
	BackfillBlocksTotal *string `json:"backfill_blocks_total,omitempty"`
}

// NewSyncInfo instantiates a new SyncInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncInfo() *SyncInfo {
	this := SyncInfo{}
	return &this
}

// NewSyncInfoWithDefaults instantiates a new SyncInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncInfoWithDefaults() *SyncInfo {
	this := SyncInfo{}
	return &this
}

// GetLatestBlockHash returns the LatestBlockHash field value if set, zero value otherwise.
func (o *SyncInfo) GetLatestBlockHash() string {
	if o == nil || o.LatestBlockHash == nil {
		var ret string
		return ret
	}
	return *o.LatestBlockHash
}

// GetLatestBlockHashOk returns a tuple with the LatestBlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetLatestBlockHashOk() (*string, bool) {
	if o == nil || o.LatestBlockHash == nil {
		return nil, false
	}
	return o.LatestBlockHash, true
}

// HasLatestBlockHash returns a boolean if a field has been set.
func (o *SyncInfo) HasLatestBlockHash() bool {
	if o != nil && o.LatestBlockHash != nil {
		return true
	}

	return false
}

// SetLatestBlockHash gets a reference to the given string and assigns it to the LatestBlockHash field.
func (o *SyncInfo) SetLatestBlockHash(v string) {
	o.LatestBlockHash = &v
}

// GetLatestAppHash returns the LatestAppHash field value if set, zero value otherwise.
func (o *SyncInfo) GetLatestAppHash() string {
	if o == nil || o.LatestAppHash == nil {
		var ret string
		return ret
	}
	return *o.LatestAppHash
}

// GetLatestAppHashOk returns a tuple with the LatestAppHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetLatestAppHashOk() (*string, bool) {
	if o == nil || o.LatestAppHash == nil {
		return nil, false
	}
	return o.LatestAppHash, true
}

// HasLatestAppHash returns a boolean if a field has been set.
func (o *SyncInfo) HasLatestAppHash() bool {
	if o != nil && o.LatestAppHash != nil {
		return true
	}

	return false
}

// SetLatestAppHash gets a reference to the given string and assigns it to the LatestAppHash field.
func (o *SyncInfo) SetLatestAppHash(v string) {
	o.LatestAppHash = &v
}

// GetLatestBlockHeight returns the LatestBlockHeight field value if set, zero value otherwise.
func (o *SyncInfo) GetLatestBlockHeight() string {
	if o == nil || o.LatestBlockHeight == nil {
		var ret string
		return ret
	}
	return *o.LatestBlockHeight
}

// GetLatestBlockHeightOk returns a tuple with the LatestBlockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetLatestBlockHeightOk() (*string, bool) {
	if o == nil || o.LatestBlockHeight == nil {
		return nil, false
	}
	return o.LatestBlockHeight, true
}

// HasLatestBlockHeight returns a boolean if a field has been set.
func (o *SyncInfo) HasLatestBlockHeight() bool {
	if o != nil && o.LatestBlockHeight != nil {
		return true
	}

	return false
}

// SetLatestBlockHeight gets a reference to the given string and assigns it to the LatestBlockHeight field.
func (o *SyncInfo) SetLatestBlockHeight(v string) {
	o.LatestBlockHeight = &v
}

// GetLatestBlockTime returns the LatestBlockTime field value if set, zero value otherwise.
func (o *SyncInfo) GetLatestBlockTime() string {
	if o == nil || o.LatestBlockTime == nil {
		var ret string
		return ret
	}
	return *o.LatestBlockTime
}

// GetLatestBlockTimeOk returns a tuple with the LatestBlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetLatestBlockTimeOk() (*string, bool) {
	if o == nil || o.LatestBlockTime == nil {
		return nil, false
	}
	return o.LatestBlockTime, true
}

// HasLatestBlockTime returns a boolean if a field has been set.
func (o *SyncInfo) HasLatestBlockTime() bool {
	if o != nil && o.LatestBlockTime != nil {
		return true
	}

	return false
}

// SetLatestBlockTime gets a reference to the given string and assigns it to the LatestBlockTime field.
func (o *SyncInfo) SetLatestBlockTime(v string) {
	o.LatestBlockTime = &v
}

// GetEarliestBlockHash returns the EarliestBlockHash field value if set, zero value otherwise.
func (o *SyncInfo) GetEarliestBlockHash() string {
	if o == nil || o.EarliestBlockHash == nil {
		var ret string
		return ret
	}
	return *o.EarliestBlockHash
}

// GetEarliestBlockHashOk returns a tuple with the EarliestBlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetEarliestBlockHashOk() (*string, bool) {
	if o == nil || o.EarliestBlockHash == nil {
		return nil, false
	}
	return o.EarliestBlockHash, true
}

// HasEarliestBlockHash returns a boolean if a field has been set.
func (o *SyncInfo) HasEarliestBlockHash() bool {
	if o != nil && o.EarliestBlockHash != nil {
		return true
	}

	return false
}

// SetEarliestBlockHash gets a reference to the given string and assigns it to the EarliestBlockHash field.
func (o *SyncInfo) SetEarliestBlockHash(v string) {
	o.EarliestBlockHash = &v
}

// GetEarliestAppHash returns the EarliestAppHash field value if set, zero value otherwise.
func (o *SyncInfo) GetEarliestAppHash() string {
	if o == nil || o.EarliestAppHash == nil {
		var ret string
		return ret
	}
	return *o.EarliestAppHash
}

// GetEarliestAppHashOk returns a tuple with the EarliestAppHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetEarliestAppHashOk() (*string, bool) {
	if o == nil || o.EarliestAppHash == nil {
		return nil, false
	}
	return o.EarliestAppHash, true
}

// HasEarliestAppHash returns a boolean if a field has been set.
func (o *SyncInfo) HasEarliestAppHash() bool {
	if o != nil && o.EarliestAppHash != nil {
		return true
	}

	return false
}

// SetEarliestAppHash gets a reference to the given string and assigns it to the EarliestAppHash field.
func (o *SyncInfo) SetEarliestAppHash(v string) {
	o.EarliestAppHash = &v
}

// GetEarliestBlockHeight returns the EarliestBlockHeight field value if set, zero value otherwise.
func (o *SyncInfo) GetEarliestBlockHeight() string {
	if o == nil || o.EarliestBlockHeight == nil {
		var ret string
		return ret
	}
	return *o.EarliestBlockHeight
}

// GetEarliestBlockHeightOk returns a tuple with the EarliestBlockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetEarliestBlockHeightOk() (*string, bool) {
	if o == nil || o.EarliestBlockHeight == nil {
		return nil, false
	}
	return o.EarliestBlockHeight, true
}

// HasEarliestBlockHeight returns a boolean if a field has been set.
func (o *SyncInfo) HasEarliestBlockHeight() bool {
	if o != nil && o.EarliestBlockHeight != nil {
		return true
	}

	return false
}

// SetEarliestBlockHeight gets a reference to the given string and assigns it to the EarliestBlockHeight field.
func (o *SyncInfo) SetEarliestBlockHeight(v string) {
	o.EarliestBlockHeight = &v
}

// GetEarliestBlockTime returns the EarliestBlockTime field value if set, zero value otherwise.
func (o *SyncInfo) GetEarliestBlockTime() string {
	if o == nil || o.EarliestBlockTime == nil {
		var ret string
		return ret
	}
	return *o.EarliestBlockTime
}

// GetEarliestBlockTimeOk returns a tuple with the EarliestBlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetEarliestBlockTimeOk() (*string, bool) {
	if o == nil || o.EarliestBlockTime == nil {
		return nil, false
	}
	return o.EarliestBlockTime, true
}

// HasEarliestBlockTime returns a boolean if a field has been set.
func (o *SyncInfo) HasEarliestBlockTime() bool {
	if o != nil && o.EarliestBlockTime != nil {
		return true
	}

	return false
}

// SetEarliestBlockTime gets a reference to the given string and assigns it to the EarliestBlockTime field.
func (o *SyncInfo) SetEarliestBlockTime(v string) {
	o.EarliestBlockTime = &v
}

// GetMaxPeerBlockHeight returns the MaxPeerBlockHeight field value if set, zero value otherwise.
func (o *SyncInfo) GetMaxPeerBlockHeight() string {
	if o == nil || o.MaxPeerBlockHeight == nil {
		var ret string
		return ret
	}
	return *o.MaxPeerBlockHeight
}

// GetMaxPeerBlockHeightOk returns a tuple with the MaxPeerBlockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetMaxPeerBlockHeightOk() (*string, bool) {
	if o == nil || o.MaxPeerBlockHeight == nil {
		return nil, false
	}
	return o.MaxPeerBlockHeight, true
}

// HasMaxPeerBlockHeight returns a boolean if a field has been set.
func (o *SyncInfo) HasMaxPeerBlockHeight() bool {
	if o != nil && o.MaxPeerBlockHeight != nil {
		return true
	}

	return false
}

// SetMaxPeerBlockHeight gets a reference to the given string and assigns it to the MaxPeerBlockHeight field.
func (o *SyncInfo) SetMaxPeerBlockHeight(v string) {
	o.MaxPeerBlockHeight = &v
}

// GetCatchingUp returns the CatchingUp field value if set, zero value otherwise.
func (o *SyncInfo) GetCatchingUp() bool {
	if o == nil || o.CatchingUp == nil {
		var ret bool
		return ret
	}
	return *o.CatchingUp
}

// GetCatchingUpOk returns a tuple with the CatchingUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetCatchingUpOk() (*bool, bool) {
	if o == nil || o.CatchingUp == nil {
		return nil, false
	}
	return o.CatchingUp, true
}

// HasCatchingUp returns a boolean if a field has been set.
func (o *SyncInfo) HasCatchingUp() bool {
	if o != nil && o.CatchingUp != nil {
		return true
	}

	return false
}

// SetCatchingUp gets a reference to the given bool and assigns it to the CatchingUp field.
func (o *SyncInfo) SetCatchingUp(v bool) {
	o.CatchingUp = &v
}

// GetTotalSyncedTime returns the TotalSyncedTime field value if set, zero value otherwise.
func (o *SyncInfo) GetTotalSyncedTime() string {
	if o == nil || o.TotalSyncedTime == nil {
		var ret string
		return ret
	}
	return *o.TotalSyncedTime
}

// GetTotalSyncedTimeOk returns a tuple with the TotalSyncedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetTotalSyncedTimeOk() (*string, bool) {
	if o == nil || o.TotalSyncedTime == nil {
		return nil, false
	}
	return o.TotalSyncedTime, true
}

// HasTotalSyncedTime returns a boolean if a field has been set.
func (o *SyncInfo) HasTotalSyncedTime() bool {
	if o != nil && o.TotalSyncedTime != nil {
		return true
	}

	return false
}

// SetTotalSyncedTime gets a reference to the given string and assigns it to the TotalSyncedTime field.
func (o *SyncInfo) SetTotalSyncedTime(v string) {
	o.TotalSyncedTime = &v
}

// GetRemainingTime returns the RemainingTime field value if set, zero value otherwise.
func (o *SyncInfo) GetRemainingTime() string {
	if o == nil || o.RemainingTime == nil {
		var ret string
		return ret
	}
	return *o.RemainingTime
}

// GetRemainingTimeOk returns a tuple with the RemainingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetRemainingTimeOk() (*string, bool) {
	if o == nil || o.RemainingTime == nil {
		return nil, false
	}
	return o.RemainingTime, true
}

// HasRemainingTime returns a boolean if a field has been set.
func (o *SyncInfo) HasRemainingTime() bool {
	if o != nil && o.RemainingTime != nil {
		return true
	}

	return false
}

// SetRemainingTime gets a reference to the given string and assigns it to the RemainingTime field.
func (o *SyncInfo) SetRemainingTime(v string) {
	o.RemainingTime = &v
}

// GetTotalSnapshots returns the TotalSnapshots field value if set, zero value otherwise.
func (o *SyncInfo) GetTotalSnapshots() string {
	if o == nil || o.TotalSnapshots == nil {
		var ret string
		return ret
	}
	return *o.TotalSnapshots
}

// GetTotalSnapshotsOk returns a tuple with the TotalSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetTotalSnapshotsOk() (*string, bool) {
	if o == nil || o.TotalSnapshots == nil {
		return nil, false
	}
	return o.TotalSnapshots, true
}

// HasTotalSnapshots returns a boolean if a field has been set.
func (o *SyncInfo) HasTotalSnapshots() bool {
	if o != nil && o.TotalSnapshots != nil {
		return true
	}

	return false
}

// SetTotalSnapshots gets a reference to the given string and assigns it to the TotalSnapshots field.
func (o *SyncInfo) SetTotalSnapshots(v string) {
	o.TotalSnapshots = &v
}

// GetChunkProcessAvgTime returns the ChunkProcessAvgTime field value if set, zero value otherwise.
func (o *SyncInfo) GetChunkProcessAvgTime() string {
	if o == nil || o.ChunkProcessAvgTime == nil {
		var ret string
		return ret
	}
	return *o.ChunkProcessAvgTime
}

// GetChunkProcessAvgTimeOk returns a tuple with the ChunkProcessAvgTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetChunkProcessAvgTimeOk() (*string, bool) {
	if o == nil || o.ChunkProcessAvgTime == nil {
		return nil, false
	}
	return o.ChunkProcessAvgTime, true
}

// HasChunkProcessAvgTime returns a boolean if a field has been set.
func (o *SyncInfo) HasChunkProcessAvgTime() bool {
	if o != nil && o.ChunkProcessAvgTime != nil {
		return true
	}

	return false
}

// SetChunkProcessAvgTime gets a reference to the given string and assigns it to the ChunkProcessAvgTime field.
func (o *SyncInfo) SetChunkProcessAvgTime(v string) {
	o.ChunkProcessAvgTime = &v
}

// GetSnapshotHeight returns the SnapshotHeight field value if set, zero value otherwise.
func (o *SyncInfo) GetSnapshotHeight() string {
	if o == nil || o.SnapshotHeight == nil {
		var ret string
		return ret
	}
	return *o.SnapshotHeight
}

// GetSnapshotHeightOk returns a tuple with the SnapshotHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetSnapshotHeightOk() (*string, bool) {
	if o == nil || o.SnapshotHeight == nil {
		return nil, false
	}
	return o.SnapshotHeight, true
}

// HasSnapshotHeight returns a boolean if a field has been set.
func (o *SyncInfo) HasSnapshotHeight() bool {
	if o != nil && o.SnapshotHeight != nil {
		return true
	}

	return false
}

// SetSnapshotHeight gets a reference to the given string and assigns it to the SnapshotHeight field.
func (o *SyncInfo) SetSnapshotHeight(v string) {
	o.SnapshotHeight = &v
}

// GetSnapshotChunksCount returns the SnapshotChunksCount field value if set, zero value otherwise.
func (o *SyncInfo) GetSnapshotChunksCount() string {
	if o == nil || o.SnapshotChunksCount == nil {
		var ret string
		return ret
	}
	return *o.SnapshotChunksCount
}

// GetSnapshotChunksCountOk returns a tuple with the SnapshotChunksCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetSnapshotChunksCountOk() (*string, bool) {
	if o == nil || o.SnapshotChunksCount == nil {
		return nil, false
	}
	return o.SnapshotChunksCount, true
}

// HasSnapshotChunksCount returns a boolean if a field has been set.
func (o *SyncInfo) HasSnapshotChunksCount() bool {
	if o != nil && o.SnapshotChunksCount != nil {
		return true
	}

	return false
}

// SetSnapshotChunksCount gets a reference to the given string and assigns it to the SnapshotChunksCount field.
func (o *SyncInfo) SetSnapshotChunksCount(v string) {
	o.SnapshotChunksCount = &v
}

// GetSnapshotChunksTotal returns the SnapshotChunksTotal field value if set, zero value otherwise.
func (o *SyncInfo) GetSnapshotChunksTotal() string {
	if o == nil || o.SnapshotChunksTotal == nil {
		var ret string
		return ret
	}
	return *o.SnapshotChunksTotal
}

// GetSnapshotChunksTotalOk returns a tuple with the SnapshotChunksTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetSnapshotChunksTotalOk() (*string, bool) {
	if o == nil || o.SnapshotChunksTotal == nil {
		return nil, false
	}
	return o.SnapshotChunksTotal, true
}

// HasSnapshotChunksTotal returns a boolean if a field has been set.
func (o *SyncInfo) HasSnapshotChunksTotal() bool {
	if o != nil && o.SnapshotChunksTotal != nil {
		return true
	}

	return false
}

// SetSnapshotChunksTotal gets a reference to the given string and assigns it to the SnapshotChunksTotal field.
func (o *SyncInfo) SetSnapshotChunksTotal(v string) {
	o.SnapshotChunksTotal = &v
}

// GetBackfilledBlocks returns the BackfilledBlocks field value if set, zero value otherwise.
func (o *SyncInfo) GetBackfilledBlocks() string {
	if o == nil || o.BackfilledBlocks == nil {
		var ret string
		return ret
	}
	return *o.BackfilledBlocks
}

// GetBackfilledBlocksOk returns a tuple with the BackfilledBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetBackfilledBlocksOk() (*string, bool) {
	if o == nil || o.BackfilledBlocks == nil {
		return nil, false
	}
	return o.BackfilledBlocks, true
}

// HasBackfilledBlocks returns a boolean if a field has been set.
func (o *SyncInfo) HasBackfilledBlocks() bool {
	if o != nil && o.BackfilledBlocks != nil {
		return true
	}

	return false
}

// SetBackfilledBlocks gets a reference to the given string and assigns it to the BackfilledBlocks field.
func (o *SyncInfo) SetBackfilledBlocks(v string) {
	o.BackfilledBlocks = &v
}

// GetBackfillBlocksTotal returns the BackfillBlocksTotal field value if set, zero value otherwise.
func (o *SyncInfo) GetBackfillBlocksTotal() string {
	if o == nil || o.BackfillBlocksTotal == nil {
		var ret string
		return ret
	}
	return *o.BackfillBlocksTotal
}

// GetBackfillBlocksTotalOk returns a tuple with the BackfillBlocksTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncInfo) GetBackfillBlocksTotalOk() (*string, bool) {
	if o == nil || o.BackfillBlocksTotal == nil {
		return nil, false
	}
	return o.BackfillBlocksTotal, true
}

// HasBackfillBlocksTotal returns a boolean if a field has been set.
func (o *SyncInfo) HasBackfillBlocksTotal() bool {
	if o != nil && o.BackfillBlocksTotal != nil {
		return true
	}

	return false
}

// SetBackfillBlocksTotal gets a reference to the given string and assigns it to the BackfillBlocksTotal field.
func (o *SyncInfo) SetBackfillBlocksTotal(v string) {
	o.BackfillBlocksTotal = &v
}

func (o SyncInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LatestBlockHash != nil {
		toSerialize["latest_block_hash"] = o.LatestBlockHash
	}
	if o.LatestAppHash != nil {
		toSerialize["latest_app_hash"] = o.LatestAppHash
	}
	if o.LatestBlockHeight != nil {
		toSerialize["latest_block_height"] = o.LatestBlockHeight
	}
	if o.LatestBlockTime != nil {
		toSerialize["latest_block_time"] = o.LatestBlockTime
	}
	if o.EarliestBlockHash != nil {
		toSerialize["earliest_block_hash"] = o.EarliestBlockHash
	}
	if o.EarliestAppHash != nil {
		toSerialize["earliest_app_hash"] = o.EarliestAppHash
	}
	if o.EarliestBlockHeight != nil {
		toSerialize["earliest_block_height"] = o.EarliestBlockHeight
	}
	if o.EarliestBlockTime != nil {
		toSerialize["earliest_block_time"] = o.EarliestBlockTime
	}
	if o.MaxPeerBlockHeight != nil {
		toSerialize["max_peer_block_height"] = o.MaxPeerBlockHeight
	}
	if o.CatchingUp != nil {
		toSerialize["catching_up"] = o.CatchingUp
	}
	if o.TotalSyncedTime != nil {
		toSerialize["total_synced_time"] = o.TotalSyncedTime
	}
	if o.RemainingTime != nil {
		toSerialize["remaining_time"] = o.RemainingTime
	}
	if o.TotalSnapshots != nil {
		toSerialize["total_snapshots"] = o.TotalSnapshots
	}
	if o.ChunkProcessAvgTime != nil {
		toSerialize["chunk_process_avg_time"] = o.ChunkProcessAvgTime
	}
	if o.SnapshotHeight != nil {
		toSerialize["snapshot_height"] = o.SnapshotHeight
	}
	if o.SnapshotChunksCount != nil {
		toSerialize["snapshot_chunks_count"] = o.SnapshotChunksCount
	}
	if o.SnapshotChunksTotal != nil {
		toSerialize["snapshot_chunks_total"] = o.SnapshotChunksTotal
	}
	if o.BackfilledBlocks != nil {
		toSerialize["backfilled_blocks"] = o.BackfilledBlocks
	}
	if o.BackfillBlocksTotal != nil {
		toSerialize["backfill_blocks_total"] = o.BackfillBlocksTotal
	}
	return json.Marshal(toSerialize)
}

type NullableSyncInfo struct {
	value *SyncInfo
	isSet bool
}

func (v NullableSyncInfo) Get() *SyncInfo {
	return v.value
}

func (v *NullableSyncInfo) Set(val *SyncInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncInfo(val *SyncInfo) *NullableSyncInfo {
	return &NullableSyncInfo{value: val, isSet: true}
}

func (v NullableSyncInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


