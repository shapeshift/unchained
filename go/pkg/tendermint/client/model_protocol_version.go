/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ProtocolVersion struct for ProtocolVersion
type ProtocolVersion struct {
	P2p *string `json:"p2p,omitempty"`
	Block *string `json:"block,omitempty"`
	App *string `json:"app,omitempty"`
}

// NewProtocolVersion instantiates a new ProtocolVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocolVersion() *ProtocolVersion {
	this := ProtocolVersion{}
	return &this
}

// NewProtocolVersionWithDefaults instantiates a new ProtocolVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolVersionWithDefaults() *ProtocolVersion {
	this := ProtocolVersion{}
	return &this
}

// GetP2p returns the P2p field value if set, zero value otherwise.
func (o *ProtocolVersion) GetP2p() string {
	if o == nil || o.P2p == nil {
		var ret string
		return ret
	}
	return *o.P2p
}

// GetP2pOk returns a tuple with the P2p field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolVersion) GetP2pOk() (*string, bool) {
	if o == nil || o.P2p == nil {
		return nil, false
	}
	return o.P2p, true
}

// HasP2p returns a boolean if a field has been set.
func (o *ProtocolVersion) HasP2p() bool {
	if o != nil && o.P2p != nil {
		return true
	}

	return false
}

// SetP2p gets a reference to the given string and assigns it to the P2p field.
func (o *ProtocolVersion) SetP2p(v string) {
	o.P2p = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *ProtocolVersion) GetBlock() string {
	if o == nil || o.Block == nil {
		var ret string
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolVersion) GetBlockOk() (*string, bool) {
	if o == nil || o.Block == nil {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *ProtocolVersion) HasBlock() bool {
	if o != nil && o.Block != nil {
		return true
	}

	return false
}

// SetBlock gets a reference to the given string and assigns it to the Block field.
func (o *ProtocolVersion) SetBlock(v string) {
	o.Block = &v
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *ProtocolVersion) GetApp() string {
	if o == nil || o.App == nil {
		var ret string
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtocolVersion) GetAppOk() (*string, bool) {
	if o == nil || o.App == nil {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *ProtocolVersion) HasApp() bool {
	if o != nil && o.App != nil {
		return true
	}

	return false
}

// SetApp gets a reference to the given string and assigns it to the App field.
func (o *ProtocolVersion) SetApp(v string) {
	o.App = &v
}

func (o ProtocolVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.P2p != nil {
		toSerialize["p2p"] = o.P2p
	}
	if o.Block != nil {
		toSerialize["block"] = o.Block
	}
	if o.App != nil {
		toSerialize["app"] = o.App
	}
	return json.Marshal(toSerialize)
}

type NullableProtocolVersion struct {
	value *ProtocolVersion
	isSet bool
}

func (v NullableProtocolVersion) Get() *ProtocolVersion {
	return v.value
}

func (v *NullableProtocolVersion) Set(val *ProtocolVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocolVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocolVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocolVersion(val *ProtocolVersion) *NullableProtocolVersion {
	return &NullableProtocolVersion{value: val, isSet: true}
}

func (v NullableProtocolVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocolVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


