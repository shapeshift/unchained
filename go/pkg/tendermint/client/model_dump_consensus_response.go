/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// DumpConsensusResponse struct for DumpConsensusResponse
type DumpConsensusResponse struct {
	Jsonrpc string `json:"jsonrpc"`
	Id int32 `json:"id"`
	Result DumpConsensusResponseResult `json:"result"`
}

// NewDumpConsensusResponse instantiates a new DumpConsensusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDumpConsensusResponse(jsonrpc string, id int32, result DumpConsensusResponseResult) *DumpConsensusResponse {
	this := DumpConsensusResponse{}
	this.Jsonrpc = jsonrpc
	this.Id = id
	this.Result = result
	return &this
}

// NewDumpConsensusResponseWithDefaults instantiates a new DumpConsensusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDumpConsensusResponseWithDefaults() *DumpConsensusResponse {
	this := DumpConsensusResponse{}
	return &this
}

// GetJsonrpc returns the Jsonrpc field value
func (o *DumpConsensusResponse) GetJsonrpc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jsonrpc
}

// GetJsonrpcOk returns a tuple with the Jsonrpc field value
// and a boolean to check if the value has been set.
func (o *DumpConsensusResponse) GetJsonrpcOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Jsonrpc, true
}

// SetJsonrpc sets field value
func (o *DumpConsensusResponse) SetJsonrpc(v string) {
	o.Jsonrpc = v
}

// GetId returns the Id field value
func (o *DumpConsensusResponse) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DumpConsensusResponse) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DumpConsensusResponse) SetId(v int32) {
	o.Id = v
}

// GetResult returns the Result field value
func (o *DumpConsensusResponse) GetResult() DumpConsensusResponseResult {
	if o == nil {
		var ret DumpConsensusResponseResult
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *DumpConsensusResponse) GetResultOk() (*DumpConsensusResponseResult, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *DumpConsensusResponse) SetResult(v DumpConsensusResponseResult) {
	o.Result = v
}

func (o DumpConsensusResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["jsonrpc"] = o.Jsonrpc
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableDumpConsensusResponse struct {
	value *DumpConsensusResponse
	isSet bool
}

func (v NullableDumpConsensusResponse) Get() *DumpConsensusResponse {
	return v.value
}

func (v *NullableDumpConsensusResponse) Set(val *DumpConsensusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDumpConsensusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDumpConsensusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDumpConsensusResponse(val *DumpConsensusResponse) *NullableDumpConsensusResponse {
	return &NullableDumpConsensusResponse{value: val, isSet: true}
}

func (v NullableDumpConsensusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDumpConsensusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


