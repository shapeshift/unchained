/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// BlockLastCommit struct for BlockLastCommit
type BlockLastCommit struct {
	Height *int32 `json:"height,omitempty"`
	Round *int32 `json:"round,omitempty"`
	BlockId *BlockID `json:"block_id,omitempty"`
	Signatures *[]Commit `json:"signatures,omitempty"`
}

// NewBlockLastCommit instantiates a new BlockLastCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockLastCommit() *BlockLastCommit {
	this := BlockLastCommit{}
	return &this
}

// NewBlockLastCommitWithDefaults instantiates a new BlockLastCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockLastCommitWithDefaults() *BlockLastCommit {
	this := BlockLastCommit{}
	return &this
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *BlockLastCommit) GetHeight() int32 {
	if o == nil || o.Height == nil {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockLastCommit) GetHeightOk() (*int32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *BlockLastCommit) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *BlockLastCommit) SetHeight(v int32) {
	o.Height = &v
}

// GetRound returns the Round field value if set, zero value otherwise.
func (o *BlockLastCommit) GetRound() int32 {
	if o == nil || o.Round == nil {
		var ret int32
		return ret
	}
	return *o.Round
}

// GetRoundOk returns a tuple with the Round field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockLastCommit) GetRoundOk() (*int32, bool) {
	if o == nil || o.Round == nil {
		return nil, false
	}
	return o.Round, true
}

// HasRound returns a boolean if a field has been set.
func (o *BlockLastCommit) HasRound() bool {
	if o != nil && o.Round != nil {
		return true
	}

	return false
}

// SetRound gets a reference to the given int32 and assigns it to the Round field.
func (o *BlockLastCommit) SetRound(v int32) {
	o.Round = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *BlockLastCommit) GetBlockId() BlockID {
	if o == nil || o.BlockId == nil {
		var ret BlockID
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockLastCommit) GetBlockIdOk() (*BlockID, bool) {
	if o == nil || o.BlockId == nil {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *BlockLastCommit) HasBlockId() bool {
	if o != nil && o.BlockId != nil {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockID and assigns it to the BlockId field.
func (o *BlockLastCommit) SetBlockId(v BlockID) {
	o.BlockId = &v
}

// GetSignatures returns the Signatures field value if set, zero value otherwise.
func (o *BlockLastCommit) GetSignatures() []Commit {
	if o == nil || o.Signatures == nil {
		var ret []Commit
		return ret
	}
	return *o.Signatures
}

// GetSignaturesOk returns a tuple with the Signatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockLastCommit) GetSignaturesOk() (*[]Commit, bool) {
	if o == nil || o.Signatures == nil {
		return nil, false
	}
	return o.Signatures, true
}

// HasSignatures returns a boolean if a field has been set.
func (o *BlockLastCommit) HasSignatures() bool {
	if o != nil && o.Signatures != nil {
		return true
	}

	return false
}

// SetSignatures gets a reference to the given []Commit and assigns it to the Signatures field.
func (o *BlockLastCommit) SetSignatures(v []Commit) {
	o.Signatures = &v
}

func (o BlockLastCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.Round != nil {
		toSerialize["round"] = o.Round
	}
	if o.BlockId != nil {
		toSerialize["block_id"] = o.BlockId
	}
	if o.Signatures != nil {
		toSerialize["signatures"] = o.Signatures
	}
	return json.Marshal(toSerialize)
}

type NullableBlockLastCommit struct {
	value *BlockLastCommit
	isSet bool
}

func (v NullableBlockLastCommit) Get() *BlockLastCommit {
	return v.value
}

func (v *NullableBlockLastCommit) Set(val *BlockLastCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockLastCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockLastCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockLastCommit(val *BlockLastCommit) *NullableBlockLastCommit {
	return &NullableBlockLastCommit{value: val, isSet: true}
}

func (v NullableBlockLastCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockLastCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


