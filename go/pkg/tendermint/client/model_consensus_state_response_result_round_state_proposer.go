/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ConsensusStateResponseResultRoundStateProposer struct for ConsensusStateResponseResultRoundStateProposer
type ConsensusStateResponseResultRoundStateProposer struct {
	Address *string `json:"address,omitempty"`
	Index *int32 `json:"index,omitempty"`
}

// NewConsensusStateResponseResultRoundStateProposer instantiates a new ConsensusStateResponseResultRoundStateProposer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsensusStateResponseResultRoundStateProposer() *ConsensusStateResponseResultRoundStateProposer {
	this := ConsensusStateResponseResultRoundStateProposer{}
	return &this
}

// NewConsensusStateResponseResultRoundStateProposerWithDefaults instantiates a new ConsensusStateResponseResultRoundStateProposer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsensusStateResponseResultRoundStateProposerWithDefaults() *ConsensusStateResponseResultRoundStateProposer {
	this := ConsensusStateResponseResultRoundStateProposer{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *ConsensusStateResponseResultRoundStateProposer) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsensusStateResponseResultRoundStateProposer) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *ConsensusStateResponseResultRoundStateProposer) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *ConsensusStateResponseResultRoundStateProposer) SetAddress(v string) {
	o.Address = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ConsensusStateResponseResultRoundStateProposer) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsensusStateResponseResultRoundStateProposer) GetIndexOk() (*int32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ConsensusStateResponseResultRoundStateProposer) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *ConsensusStateResponseResultRoundStateProposer) SetIndex(v int32) {
	o.Index = &v
}

func (o ConsensusStateResponseResultRoundStateProposer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	return json.Marshal(toSerialize)
}

type NullableConsensusStateResponseResultRoundStateProposer struct {
	value *ConsensusStateResponseResultRoundStateProposer
	isSet bool
}

func (v NullableConsensusStateResponseResultRoundStateProposer) Get() *ConsensusStateResponseResultRoundStateProposer {
	return v.value
}

func (v *NullableConsensusStateResponseResultRoundStateProposer) Set(val *ConsensusStateResponseResultRoundStateProposer) {
	v.value = val
	v.isSet = true
}

func (v NullableConsensusStateResponseResultRoundStateProposer) IsSet() bool {
	return v.isSet
}

func (v *NullableConsensusStateResponseResultRoundStateProposer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsensusStateResponseResultRoundStateProposer(val *ConsensusStateResponseResultRoundStateProposer) *NullableConsensusStateResponseResultRoundStateProposer {
	return &NullableConsensusStateResponseResultRoundStateProposer{value: val, isSet: true}
}

func (v NullableConsensusStateResponseResultRoundStateProposer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsensusStateResponseResultRoundStateProposer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


