/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// GenesisResponseResultGenesisPubKey struct for GenesisResponseResultGenesisPubKey
type GenesisResponseResultGenesisPubKey struct {
	Type string `json:"type"`
	Value string `json:"value"`
}

// NewGenesisResponseResultGenesisPubKey instantiates a new GenesisResponseResultGenesisPubKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenesisResponseResultGenesisPubKey(type_ string, value string) *GenesisResponseResultGenesisPubKey {
	this := GenesisResponseResultGenesisPubKey{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewGenesisResponseResultGenesisPubKeyWithDefaults instantiates a new GenesisResponseResultGenesisPubKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenesisResponseResultGenesisPubKeyWithDefaults() *GenesisResponseResultGenesisPubKey {
	this := GenesisResponseResultGenesisPubKey{}
	return &this
}

// GetType returns the Type field value
func (o *GenesisResponseResultGenesisPubKey) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GenesisResponseResultGenesisPubKey) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GenesisResponseResultGenesisPubKey) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *GenesisResponseResultGenesisPubKey) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *GenesisResponseResultGenesisPubKey) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *GenesisResponseResultGenesisPubKey) SetValue(v string) {
	o.Value = v
}

func (o GenesisResponseResultGenesisPubKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableGenesisResponseResultGenesisPubKey struct {
	value *GenesisResponseResultGenesisPubKey
	isSet bool
}

func (v NullableGenesisResponseResultGenesisPubKey) Get() *GenesisResponseResultGenesisPubKey {
	return v.value
}

func (v *NullableGenesisResponseResultGenesisPubKey) Set(val *GenesisResponseResultGenesisPubKey) {
	v.value = val
	v.isSet = true
}

func (v NullableGenesisResponseResultGenesisPubKey) IsSet() bool {
	return v.isSet
}

func (v *NullableGenesisResponseResultGenesisPubKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenesisResponseResultGenesisPubKey(val *GenesisResponseResultGenesisPubKey) *NullableGenesisResponseResultGenesisPubKey {
	return &NullableGenesisResponseResultGenesisPubKey{value: val, isSet: true}
}

func (v NullableGenesisResponseResultGenesisPubKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenesisResponseResultGenesisPubKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


