/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ConnectionStatus struct for ConnectionStatus
type ConnectionStatus struct {
	Duration *string `json:"Duration,omitempty"`
	SendMonitor *Monitor `json:"SendMonitor,omitempty"`
	RecvMonitor *Monitor `json:"RecvMonitor,omitempty"`
	Channels *[]Channel `json:"Channels,omitempty"`
}

// NewConnectionStatus instantiates a new ConnectionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionStatus() *ConnectionStatus {
	this := ConnectionStatus{}
	return &this
}

// NewConnectionStatusWithDefaults instantiates a new ConnectionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionStatusWithDefaults() *ConnectionStatus {
	this := ConnectionStatus{}
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ConnectionStatus) GetDuration() string {
	if o == nil || o.Duration == nil {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetDurationOk() (*string, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ConnectionStatus) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *ConnectionStatus) SetDuration(v string) {
	o.Duration = &v
}

// GetSendMonitor returns the SendMonitor field value if set, zero value otherwise.
func (o *ConnectionStatus) GetSendMonitor() Monitor {
	if o == nil || o.SendMonitor == nil {
		var ret Monitor
		return ret
	}
	return *o.SendMonitor
}

// GetSendMonitorOk returns a tuple with the SendMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetSendMonitorOk() (*Monitor, bool) {
	if o == nil || o.SendMonitor == nil {
		return nil, false
	}
	return o.SendMonitor, true
}

// HasSendMonitor returns a boolean if a field has been set.
func (o *ConnectionStatus) HasSendMonitor() bool {
	if o != nil && o.SendMonitor != nil {
		return true
	}

	return false
}

// SetSendMonitor gets a reference to the given Monitor and assigns it to the SendMonitor field.
func (o *ConnectionStatus) SetSendMonitor(v Monitor) {
	o.SendMonitor = &v
}

// GetRecvMonitor returns the RecvMonitor field value if set, zero value otherwise.
func (o *ConnectionStatus) GetRecvMonitor() Monitor {
	if o == nil || o.RecvMonitor == nil {
		var ret Monitor
		return ret
	}
	return *o.RecvMonitor
}

// GetRecvMonitorOk returns a tuple with the RecvMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetRecvMonitorOk() (*Monitor, bool) {
	if o == nil || o.RecvMonitor == nil {
		return nil, false
	}
	return o.RecvMonitor, true
}

// HasRecvMonitor returns a boolean if a field has been set.
func (o *ConnectionStatus) HasRecvMonitor() bool {
	if o != nil && o.RecvMonitor != nil {
		return true
	}

	return false
}

// SetRecvMonitor gets a reference to the given Monitor and assigns it to the RecvMonitor field.
func (o *ConnectionStatus) SetRecvMonitor(v Monitor) {
	o.RecvMonitor = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ConnectionStatus) GetChannels() []Channel {
	if o == nil || o.Channels == nil {
		var ret []Channel
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetChannelsOk() (*[]Channel, bool) {
	if o == nil || o.Channels == nil {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ConnectionStatus) HasChannels() bool {
	if o != nil && o.Channels != nil {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []Channel and assigns it to the Channels field.
func (o *ConnectionStatus) SetChannels(v []Channel) {
	o.Channels = &v
}

func (o ConnectionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Duration != nil {
		toSerialize["Duration"] = o.Duration
	}
	if o.SendMonitor != nil {
		toSerialize["SendMonitor"] = o.SendMonitor
	}
	if o.RecvMonitor != nil {
		toSerialize["RecvMonitor"] = o.RecvMonitor
	}
	if o.Channels != nil {
		toSerialize["Channels"] = o.Channels
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionStatus struct {
	value *ConnectionStatus
	isSet bool
}

func (v NullableConnectionStatus) Get() *ConnectionStatus {
	return v.value
}

func (v *NullableConnectionStatus) Set(val *ConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionStatus(val *ConnectionStatus) *NullableConnectionStatus {
	return &NullableConnectionStatus{value: val, isSet: true}
}

func (v NullableConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


