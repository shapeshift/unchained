/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Channel struct for Channel
type Channel struct {
	ID *int32 `json:"ID,omitempty"`
	SendQueueCapacity *string `json:"SendQueueCapacity,omitempty"`
	SendQueueSize *string `json:"SendQueueSize,omitempty"`
	Priority *string `json:"Priority,omitempty"`
	RecentlySent *string `json:"RecentlySent,omitempty"`
}

// NewChannel instantiates a new Channel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannel() *Channel {
	this := Channel{}
	return &this
}

// NewChannelWithDefaults instantiates a new Channel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelWithDefaults() *Channel {
	this := Channel{}
	return &this
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *Channel) GetID() int32 {
	if o == nil || o.ID == nil {
		var ret int32
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetIDOk() (*int32, bool) {
	if o == nil || o.ID == nil {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *Channel) HasID() bool {
	if o != nil && o.ID != nil {
		return true
	}

	return false
}

// SetID gets a reference to the given int32 and assigns it to the ID field.
func (o *Channel) SetID(v int32) {
	o.ID = &v
}

// GetSendQueueCapacity returns the SendQueueCapacity field value if set, zero value otherwise.
func (o *Channel) GetSendQueueCapacity() string {
	if o == nil || o.SendQueueCapacity == nil {
		var ret string
		return ret
	}
	return *o.SendQueueCapacity
}

// GetSendQueueCapacityOk returns a tuple with the SendQueueCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetSendQueueCapacityOk() (*string, bool) {
	if o == nil || o.SendQueueCapacity == nil {
		return nil, false
	}
	return o.SendQueueCapacity, true
}

// HasSendQueueCapacity returns a boolean if a field has been set.
func (o *Channel) HasSendQueueCapacity() bool {
	if o != nil && o.SendQueueCapacity != nil {
		return true
	}

	return false
}

// SetSendQueueCapacity gets a reference to the given string and assigns it to the SendQueueCapacity field.
func (o *Channel) SetSendQueueCapacity(v string) {
	o.SendQueueCapacity = &v
}

// GetSendQueueSize returns the SendQueueSize field value if set, zero value otherwise.
func (o *Channel) GetSendQueueSize() string {
	if o == nil || o.SendQueueSize == nil {
		var ret string
		return ret
	}
	return *o.SendQueueSize
}

// GetSendQueueSizeOk returns a tuple with the SendQueueSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetSendQueueSizeOk() (*string, bool) {
	if o == nil || o.SendQueueSize == nil {
		return nil, false
	}
	return o.SendQueueSize, true
}

// HasSendQueueSize returns a boolean if a field has been set.
func (o *Channel) HasSendQueueSize() bool {
	if o != nil && o.SendQueueSize != nil {
		return true
	}

	return false
}

// SetSendQueueSize gets a reference to the given string and assigns it to the SendQueueSize field.
func (o *Channel) SetSendQueueSize(v string) {
	o.SendQueueSize = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Channel) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Channel) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *Channel) SetPriority(v string) {
	o.Priority = &v
}

// GetRecentlySent returns the RecentlySent field value if set, zero value otherwise.
func (o *Channel) GetRecentlySent() string {
	if o == nil || o.RecentlySent == nil {
		var ret string
		return ret
	}
	return *o.RecentlySent
}

// GetRecentlySentOk returns a tuple with the RecentlySent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Channel) GetRecentlySentOk() (*string, bool) {
	if o == nil || o.RecentlySent == nil {
		return nil, false
	}
	return o.RecentlySent, true
}

// HasRecentlySent returns a boolean if a field has been set.
func (o *Channel) HasRecentlySent() bool {
	if o != nil && o.RecentlySent != nil {
		return true
	}

	return false
}

// SetRecentlySent gets a reference to the given string and assigns it to the RecentlySent field.
func (o *Channel) SetRecentlySent(v string) {
	o.RecentlySent = &v
}

func (o Channel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ID != nil {
		toSerialize["ID"] = o.ID
	}
	if o.SendQueueCapacity != nil {
		toSerialize["SendQueueCapacity"] = o.SendQueueCapacity
	}
	if o.SendQueueSize != nil {
		toSerialize["SendQueueSize"] = o.SendQueueSize
	}
	if o.Priority != nil {
		toSerialize["Priority"] = o.Priority
	}
	if o.RecentlySent != nil {
		toSerialize["RecentlySent"] = o.RecentlySent
	}
	return json.Marshal(toSerialize)
}

type NullableChannel struct {
	value *Channel
	isSet bool
}

func (v NullableChannel) Get() *Channel {
	return v.value
}

func (v *NullableChannel) Set(val *Channel) {
	v.value = val
	v.isSet = true
}

func (v NullableChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannel(val *Channel) *NullableChannel {
	return &NullableChannel{value: val, isSet: true}
}

func (v NullableChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


