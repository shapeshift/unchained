/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NodeInfo struct for NodeInfo
type NodeInfo struct {
	ProtocolVersion *ProtocolVersion `json:"protocol_version,omitempty"`
	Id *string `json:"id,omitempty"`
	ListenAddr *string `json:"listen_addr,omitempty"`
	Network *string `json:"network,omitempty"`
	Version *string `json:"version,omitempty"`
	Channels *string `json:"channels,omitempty"`
	Moniker *string `json:"moniker,omitempty"`
	Other *NodeInfoOther `json:"other,omitempty"`
}

// NewNodeInfo instantiates a new NodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInfo() *NodeInfo {
	this := NodeInfo{}
	return &this
}

// NewNodeInfoWithDefaults instantiates a new NodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInfoWithDefaults() *NodeInfo {
	this := NodeInfo{}
	return &this
}

// GetProtocolVersion returns the ProtocolVersion field value if set, zero value otherwise.
func (o *NodeInfo) GetProtocolVersion() ProtocolVersion {
	if o == nil || o.ProtocolVersion == nil {
		var ret ProtocolVersion
		return ret
	}
	return *o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetProtocolVersionOk() (*ProtocolVersion, bool) {
	if o == nil || o.ProtocolVersion == nil {
		return nil, false
	}
	return o.ProtocolVersion, true
}

// HasProtocolVersion returns a boolean if a field has been set.
func (o *NodeInfo) HasProtocolVersion() bool {
	if o != nil && o.ProtocolVersion != nil {
		return true
	}

	return false
}

// SetProtocolVersion gets a reference to the given ProtocolVersion and assigns it to the ProtocolVersion field.
func (o *NodeInfo) SetProtocolVersion(v ProtocolVersion) {
	o.ProtocolVersion = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NodeInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NodeInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NodeInfo) SetId(v string) {
	o.Id = &v
}

// GetListenAddr returns the ListenAddr field value if set, zero value otherwise.
func (o *NodeInfo) GetListenAddr() string {
	if o == nil || o.ListenAddr == nil {
		var ret string
		return ret
	}
	return *o.ListenAddr
}

// GetListenAddrOk returns a tuple with the ListenAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetListenAddrOk() (*string, bool) {
	if o == nil || o.ListenAddr == nil {
		return nil, false
	}
	return o.ListenAddr, true
}

// HasListenAddr returns a boolean if a field has been set.
func (o *NodeInfo) HasListenAddr() bool {
	if o != nil && o.ListenAddr != nil {
		return true
	}

	return false
}

// SetListenAddr gets a reference to the given string and assigns it to the ListenAddr field.
func (o *NodeInfo) SetListenAddr(v string) {
	o.ListenAddr = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *NodeInfo) GetNetwork() string {
	if o == nil || o.Network == nil {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetNetworkOk() (*string, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *NodeInfo) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *NodeInfo) SetNetwork(v string) {
	o.Network = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NodeInfo) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NodeInfo) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NodeInfo) SetVersion(v string) {
	o.Version = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *NodeInfo) GetChannels() string {
	if o == nil || o.Channels == nil {
		var ret string
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetChannelsOk() (*string, bool) {
	if o == nil || o.Channels == nil {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *NodeInfo) HasChannels() bool {
	if o != nil && o.Channels != nil {
		return true
	}

	return false
}

// SetChannels gets a reference to the given string and assigns it to the Channels field.
func (o *NodeInfo) SetChannels(v string) {
	o.Channels = &v
}

// GetMoniker returns the Moniker field value if set, zero value otherwise.
func (o *NodeInfo) GetMoniker() string {
	if o == nil || o.Moniker == nil {
		var ret string
		return ret
	}
	return *o.Moniker
}

// GetMonikerOk returns a tuple with the Moniker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetMonikerOk() (*string, bool) {
	if o == nil || o.Moniker == nil {
		return nil, false
	}
	return o.Moniker, true
}

// HasMoniker returns a boolean if a field has been set.
func (o *NodeInfo) HasMoniker() bool {
	if o != nil && o.Moniker != nil {
		return true
	}

	return false
}

// SetMoniker gets a reference to the given string and assigns it to the Moniker field.
func (o *NodeInfo) SetMoniker(v string) {
	o.Moniker = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *NodeInfo) GetOther() NodeInfoOther {
	if o == nil || o.Other == nil {
		var ret NodeInfoOther
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetOtherOk() (*NodeInfoOther, bool) {
	if o == nil || o.Other == nil {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *NodeInfo) HasOther() bool {
	if o != nil && o.Other != nil {
		return true
	}

	return false
}

// SetOther gets a reference to the given NodeInfoOther and assigns it to the Other field.
func (o *NodeInfo) SetOther(v NodeInfoOther) {
	o.Other = &v
}

func (o NodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProtocolVersion != nil {
		toSerialize["protocol_version"] = o.ProtocolVersion
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ListenAddr != nil {
		toSerialize["listen_addr"] = o.ListenAddr
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Channels != nil {
		toSerialize["channels"] = o.Channels
	}
	if o.Moniker != nil {
		toSerialize["moniker"] = o.Moniker
	}
	if o.Other != nil {
		toSerialize["other"] = o.Other
	}
	return json.Marshal(toSerialize)
}

type NullableNodeInfo struct {
	value *NodeInfo
	isSet bool
}

func (v NullableNodeInfo) Get() *NodeInfo {
	return v.value
}

func (v *NullableNodeInfo) Set(val *NodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInfo(val *NodeInfo) *NullableNodeInfo {
	return &NullableNodeInfo{value: val, isSet: true}
}

func (v NullableNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


