/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Block struct for Block
type Block struct {
	Header *BlockHeader `json:"header,omitempty"`
	Data *[]string `json:"data,omitempty"`
	Evidence *[]Evidence `json:"evidence,omitempty"`
	LastCommit *BlockLastCommit `json:"last_commit,omitempty"`
}

// NewBlock instantiates a new Block object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlock() *Block {
	this := Block{}
	return &this
}

// NewBlockWithDefaults instantiates a new Block object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockWithDefaults() *Block {
	this := Block{}
	return &this
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *Block) GetHeader() BlockHeader {
	if o == nil || o.Header == nil {
		var ret BlockHeader
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetHeaderOk() (*BlockHeader, bool) {
	if o == nil || o.Header == nil {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *Block) HasHeader() bool {
	if o != nil && o.Header != nil {
		return true
	}

	return false
}

// SetHeader gets a reference to the given BlockHeader and assigns it to the Header field.
func (o *Block) SetHeader(v BlockHeader) {
	o.Header = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Block) GetData() []string {
	if o == nil || o.Data == nil {
		var ret []string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetDataOk() (*[]string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Block) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []string and assigns it to the Data field.
func (o *Block) SetData(v []string) {
	o.Data = &v
}

// GetEvidence returns the Evidence field value if set, zero value otherwise.
func (o *Block) GetEvidence() []Evidence {
	if o == nil || o.Evidence == nil {
		var ret []Evidence
		return ret
	}
	return *o.Evidence
}

// GetEvidenceOk returns a tuple with the Evidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetEvidenceOk() (*[]Evidence, bool) {
	if o == nil || o.Evidence == nil {
		return nil, false
	}
	return o.Evidence, true
}

// HasEvidence returns a boolean if a field has been set.
func (o *Block) HasEvidence() bool {
	if o != nil && o.Evidence != nil {
		return true
	}

	return false
}

// SetEvidence gets a reference to the given []Evidence and assigns it to the Evidence field.
func (o *Block) SetEvidence(v []Evidence) {
	o.Evidence = &v
}

// GetLastCommit returns the LastCommit field value if set, zero value otherwise.
func (o *Block) GetLastCommit() BlockLastCommit {
	if o == nil || o.LastCommit == nil {
		var ret BlockLastCommit
		return ret
	}
	return *o.LastCommit
}

// GetLastCommitOk returns a tuple with the LastCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetLastCommitOk() (*BlockLastCommit, bool) {
	if o == nil || o.LastCommit == nil {
		return nil, false
	}
	return o.LastCommit, true
}

// HasLastCommit returns a boolean if a field has been set.
func (o *Block) HasLastCommit() bool {
	if o != nil && o.LastCommit != nil {
		return true
	}

	return false
}

// SetLastCommit gets a reference to the given BlockLastCommit and assigns it to the LastCommit field.
func (o *Block) SetLastCommit(v BlockLastCommit) {
	o.LastCommit = &v
}

func (o Block) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Header != nil {
		toSerialize["header"] = o.Header
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Evidence != nil {
		toSerialize["evidence"] = o.Evidence
	}
	if o.LastCommit != nil {
		toSerialize["last_commit"] = o.LastCommit
	}
	return json.Marshal(toSerialize)
}

type NullableBlock struct {
	value *Block
	isSet bool
}

func (v NullableBlock) Get() *Block {
	return v.value
}

func (v *NullableBlock) Set(val *Block) {
	v.value = val
	v.isSet = true
}

func (v NullableBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlock(val *Block) *NullableBlock {
	return &NullableBlock{value: val, isSet: true}
}

func (v NullableBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


