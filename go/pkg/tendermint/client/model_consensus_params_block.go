/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ConsensusParamsBlock struct for ConsensusParamsBlock
type ConsensusParamsBlock struct {
	MaxBytes string `json:"max_bytes"`
	MaxGas string `json:"max_gas"`
	TimeIotaMs string `json:"time_iota_ms"`
}

// NewConsensusParamsBlock instantiates a new ConsensusParamsBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsensusParamsBlock(maxBytes string, maxGas string, timeIotaMs string) *ConsensusParamsBlock {
	this := ConsensusParamsBlock{}
	this.MaxBytes = maxBytes
	this.MaxGas = maxGas
	this.TimeIotaMs = timeIotaMs
	return &this
}

// NewConsensusParamsBlockWithDefaults instantiates a new ConsensusParamsBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsensusParamsBlockWithDefaults() *ConsensusParamsBlock {
	this := ConsensusParamsBlock{}
	return &this
}

// GetMaxBytes returns the MaxBytes field value
func (o *ConsensusParamsBlock) GetMaxBytes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxBytes
}

// GetMaxBytesOk returns a tuple with the MaxBytes field value
// and a boolean to check if the value has been set.
func (o *ConsensusParamsBlock) GetMaxBytesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MaxBytes, true
}

// SetMaxBytes sets field value
func (o *ConsensusParamsBlock) SetMaxBytes(v string) {
	o.MaxBytes = v
}

// GetMaxGas returns the MaxGas field value
func (o *ConsensusParamsBlock) GetMaxGas() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxGas
}

// GetMaxGasOk returns a tuple with the MaxGas field value
// and a boolean to check if the value has been set.
func (o *ConsensusParamsBlock) GetMaxGasOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MaxGas, true
}

// SetMaxGas sets field value
func (o *ConsensusParamsBlock) SetMaxGas(v string) {
	o.MaxGas = v
}

// GetTimeIotaMs returns the TimeIotaMs field value
func (o *ConsensusParamsBlock) GetTimeIotaMs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeIotaMs
}

// GetTimeIotaMsOk returns a tuple with the TimeIotaMs field value
// and a boolean to check if the value has been set.
func (o *ConsensusParamsBlock) GetTimeIotaMsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TimeIotaMs, true
}

// SetTimeIotaMs sets field value
func (o *ConsensusParamsBlock) SetTimeIotaMs(v string) {
	o.TimeIotaMs = v
}

func (o ConsensusParamsBlock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["max_bytes"] = o.MaxBytes
	}
	if true {
		toSerialize["max_gas"] = o.MaxGas
	}
	if true {
		toSerialize["time_iota_ms"] = o.TimeIotaMs
	}
	return json.Marshal(toSerialize)
}

type NullableConsensusParamsBlock struct {
	value *ConsensusParamsBlock
	isSet bool
}

func (v NullableConsensusParamsBlock) Get() *ConsensusParamsBlock {
	return v.value
}

func (v *NullableConsensusParamsBlock) Set(val *ConsensusParamsBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableConsensusParamsBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableConsensusParamsBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsensusParamsBlock(val *ConsensusParamsBlock) *NullableConsensusParamsBlock {
	return &NullableConsensusParamsBlock{value: val, isSet: true}
}

func (v NullableConsensusParamsBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsensusParamsBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


