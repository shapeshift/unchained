/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CommitResponseResultSignedHeaderCommit struct for CommitResponseResultSignedHeaderCommit
type CommitResponseResultSignedHeaderCommit struct {
	Height string `json:"height"`
	Round int32 `json:"round"`
	BlockId BlockID `json:"block_id"`
	Signatures []CommitResponseResultSignedHeaderCommitSignatures `json:"signatures"`
}

// NewCommitResponseResultSignedHeaderCommit instantiates a new CommitResponseResultSignedHeaderCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitResponseResultSignedHeaderCommit(height string, round int32, blockId BlockID, signatures []CommitResponseResultSignedHeaderCommitSignatures) *CommitResponseResultSignedHeaderCommit {
	this := CommitResponseResultSignedHeaderCommit{}
	this.Height = height
	this.Round = round
	this.BlockId = blockId
	this.Signatures = signatures
	return &this
}

// NewCommitResponseResultSignedHeaderCommitWithDefaults instantiates a new CommitResponseResultSignedHeaderCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitResponseResultSignedHeaderCommitWithDefaults() *CommitResponseResultSignedHeaderCommit {
	this := CommitResponseResultSignedHeaderCommit{}
	return &this
}

// GetHeight returns the Height field value
func (o *CommitResponseResultSignedHeaderCommit) GetHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeaderCommit) GetHeightOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *CommitResponseResultSignedHeaderCommit) SetHeight(v string) {
	o.Height = v
}

// GetRound returns the Round field value
func (o *CommitResponseResultSignedHeaderCommit) GetRound() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Round
}

// GetRoundOk returns a tuple with the Round field value
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeaderCommit) GetRoundOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Round, true
}

// SetRound sets field value
func (o *CommitResponseResultSignedHeaderCommit) SetRound(v int32) {
	o.Round = v
}

// GetBlockId returns the BlockId field value
func (o *CommitResponseResultSignedHeaderCommit) GetBlockId() BlockID {
	if o == nil {
		var ret BlockID
		return ret
	}

	return o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeaderCommit) GetBlockIdOk() (*BlockID, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BlockId, true
}

// SetBlockId sets field value
func (o *CommitResponseResultSignedHeaderCommit) SetBlockId(v BlockID) {
	o.BlockId = v
}

// GetSignatures returns the Signatures field value
func (o *CommitResponseResultSignedHeaderCommit) GetSignatures() []CommitResponseResultSignedHeaderCommitSignatures {
	if o == nil {
		var ret []CommitResponseResultSignedHeaderCommitSignatures
		return ret
	}

	return o.Signatures
}

// GetSignaturesOk returns a tuple with the Signatures field value
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeaderCommit) GetSignaturesOk() (*[]CommitResponseResultSignedHeaderCommitSignatures, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Signatures, true
}

// SetSignatures sets field value
func (o *CommitResponseResultSignedHeaderCommit) SetSignatures(v []CommitResponseResultSignedHeaderCommitSignatures) {
	o.Signatures = v
}

func (o CommitResponseResultSignedHeaderCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["height"] = o.Height
	}
	if true {
		toSerialize["round"] = o.Round
	}
	if true {
		toSerialize["block_id"] = o.BlockId
	}
	if true {
		toSerialize["signatures"] = o.Signatures
	}
	return json.Marshal(toSerialize)
}

type NullableCommitResponseResultSignedHeaderCommit struct {
	value *CommitResponseResultSignedHeaderCommit
	isSet bool
}

func (v NullableCommitResponseResultSignedHeaderCommit) Get() *CommitResponseResultSignedHeaderCommit {
	return v.value
}

func (v *NullableCommitResponseResultSignedHeaderCommit) Set(val *CommitResponseResultSignedHeaderCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitResponseResultSignedHeaderCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitResponseResultSignedHeaderCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitResponseResultSignedHeaderCommit(val *CommitResponseResultSignedHeaderCommit) *NullableCommitResponseResultSignedHeaderCommit {
	return &NullableCommitResponseResultSignedHeaderCommit{value: val, isSet: true}
}

func (v NullableCommitResponseResultSignedHeaderCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitResponseResultSignedHeaderCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


