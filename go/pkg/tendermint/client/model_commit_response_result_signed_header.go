/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CommitResponseResultSignedHeader struct for CommitResponseResultSignedHeader
type CommitResponseResultSignedHeader struct {
	Header BlockHeader `json:"header"`
	Commit CommitResponseResultSignedHeaderCommit `json:"commit"`
}

// NewCommitResponseResultSignedHeader instantiates a new CommitResponseResultSignedHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitResponseResultSignedHeader(header BlockHeader, commit CommitResponseResultSignedHeaderCommit) *CommitResponseResultSignedHeader {
	this := CommitResponseResultSignedHeader{}
	this.Header = header
	this.Commit = commit
	return &this
}

// NewCommitResponseResultSignedHeaderWithDefaults instantiates a new CommitResponseResultSignedHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitResponseResultSignedHeaderWithDefaults() *CommitResponseResultSignedHeader {
	this := CommitResponseResultSignedHeader{}
	return &this
}

// GetHeader returns the Header field value
func (o *CommitResponseResultSignedHeader) GetHeader() BlockHeader {
	if o == nil {
		var ret BlockHeader
		return ret
	}

	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeader) GetHeaderOk() (*BlockHeader, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Header, true
}

// SetHeader sets field value
func (o *CommitResponseResultSignedHeader) SetHeader(v BlockHeader) {
	o.Header = v
}

// GetCommit returns the Commit field value
func (o *CommitResponseResultSignedHeader) GetCommit() CommitResponseResultSignedHeaderCommit {
	if o == nil {
		var ret CommitResponseResultSignedHeaderCommit
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeader) GetCommitOk() (*CommitResponseResultSignedHeaderCommit, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *CommitResponseResultSignedHeader) SetCommit(v CommitResponseResultSignedHeaderCommit) {
	o.Commit = v
}

func (o CommitResponseResultSignedHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["header"] = o.Header
	}
	if true {
		toSerialize["commit"] = o.Commit
	}
	return json.Marshal(toSerialize)
}

type NullableCommitResponseResultSignedHeader struct {
	value *CommitResponseResultSignedHeader
	isSet bool
}

func (v NullableCommitResponseResultSignedHeader) Get() *CommitResponseResultSignedHeader {
	return v.value
}

func (v *NullableCommitResponseResultSignedHeader) Set(val *CommitResponseResultSignedHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitResponseResultSignedHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitResponseResultSignedHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitResponseResultSignedHeader(val *CommitResponseResultSignedHeader) *NullableCommitResponseResultSignedHeader {
	return &NullableCommitResponseResultSignedHeader{value: val, isSet: true}
}

func (v NullableCommitResponseResultSignedHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitResponseResultSignedHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


