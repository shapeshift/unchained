/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CheckTxResponseResult struct for CheckTxResponseResult
type CheckTxResponseResult struct {
	Code string `json:"code"`
	Data string `json:"data"`
	Log string `json:"log"`
	Info *string `json:"info,omitempty"`
	GasWanted *string `json:"gas_wanted,omitempty"`
	GasUsed *string `json:"gas_used,omitempty"`
	Events []BlockResultsResponseResultEvents `json:"events,omitempty"`
	Codespace *string `json:"codespace,omitempty"`
}

// NewCheckTxResponseResult instantiates a new CheckTxResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckTxResponseResult(code string, data string, log string) *CheckTxResponseResult {
	this := CheckTxResponseResult{}
	this.Code = code
	this.Data = data
	this.Log = log
	return &this
}

// NewCheckTxResponseResultWithDefaults instantiates a new CheckTxResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckTxResponseResultWithDefaults() *CheckTxResponseResult {
	this := CheckTxResponseResult{}
	return &this
}

// GetCode returns the Code field value
func (o *CheckTxResponseResult) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CheckTxResponseResult) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CheckTxResponseResult) SetCode(v string) {
	o.Code = v
}

// GetData returns the Data field value
func (o *CheckTxResponseResult) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CheckTxResponseResult) GetDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CheckTxResponseResult) SetData(v string) {
	o.Data = v
}

// GetLog returns the Log field value
func (o *CheckTxResponseResult) GetLog() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Log
}

// GetLogOk returns a tuple with the Log field value
// and a boolean to check if the value has been set.
func (o *CheckTxResponseResult) GetLogOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Log, true
}

// SetLog sets field value
func (o *CheckTxResponseResult) SetLog(v string) {
	o.Log = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CheckTxResponseResult) GetInfo() string {
	if o == nil || o.Info == nil {
		var ret string
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckTxResponseResult) GetInfoOk() (*string, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CheckTxResponseResult) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given string and assigns it to the Info field.
func (o *CheckTxResponseResult) SetInfo(v string) {
	o.Info = &v
}

// GetGasWanted returns the GasWanted field value if set, zero value otherwise.
func (o *CheckTxResponseResult) GetGasWanted() string {
	if o == nil || o.GasWanted == nil {
		var ret string
		return ret
	}
	return *o.GasWanted
}

// GetGasWantedOk returns a tuple with the GasWanted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckTxResponseResult) GetGasWantedOk() (*string, bool) {
	if o == nil || o.GasWanted == nil {
		return nil, false
	}
	return o.GasWanted, true
}

// HasGasWanted returns a boolean if a field has been set.
func (o *CheckTxResponseResult) HasGasWanted() bool {
	if o != nil && o.GasWanted != nil {
		return true
	}

	return false
}

// SetGasWanted gets a reference to the given string and assigns it to the GasWanted field.
func (o *CheckTxResponseResult) SetGasWanted(v string) {
	o.GasWanted = &v
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise.
func (o *CheckTxResponseResult) GetGasUsed() string {
	if o == nil || o.GasUsed == nil {
		var ret string
		return ret
	}
	return *o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckTxResponseResult) GetGasUsedOk() (*string, bool) {
	if o == nil || o.GasUsed == nil {
		return nil, false
	}
	return o.GasUsed, true
}

// HasGasUsed returns a boolean if a field has been set.
func (o *CheckTxResponseResult) HasGasUsed() bool {
	if o != nil && o.GasUsed != nil {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given string and assigns it to the GasUsed field.
func (o *CheckTxResponseResult) SetGasUsed(v string) {
	o.GasUsed = &v
}

// GetEvents returns the Events field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckTxResponseResult) GetEvents() []BlockResultsResponseResultEvents {
	if o == nil  {
		var ret []BlockResultsResponseResultEvents
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckTxResponseResult) GetEventsOk() (*[]BlockResultsResponseResultEvents, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return &o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *CheckTxResponseResult) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []BlockResultsResponseResultEvents and assigns it to the Events field.
func (o *CheckTxResponseResult) SetEvents(v []BlockResultsResponseResultEvents) {
	o.Events = v
}

// GetCodespace returns the Codespace field value if set, zero value otherwise.
func (o *CheckTxResponseResult) GetCodespace() string {
	if o == nil || o.Codespace == nil {
		var ret string
		return ret
	}
	return *o.Codespace
}

// GetCodespaceOk returns a tuple with the Codespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckTxResponseResult) GetCodespaceOk() (*string, bool) {
	if o == nil || o.Codespace == nil {
		return nil, false
	}
	return o.Codespace, true
}

// HasCodespace returns a boolean if a field has been set.
func (o *CheckTxResponseResult) HasCodespace() bool {
	if o != nil && o.Codespace != nil {
		return true
	}

	return false
}

// SetCodespace gets a reference to the given string and assigns it to the Codespace field.
func (o *CheckTxResponseResult) SetCodespace(v string) {
	o.Codespace = &v
}

func (o CheckTxResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["log"] = o.Log
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.GasWanted != nil {
		toSerialize["gas_wanted"] = o.GasWanted
	}
	if o.GasUsed != nil {
		toSerialize["gas_used"] = o.GasUsed
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Codespace != nil {
		toSerialize["codespace"] = o.Codespace
	}
	return json.Marshal(toSerialize)
}

type NullableCheckTxResponseResult struct {
	value *CheckTxResponseResult
	isSet bool
}

func (v NullableCheckTxResponseResult) Get() *CheckTxResponseResult {
	return v.value
}

func (v *NullableCheckTxResponseResult) Set(val *CheckTxResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckTxResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckTxResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckTxResponseResult(val *CheckTxResponseResult) *NullableCheckTxResponseResult {
	return &NullableCheckTxResponseResult{value: val, isSet: true}
}

func (v NullableCheckTxResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckTxResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


