/*
Tendermint RPC

Tendermint supports the following RPC protocols:  * URI over HTTP * JSONRPC over HTTP * JSONRPC over websockets  ## Configuration  RPC can be configured by tuning parameters under `[rpc]` table in the `$TMHOME/config/config.toml` file or by using the `--rpc.X` command-line flags.  Default rpc listen address is `tcp://0.0.0.0:26657`. To set another address, set the `laddr` config parameter to desired value. CORS (Cross-Origin Resource Sharing) can be enabled by setting `cors_allowed_origins`, `cors_allowed_methods`, `cors_allowed_headers` config parameters.  ## Arguments  Arguments which expect strings or byte arrays may be passed as quoted strings, like `\"abc\"` or as `0x`-prefixed strings, like `0x616263`.  ## URI/HTTP  A REST like interface.      curl localhost:26657/block?height=5  ## JSONRPC/HTTP  JSONRPC requests can be POST'd to the root RPC endpoint via HTTP.      curl --header \"Content-Type: application/json\" --request POST --data '{\"method\": \"block\", \"params\": [\"5\"], \"id\": 1}' localhost:26657  ## JSONRPC/websockets  JSONRPC requests can be also made via websocket. The websocket endpoint is at `/websocket`, e.g. `localhost:26657/websocket`. Asynchronous RPC functions like event `subscribe` and `unsubscribe` are only available via websockets.  Example using https://github.com/hashrocket/ws:      ws ws://localhost:26657/websocket     > { \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"tm.event='NewBlock'\"], \"id\": 1 } 

API version: Master
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CommitResponseResultSignedHeaderCommitSignatures struct for CommitResponseResultSignedHeaderCommitSignatures
type CommitResponseResultSignedHeaderCommitSignatures struct {
	BlockIdFlag *int32 `json:"block_id_flag,omitempty"`
	ValidatorAddress *string `json:"validator_address,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Signature *string `json:"signature,omitempty"`
}

// NewCommitResponseResultSignedHeaderCommitSignatures instantiates a new CommitResponseResultSignedHeaderCommitSignatures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitResponseResultSignedHeaderCommitSignatures() *CommitResponseResultSignedHeaderCommitSignatures {
	this := CommitResponseResultSignedHeaderCommitSignatures{}
	return &this
}

// NewCommitResponseResultSignedHeaderCommitSignaturesWithDefaults instantiates a new CommitResponseResultSignedHeaderCommitSignatures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitResponseResultSignedHeaderCommitSignaturesWithDefaults() *CommitResponseResultSignedHeaderCommitSignatures {
	this := CommitResponseResultSignedHeaderCommitSignatures{}
	return &this
}

// GetBlockIdFlag returns the BlockIdFlag field value if set, zero value otherwise.
func (o *CommitResponseResultSignedHeaderCommitSignatures) GetBlockIdFlag() int32 {
	if o == nil || o.BlockIdFlag == nil {
		var ret int32
		return ret
	}
	return *o.BlockIdFlag
}

// GetBlockIdFlagOk returns a tuple with the BlockIdFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeaderCommitSignatures) GetBlockIdFlagOk() (*int32, bool) {
	if o == nil || o.BlockIdFlag == nil {
		return nil, false
	}
	return o.BlockIdFlag, true
}

// HasBlockIdFlag returns a boolean if a field has been set.
func (o *CommitResponseResultSignedHeaderCommitSignatures) HasBlockIdFlag() bool {
	if o != nil && o.BlockIdFlag != nil {
		return true
	}

	return false
}

// SetBlockIdFlag gets a reference to the given int32 and assigns it to the BlockIdFlag field.
func (o *CommitResponseResultSignedHeaderCommitSignatures) SetBlockIdFlag(v int32) {
	o.BlockIdFlag = &v
}

// GetValidatorAddress returns the ValidatorAddress field value if set, zero value otherwise.
func (o *CommitResponseResultSignedHeaderCommitSignatures) GetValidatorAddress() string {
	if o == nil || o.ValidatorAddress == nil {
		var ret string
		return ret
	}
	return *o.ValidatorAddress
}

// GetValidatorAddressOk returns a tuple with the ValidatorAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeaderCommitSignatures) GetValidatorAddressOk() (*string, bool) {
	if o == nil || o.ValidatorAddress == nil {
		return nil, false
	}
	return o.ValidatorAddress, true
}

// HasValidatorAddress returns a boolean if a field has been set.
func (o *CommitResponseResultSignedHeaderCommitSignatures) HasValidatorAddress() bool {
	if o != nil && o.ValidatorAddress != nil {
		return true
	}

	return false
}

// SetValidatorAddress gets a reference to the given string and assigns it to the ValidatorAddress field.
func (o *CommitResponseResultSignedHeaderCommitSignatures) SetValidatorAddress(v string) {
	o.ValidatorAddress = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CommitResponseResultSignedHeaderCommitSignatures) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeaderCommitSignatures) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CommitResponseResultSignedHeaderCommitSignatures) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *CommitResponseResultSignedHeaderCommitSignatures) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *CommitResponseResultSignedHeaderCommitSignatures) GetSignature() string {
	if o == nil || o.Signature == nil {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitResponseResultSignedHeaderCommitSignatures) GetSignatureOk() (*string, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *CommitResponseResultSignedHeaderCommitSignatures) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *CommitResponseResultSignedHeaderCommitSignatures) SetSignature(v string) {
	o.Signature = &v
}

func (o CommitResponseResultSignedHeaderCommitSignatures) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlockIdFlag != nil {
		toSerialize["block_id_flag"] = o.BlockIdFlag
	}
	if o.ValidatorAddress != nil {
		toSerialize["validator_address"] = o.ValidatorAddress
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Signature != nil {
		toSerialize["signature"] = o.Signature
	}
	return json.Marshal(toSerialize)
}

type NullableCommitResponseResultSignedHeaderCommitSignatures struct {
	value *CommitResponseResultSignedHeaderCommitSignatures
	isSet bool
}

func (v NullableCommitResponseResultSignedHeaderCommitSignatures) Get() *CommitResponseResultSignedHeaderCommitSignatures {
	return v.value
}

func (v *NullableCommitResponseResultSignedHeaderCommitSignatures) Set(val *CommitResponseResultSignedHeaderCommitSignatures) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitResponseResultSignedHeaderCommitSignatures) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitResponseResultSignedHeaderCommitSignatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitResponseResultSignedHeaderCommitSignatures(val *CommitResponseResultSignedHeaderCommitSignatures) *NullableCommitResponseResultSignedHeaderCommitSignatures {
	return &NullableCommitResponseResultSignedHeaderCommitSignatures{value: val, isSet: true}
}

func (v NullableCommitResponseResultSignedHeaderCommitSignatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitResponseResultSignedHeaderCommitSignatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


