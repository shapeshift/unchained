/* tslint:disable */
/* eslint-disable */
/**
 * @shapeshiftoss/bitcoin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Contains info about a 400 Bad Request response
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * 
     * @type {string}
     * @memberof BadRequestError
     */
    error: string;
}
/**
 * Contains info about balance by pubkey (address or xpub)
 * @export
 * @interface Balance
 */
export interface Balance {
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    pubkey: string;
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    balance: string;
}
/**
 * Contains additional bitcoin specific balance info
 * @export
 * @interface BitcoinBalance
 */
export interface BitcoinBalance {
    /**
     * 
     * @type {string}
     * @memberof BitcoinBalance
     */
    pubkey: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinBalance
     */
    balance: string;
    /**
     * 
     * @type {Array<Balance>}
     * @memberof BitcoinBalance
     */
    addresses?: Array<Balance>;
}
/**
 * Contains info about a 500 Internal Server Error response
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    message: string;
}
/**
 * Contains the serialized raw transaction hex
 * @export
 * @interface SendTxBody
 */
export interface SendTxBody {
    /**
     * 
     * @type {string}
     * @memberof SendTxBody
     */
    hex: string;
}
/**
 * Contains info about a transaction
 * @export
 * @interface Tx
 */
export interface Tx {
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    blockHash?: string;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    blockHeight?: number;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    confirmations?: number;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    timestamp?: number;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    to?: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    fee: string;
}
/**
 * Contains paginated transaction history
 * @export
 * @interface TxHistory
 */
export interface TxHistory {
    /**
     * 
     * @type {number}
     * @memberof TxHistory
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof TxHistory
     */
    totalPages: number;
    /**
     * 
     * @type {number}
     * @memberof TxHistory
     */
    txs: number;
    /**
     * 
     * @type {Array<Tx>}
     * @memberof TxHistory
     */
    transactions: Array<Tx>;
}
/**
 * Contains info about an unspent transaction output
 * @export
 * @interface Utxo
 */
export interface Utxo {
    /**
     * 
     * @type {string}
     * @memberof Utxo
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof Utxo
     */
    confirmations: number;
    /**
     * 
     * @type {string}
     * @memberof Utxo
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof Utxo
     */
    value: string;
    /**
     * 
     * @type {number}
     * @memberof Utxo
     */
    vout: number;
}
/**
 * Contains info about a 422 Validation Error response
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    message: ValidationErrorMessageEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ValidationError
     */
    details: { [key: string]: any; };
}

/**
    * @export
    * @enum {string}
    */
export enum ValidationErrorMessageEnum {
    ValidationFailed = 'Validation failed'
}


/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get balance of a pubkey  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account pubkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalance: async (pubkey: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubkey' is not null or undefined
            assertParamExists('getBalance', 'pubkey', pubkey)
            const localVarPath = `/api/v1/balance/{pubkey}`
                .replace(`{${"pubkey"}}`, encodeURIComponent(String(pubkey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get transaction history of a pubkey
         * @param {string} address 
         * @param {number} [page] page number
         * @param {number} [pageSize] page size
         * @param {string} [contract] filter by contract address (only supported by coins which support contracts)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxHistory: async (address: string, page?: number, pageSize?: number, contract?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getTxHistory', 'address', address)
            const localVarPath = `/api/v1/txs/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (contract !== undefined) {
                localVarQueryParameter['contract'] = contract;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all unspent transaction outputs for a pubkey
         * @param {string} pubkey account pubkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtxos: async (pubkey: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubkey' is not null or undefined
            assertParamExists('getUtxos', 'pubkey', pubkey)
            const localVarPath = `/api/v1/utxo/{pubkey}`
                .replace(`{${"pubkey"}}`, encodeURIComponent(String(pubkey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {SendTxBody} sendTxBody serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTx: async (sendTxBody: SendTxBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendTxBody' is not null or undefined
            assertParamExists('sendTx', 'sendTxBody', sendTxBody)
            const localVarPath = `/api/v1/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendTxBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Get balance of a pubkey  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account pubkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalance(pubkey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BitcoinBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalance(pubkey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get transaction history of a pubkey
         * @param {string} address 
         * @param {number} [page] page number
         * @param {number} [pageSize] page size
         * @param {string} [contract] filter by contract address (only supported by coins which support contracts)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTxHistory(address: string, page?: number, pageSize?: number, contract?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TxHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTxHistory(address, page, pageSize, contract, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all unspent transaction outputs for a pubkey
         * @param {string} pubkey account pubkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUtxos(pubkey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Utxo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUtxos(pubkey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {SendTxBody} sendTxBody serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTx(sendTxBody: SendTxBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTx(sendTxBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * Get balance of a pubkey  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account pubkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalance(pubkey: string, options?: any): AxiosPromise<BitcoinBalance> {
            return localVarFp.getBalance(pubkey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get transaction history of a pubkey
         * @param {string} address 
         * @param {number} [page] page number
         * @param {number} [pageSize] page size
         * @param {string} [contract] filter by contract address (only supported by coins which support contracts)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxHistory(address: string, page?: number, pageSize?: number, contract?: string, options?: any): AxiosPromise<TxHistory> {
            return localVarFp.getTxHistory(address, page, pageSize, contract, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all unspent transaction outputs for a pubkey
         * @param {string} pubkey account pubkey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtxos(pubkey: string, options?: any): AxiosPromise<Array<Utxo>> {
            return localVarFp.getUtxos(pubkey, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {SendTxBody} sendTxBody serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTx(sendTxBody: SendTxBody, options?: any): AxiosPromise<string> {
            return localVarFp.sendTx(sendTxBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBalance operation in V1Api.
 * @export
 * @interface V1ApiGetBalanceRequest
 */
export interface V1ApiGetBalanceRequest {
    /**
     * account pubkey
     * @type {string}
     * @memberof V1ApiGetBalance
     */
    readonly pubkey: string
}

/**
 * Request parameters for getTxHistory operation in V1Api.
 * @export
 * @interface V1ApiGetTxHistoryRequest
 */
export interface V1ApiGetTxHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiGetTxHistory
     */
    readonly address: string

    /**
     * page number
     * @type {number}
     * @memberof V1ApiGetTxHistory
     */
    readonly page?: number

    /**
     * page size
     * @type {number}
     * @memberof V1ApiGetTxHistory
     */
    readonly pageSize?: number

    /**
     * filter by contract address (only supported by coins which support contracts)
     * @type {string}
     * @memberof V1ApiGetTxHistory
     */
    readonly contract?: string
}

/**
 * Request parameters for getUtxos operation in V1Api.
 * @export
 * @interface V1ApiGetUtxosRequest
 */
export interface V1ApiGetUtxosRequest {
    /**
     * account pubkey
     * @type {string}
     * @memberof V1ApiGetUtxos
     */
    readonly pubkey: string
}

/**
 * Request parameters for sendTx operation in V1Api.
 * @export
 * @interface V1ApiSendTxRequest
 */
export interface V1ApiSendTxRequest {
    /**
     * serialized raw transaction hex
     * @type {SendTxBody}
     * @memberof V1ApiSendTx
     */
    readonly sendTxBody: SendTxBody
}

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI {
    /**
     * Get balance of a pubkey  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
     * @param {V1ApiGetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getBalance(requestParameters: V1ApiGetBalanceRequest, options?: any) {
        return V1ApiFp(this.configuration).getBalance(requestParameters.pubkey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get transaction history of a pubkey
     * @param {V1ApiGetTxHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getTxHistory(requestParameters: V1ApiGetTxHistoryRequest, options?: any) {
        return V1ApiFp(this.configuration).getTxHistory(requestParameters.address, requestParameters.page, requestParameters.pageSize, requestParameters.contract, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all unspent transaction outputs for a pubkey
     * @param {V1ApiGetUtxosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getUtxos(requestParameters: V1ApiGetUtxosRequest, options?: any) {
        return V1ApiFp(this.configuration).getUtxos(requestParameters.pubkey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends raw transaction to be broadcast to the node.
     * @param {V1ApiSendTxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public sendTx(requestParameters: V1ApiSendTxRequest, options?: any) {
        return V1ApiFp(this.configuration).sendTx(requestParameters.sendTxBody, options).then((request) => request(this.axios, this.basePath));
    }
}


