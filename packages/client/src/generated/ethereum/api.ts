/* tslint:disable */
/* eslint-disable */
/**
 * @shapeshiftoss/ethereum-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Contains info about a 400 Bad Request response
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * 
     * @type {string}
     * @memberof BadRequestError
     */
    error: string;
}
/**
 * Contains info about an addresses balance
 * @export
 * @interface Balance
 */
export interface Balance {
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    network: string;
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    symbol: string;
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    balance: string;
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    totalReceived?: string;
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    totalSent?: string;
    /**
     * 
     * @type {string}
     * @memberof Balance
     */
    unconfirmedBalance: string;
    /**
     * 
     * @type {number}
     * @memberof Balance
     */
    unconfirmedTxs: number;
    /**
     * 
     * @type {number}
     * @memberof Balance
     */
    txs: number;
    /**
     * 
     * @type {Array<Token>}
     * @memberof Balance
     */
    tokens: Array<Token>;
}
/**
 * Contains info about a balance change
 * @export
 * @interface BalanceChange
 */
export interface BalanceChange {
    /**
     * 
     * @type {number}
     * @memberof BalanceChange
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof BalanceChange
     */
    amount: string;
}
/**
 * Contains info about a block
 * @export
 * @interface Block
 */
export interface Block {
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    network: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    hash: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    prevHash?: string;
    /**
     * 
     * @type {string}
     * @memberof Block
     */
    nextHash?: string;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    height: number;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    confirmations: number;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    timestamp?: number;
    /**
     * 
     * @type {number}
     * @memberof Block
     */
    txs: number;
}
/**
 * Contains info about a 500 Internal Server Error response
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    message: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum Interval {
    Weekly = 'weekly',
    Daily = 'daily',
    Hourly = 'hourly',
    _30min = '30min',
    _15min = '15min',
    _10min = '10min',
    _5min = '5min',
    _1min = '1min'
}

/**
 * Contains the serialized raw transaction hex
 * @export
 * @interface RawTx
 */
export interface RawTx {
    /**
     * 
     * @type {string}
     * @memberof RawTx
     */
    hex: string;
}
/**
 * Contains registry info and is used for un/registering addresses
 * @export
 * @interface RegistryDocument
 */
export interface RegistryDocument {
    /**
     * 
     * @type {string}
     * @memberof RegistryDocument
     */
    client_id: string;
    /**
     * 
     * @type {RegistryDocumentIngesterMeta}
     * @memberof RegistryDocument
     */
    ingester_meta?: RegistryDocumentIngesterMeta;
    /**
     * 
     * @type {RegistryDocumentRegistration}
     * @memberof RegistryDocument
     */
    registration: RegistryDocumentRegistration;
}
/**
 * 
 * @export
 * @interface RegistryDocumentIngesterMeta
 */
export interface RegistryDocumentIngesterMeta {
    /**
     * 
     * @type {RegistryDocumentIngesterMetaSyncing}
     * @memberof RegistryDocumentIngesterMeta
     */
    syncing?: RegistryDocumentIngesterMetaSyncing;
    /**
     * 
     * @type {number}
     * @memberof RegistryDocumentIngesterMeta
     */
    block?: number;
}
/**
 * 
 * @export
 * @interface RegistryDocumentIngesterMetaSyncing
 */
export interface RegistryDocumentIngesterMetaSyncing {
    /**
     * 
     * @type {number}
     * @memberof RegistryDocumentIngesterMetaSyncing
     */
    endTime: number;
    /**
     * 
     * @type {number}
     * @memberof RegistryDocumentIngesterMetaSyncing
     */
    startTime: number;
    /**
     * 
     * @type {string}
     * @memberof RegistryDocumentIngesterMetaSyncing
     */
    key?: string;
}
/**
 * 
 * @export
 * @interface RegistryDocumentRegistration
 */
export interface RegistryDocumentRegistration {
    /**
     * 
     * @type {string}
     * @memberof RegistryDocumentRegistration
     */
    pubkey?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RegistryDocumentRegistration
     */
    addresses?: Array<string>;
}
/**
 * Contains token info from a given address
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    path?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    contract?: string;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    transfers: number;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    symbol?: string;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    decimals?: number;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    balance?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    totalReceived?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    totalSent?: string;
}
/**
 * Contains info about a transaction
 * @export
 * @interface Tx
 */
export interface Tx {
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    network: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    symbol: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    blockHash?: string;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    blockHeight?: number;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    confirmations?: number;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    timestamp?: number;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    to?: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    fee: string;
}
/**
 * Contains paginated transaction history
 * @export
 * @interface TxHistory
 */
export interface TxHistory {
    /**
     * 
     * @type {number}
     * @memberof TxHistory
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof TxHistory
     */
    totalPages: number;
    /**
     * 
     * @type {number}
     * @memberof TxHistory
     */
    txs: number;
    /**
     * 
     * @type {Array<Tx>}
     * @memberof TxHistory
     */
    transactions: Array<Tx>;
}
/**
 * Contains info about a successfully sent transaction
 * @export
 * @interface TxReceipt
 */
export interface TxReceipt {
    /**
     * 
     * @type {string}
     * @memberof TxReceipt
     */
    network: string;
    /**
     * 
     * @type {string}
     * @memberof TxReceipt
     */
    txid: string;
}
/**
 * Contains info about a 422 Validation Error response
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    message: ValidationErrorMessageEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ValidationError
     */
    details: { [key: string]: any; };
}

/**
    * @export
    * @enum {string}
    */
export enum ValidationErrorMessageEnum {
    ValidationFailed = 'Validation failed'
}


/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get balance returns the balance of an address
         * @param {string} address account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalance: async (address: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getBalance', 'address', address)
            const localVarPath = `/api/v1/balance/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get balance history returns the balance history of an address
         * @param {string} address account address
         * @param {Interval} interval range to group by
         * @param {number} [start] start date as unix timestamp
         * @param {number} [end] end date as unix timestamp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceHistory: async (address: string, interval: Interval, start?: number, end?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getBalanceHistory', 'address', address)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('getBalanceHistory', 'interval', interval)
            const localVarPath = `/api/v1/balancehistory/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get block returns data about a block
         * @param {any} block height or hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlock: async (block: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'block' is not null or undefined
            assertParamExists('getBlock', 'block', block)
            const localVarPath = `/api/v1/block/{block}`
                .replace(`{${"block"}}`, encodeURIComponent(String(block)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get transaction specific estimated gas
         * @param {string} data contract call data
         * @param {string} to to address
         * @param {string} value value of the tx
         * @param {string} from from address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstimatedGas: async (data: string, to: string, value: string, from: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('getEstimatedGas', 'data', data)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getEstimatedGas', 'to', to)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('getEstimatedGas', 'value', value)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getEstimatedGas', 'from', from)
            const localVarPath = `/api/v1/estimategas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (data !== undefined) {
                localVarQueryParameter['data'] = data;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current gas price from the node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeePrice: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/feeprice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the nonce of an address
         * @param {string} address account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonce: async (address: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getNonce', 'address', address)
            const localVarPath = `/api/v1/nonce/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get transaction returns data about a transaction
         * @param {string} txid transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: async (txid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'txid' is not null or undefined
            assertParamExists('getTx', 'txid', txid)
            const localVarPath = `/api/v1/tx/{txid}`
                .replace(`{${"txid"}}`, encodeURIComponent(String(txid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get transaction history returns the transaction history of an address
         * @param {string} address account address
         * @param {number} [page] page number
         * @param {number} [pageSize] page number
         * @param {string} [contract] filter by contract address (only supported by coins which support contracts)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxHistory: async (address: string, page?: number, pageSize?: number, contract?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getTxHistory', 'address', address)
            const localVarPath = `/api/v1/txs/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (contract !== undefined) {
                localVarQueryParameter['contract'] = contract;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register account details for tracking incoming pending transactions and newly confirmed transactions  Example 1: Register a pubkey  Example 2: Register an address for pubkey  Example 3: Register a single address
         * @param {RegistryDocument} registryDocument Contains registry info for registering addresses and pubkeys for a client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registryDocument: RegistryDocument, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryDocument' is not null or undefined
            assertParamExists('register', 'registryDocument', registryDocument)
            const localVarPath = `/api/v1/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryDocument, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {RawTx} rawTx serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTx: async (rawTx: RawTx, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rawTx' is not null or undefined
            assertParamExists('sendTx', 'rawTx', rawTx)
            const localVarPath = `/api/v1/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rawTx, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unregister accounts to stop tracking incoming pending transactions and newly confirmed transactions  Example 1: Unregister a pubkey and all associated addresses  Example 2: Unregister a single address from an account
         * @param {RegistryDocument} registryDocument Contains registry info for unregistering addresses or pubkeys for a client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregister: async (registryDocument: RegistryDocument, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryDocument' is not null or undefined
            assertParamExists('unregister', 'registryDocument', registryDocument)
            const localVarPath = `/api/v1/unregister`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryDocument, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Get balance returns the balance of an address
         * @param {string} address account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalance(address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Balance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalance(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get balance history returns the balance history of an address
         * @param {string} address account address
         * @param {Interval} interval range to group by
         * @param {number} [start] start date as unix timestamp
         * @param {number} [end] end date as unix timestamp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalanceHistory(address: string, interval: Interval, start?: number, end?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BalanceChange>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalanceHistory(address, interval, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get block returns data about a block
         * @param {any} block height or hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlock(block: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Block>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlock(block, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get transaction specific estimated gas
         * @param {string} data contract call data
         * @param {string} to to address
         * @param {string} value value of the tx
         * @param {string} from from address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEstimatedGas(data: string, to: string, value: string, from: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEstimatedGas(data, to, value, from, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the current gas price from the node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeePrice(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeePrice(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the nonce of an address
         * @param {string} address account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNonce(address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNonce(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get transaction returns data about a transaction
         * @param {string} txid transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTx(txid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tx>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTx(txid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get transaction history returns the transaction history of an address
         * @param {string} address account address
         * @param {number} [page] page number
         * @param {number} [pageSize] page number
         * @param {string} [contract] filter by contract address (only supported by coins which support contracts)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTxHistory(address: string, page?: number, pageSize?: number, contract?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TxHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTxHistory(address, page, pageSize, contract, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register account details for tracking incoming pending transactions and newly confirmed transactions  Example 1: Register a pubkey  Example 2: Register an address for pubkey  Example 3: Register a single address
         * @param {RegistryDocument} registryDocument Contains registry info for registering addresses and pubkeys for a client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registryDocument: RegistryDocument, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registryDocument, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {RawTx} rawTx serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTx(rawTx: RawTx, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TxReceipt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTx(rawTx, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unregister accounts to stop tracking incoming pending transactions and newly confirmed transactions  Example 1: Unregister a pubkey and all associated addresses  Example 2: Unregister a single address from an account
         * @param {RegistryDocument} registryDocument Contains registry info for unregistering addresses or pubkeys for a client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unregister(registryDocument: RegistryDocument, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unregister(registryDocument, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * Get balance returns the balance of an address
         * @param {string} address account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalance(address: string, options?: any): AxiosPromise<Balance> {
            return localVarFp.getBalance(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Get balance history returns the balance history of an address
         * @param {string} address account address
         * @param {Interval} interval range to group by
         * @param {number} [start] start date as unix timestamp
         * @param {number} [end] end date as unix timestamp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceHistory(address: string, interval: Interval, start?: number, end?: number, options?: any): AxiosPromise<Array<BalanceChange>> {
            return localVarFp.getBalanceHistory(address, interval, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Get block returns data about a block
         * @param {any} block height or hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlock(block: any, options?: any): AxiosPromise<Block> {
            return localVarFp.getBlock(block, options).then((request) => request(axios, basePath));
        },
        /**
         * Get transaction specific estimated gas
         * @param {string} data contract call data
         * @param {string} to to address
         * @param {string} value value of the tx
         * @param {string} from from address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEstimatedGas(data: string, to: string, value: string, from: string, options?: any): AxiosPromise<string> {
            return localVarFp.getEstimatedGas(data, to, value, from, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current gas price from the node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeePrice(options?: any): AxiosPromise<string> {
            return localVarFp.getFeePrice(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the nonce of an address
         * @param {string} address account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonce(address: string, options?: any): AxiosPromise<number> {
            return localVarFp.getNonce(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Get transaction returns data about a transaction
         * @param {string} txid transaction id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx(txid: string, options?: any): AxiosPromise<Tx> {
            return localVarFp.getTx(txid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get transaction history returns the transaction history of an address
         * @param {string} address account address
         * @param {number} [page] page number
         * @param {number} [pageSize] page number
         * @param {string} [contract] filter by contract address (only supported by coins which support contracts)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxHistory(address: string, page?: number, pageSize?: number, contract?: string, options?: any): AxiosPromise<TxHistory> {
            return localVarFp.getTxHistory(address, page, pageSize, contract, options).then((request) => request(axios, basePath));
        },
        /**
         * Register account details for tracking incoming pending transactions and newly confirmed transactions  Example 1: Register a pubkey  Example 2: Register an address for pubkey  Example 3: Register a single address
         * @param {RegistryDocument} registryDocument Contains registry info for registering addresses and pubkeys for a client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registryDocument: RegistryDocument, options?: any): AxiosPromise<void> {
            return localVarFp.register(registryDocument, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {RawTx} rawTx serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTx(rawTx: RawTx, options?: any): AxiosPromise<TxReceipt> {
            return localVarFp.sendTx(rawTx, options).then((request) => request(axios, basePath));
        },
        /**
         * Unregister accounts to stop tracking incoming pending transactions and newly confirmed transactions  Example 1: Unregister a pubkey and all associated addresses  Example 2: Unregister a single address from an account
         * @param {RegistryDocument} registryDocument Contains registry info for unregistering addresses or pubkeys for a client id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregister(registryDocument: RegistryDocument, options?: any): AxiosPromise<void> {
            return localVarFp.unregister(registryDocument, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBalance operation in V1Api.
 * @export
 * @interface V1ApiGetBalanceRequest
 */
export interface V1ApiGetBalanceRequest {
    /**
     * account address
     * @type {string}
     * @memberof V1ApiGetBalance
     */
    readonly address: string
}

/**
 * Request parameters for getBalanceHistory operation in V1Api.
 * @export
 * @interface V1ApiGetBalanceHistoryRequest
 */
export interface V1ApiGetBalanceHistoryRequest {
    /**
     * account address
     * @type {string}
     * @memberof V1ApiGetBalanceHistory
     */
    readonly address: string

    /**
     * range to group by
     * @type {Interval}
     * @memberof V1ApiGetBalanceHistory
     */
    readonly interval: Interval

    /**
     * start date as unix timestamp
     * @type {number}
     * @memberof V1ApiGetBalanceHistory
     */
    readonly start?: number

    /**
     * end date as unix timestamp
     * @type {number}
     * @memberof V1ApiGetBalanceHistory
     */
    readonly end?: number
}

/**
 * Request parameters for getBlock operation in V1Api.
 * @export
 * @interface V1ApiGetBlockRequest
 */
export interface V1ApiGetBlockRequest {
    /**
     * height or hash
     * @type {any}
     * @memberof V1ApiGetBlock
     */
    readonly block: any
}

/**
 * Request parameters for getEstimatedGas operation in V1Api.
 * @export
 * @interface V1ApiGetEstimatedGasRequest
 */
export interface V1ApiGetEstimatedGasRequest {
    /**
     * contract call data
     * @type {string}
     * @memberof V1ApiGetEstimatedGas
     */
    readonly data: string

    /**
     * to address
     * @type {string}
     * @memberof V1ApiGetEstimatedGas
     */
    readonly to: string

    /**
     * value of the tx
     * @type {string}
     * @memberof V1ApiGetEstimatedGas
     */
    readonly value: string

    /**
     * from address
     * @type {string}
     * @memberof V1ApiGetEstimatedGas
     */
    readonly from: string
}

/**
 * Request parameters for getNonce operation in V1Api.
 * @export
 * @interface V1ApiGetNonceRequest
 */
export interface V1ApiGetNonceRequest {
    /**
     * account address
     * @type {string}
     * @memberof V1ApiGetNonce
     */
    readonly address: string
}

/**
 * Request parameters for getTx operation in V1Api.
 * @export
 * @interface V1ApiGetTxRequest
 */
export interface V1ApiGetTxRequest {
    /**
     * transaction id
     * @type {string}
     * @memberof V1ApiGetTx
     */
    readonly txid: string
}

/**
 * Request parameters for getTxHistory operation in V1Api.
 * @export
 * @interface V1ApiGetTxHistoryRequest
 */
export interface V1ApiGetTxHistoryRequest {
    /**
     * account address
     * @type {string}
     * @memberof V1ApiGetTxHistory
     */
    readonly address: string

    /**
     * page number
     * @type {number}
     * @memberof V1ApiGetTxHistory
     */
    readonly page?: number

    /**
     * page number
     * @type {number}
     * @memberof V1ApiGetTxHistory
     */
    readonly pageSize?: number

    /**
     * filter by contract address (only supported by coins which support contracts)
     * @type {string}
     * @memberof V1ApiGetTxHistory
     */
    readonly contract?: string
}

/**
 * Request parameters for register operation in V1Api.
 * @export
 * @interface V1ApiRegisterRequest
 */
export interface V1ApiRegisterRequest {
    /**
     * Contains registry info for registering addresses and pubkeys for a client id.
     * @type {RegistryDocument}
     * @memberof V1ApiRegister
     */
    readonly registryDocument: RegistryDocument
}

/**
 * Request parameters for sendTx operation in V1Api.
 * @export
 * @interface V1ApiSendTxRequest
 */
export interface V1ApiSendTxRequest {
    /**
     * serialized raw transaction hex
     * @type {RawTx}
     * @memberof V1ApiSendTx
     */
    readonly rawTx: RawTx
}

/**
 * Request parameters for unregister operation in V1Api.
 * @export
 * @interface V1ApiUnregisterRequest
 */
export interface V1ApiUnregisterRequest {
    /**
     * Contains registry info for unregistering addresses or pubkeys for a client id.
     * @type {RegistryDocument}
     * @memberof V1ApiUnregister
     */
    readonly registryDocument: RegistryDocument
}

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI {
    /**
     * Get balance returns the balance of an address
     * @param {V1ApiGetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getBalance(requestParameters: V1ApiGetBalanceRequest, options?: any) {
        return V1ApiFp(this.configuration).getBalance(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get balance history returns the balance history of an address
     * @param {V1ApiGetBalanceHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getBalanceHistory(requestParameters: V1ApiGetBalanceHistoryRequest, options?: any) {
        return V1ApiFp(this.configuration).getBalanceHistory(requestParameters.address, requestParameters.interval, requestParameters.start, requestParameters.end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get block returns data about a block
     * @param {V1ApiGetBlockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getBlock(requestParameters: V1ApiGetBlockRequest, options?: any) {
        return V1ApiFp(this.configuration).getBlock(requestParameters.block, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get transaction specific estimated gas
     * @param {V1ApiGetEstimatedGasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getEstimatedGas(requestParameters: V1ApiGetEstimatedGasRequest, options?: any) {
        return V1ApiFp(this.configuration).getEstimatedGas(requestParameters.data, requestParameters.to, requestParameters.value, requestParameters.from, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current gas price from the node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getFeePrice(options?: any) {
        return V1ApiFp(this.configuration).getFeePrice(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the nonce of an address
     * @param {V1ApiGetNonceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getNonce(requestParameters: V1ApiGetNonceRequest, options?: any) {
        return V1ApiFp(this.configuration).getNonce(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get transaction returns data about a transaction
     * @param {V1ApiGetTxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getTx(requestParameters: V1ApiGetTxRequest, options?: any) {
        return V1ApiFp(this.configuration).getTx(requestParameters.txid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get transaction history returns the transaction history of an address
     * @param {V1ApiGetTxHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getTxHistory(requestParameters: V1ApiGetTxHistoryRequest, options?: any) {
        return V1ApiFp(this.configuration).getTxHistory(requestParameters.address, requestParameters.page, requestParameters.pageSize, requestParameters.contract, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register account details for tracking incoming pending transactions and newly confirmed transactions  Example 1: Register a pubkey  Example 2: Register an address for pubkey  Example 3: Register a single address
     * @param {V1ApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public register(requestParameters: V1ApiRegisterRequest, options?: any) {
        return V1ApiFp(this.configuration).register(requestParameters.registryDocument, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends raw transaction to be broadcast to the node.
     * @param {V1ApiSendTxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public sendTx(requestParameters: V1ApiSendTxRequest, options?: any) {
        return V1ApiFp(this.configuration).sendTx(requestParameters.rawTx, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unregister accounts to stop tracking incoming pending transactions and newly confirmed transactions  Example 1: Unregister a pubkey and all associated addresses  Example 2: Unregister a single address from an account
     * @param {V1ApiUnregisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public unregister(requestParameters: V1ApiUnregisterRequest, options?: any) {
        return V1ApiFp(this.configuration).unregister(requestParameters.registryDocument, options).then((request) => request(this.axios, this.basePath));
    }
}


