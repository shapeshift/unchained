{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"BaseInfo": {
				"description": "Contains base info about the running coinstack",
				"properties": {
					"network": {
						"type": "string"
					}
				},
				"required": [
					"network"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenBalance": {
				"description": "Contains info about a token including balance for an address",
				"properties": {
					"contract": {
						"type": "string"
					},
					"decimals": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"symbol": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"id": {
						"type": "string",
						"description": "nft or multi token id"
					},
					"balance": {
						"type": "string"
					}
				},
				"required": [
					"contract",
					"decimals",
					"name",
					"symbol",
					"type",
					"balance"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Account": {
				"description": "Contains info about an EVM account",
				"properties": {
					"balance": {
						"type": "string"
					},
					"unconfirmedBalance": {
						"type": "string"
					},
					"pubkey": {
						"type": "string"
					},
					"nonce": {
						"type": "number",
						"format": "double"
					},
					"tokens": {
						"items": {
							"$ref": "#/components/schemas/TokenBalance"
						},
						"type": "array"
					}
				},
				"required": [
					"balance",
					"unconfirmedBalance",
					"pubkey",
					"nonce",
					"tokens"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BadRequestError": {
				"description": "Contains info about a 400 Bad Request response",
				"properties": {
					"error": {
						"type": "string"
					}
				},
				"required": [
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidationError": {
				"description": "Contains info about a 422 Validation Error response",
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Validation failed"
						],
						"nullable": false
					},
					"details": {
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					}
				},
				"required": [
					"message",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InternalServerError": {
				"description": "Contains info about a 500 Internal Server Error response",
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenTransfer": {
				"description": "Contains info about a token including transfer details",
				"properties": {
					"contract": {
						"type": "string"
					},
					"decimals": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"symbol": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"id": {
						"type": "string",
						"description": "nft or multi token id"
					},
					"from": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"contract",
					"decimals",
					"name",
					"symbol",
					"type",
					"from",
					"to",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InternalTx": {
				"description": "Contains info about an EVM internal transaction",
				"properties": {
					"from": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"from",
					"to",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Tx": {
				"description": "Contains info about an EVM transaction",
				"properties": {
					"txid": {
						"type": "string"
					},
					"blockHash": {
						"type": "string"
					},
					"blockHeight": {
						"type": "number",
						"format": "double"
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"from": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"confirmations": {
						"type": "number",
						"format": "double"
					},
					"value": {
						"type": "string"
					},
					"fee": {
						"type": "string"
					},
					"gasLimit": {
						"type": "string"
					},
					"gasUsed": {
						"type": "string"
					},
					"gasPrice": {
						"type": "string"
					},
					"status": {
						"type": "number",
						"format": "double"
					},
					"inputData": {
						"type": "string"
					},
					"tokenTransfers": {
						"items": {
							"$ref": "#/components/schemas/TokenTransfer"
						},
						"type": "array"
					},
					"internalTxs": {
						"items": {
							"$ref": "#/components/schemas/InternalTx"
						},
						"type": "array"
					}
				},
				"required": [
					"txid",
					"blockHeight",
					"timestamp",
					"from",
					"to",
					"confirmations",
					"value",
					"fee",
					"gasLimit",
					"gasPrice",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BaseTxHistory_Tx_": {
				"description": "Contains paginated base transaction history details",
				"properties": {
					"cursor": {
						"type": "string"
					},
					"pubkey": {
						"type": "string"
					},
					"txs": {
						"items": {
							"$ref": "#/components/schemas/Tx"
						},
						"type": "array"
					}
				},
				"required": [
					"pubkey",
					"txs"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TxHistory": {
				"$ref": "#/components/schemas/BaseTxHistory_Tx_",
				"description": "Contains info about EVM transaction history"
			},
			"GasEstimate": {
				"description": "Contains info about estimated gas cost of a transaction",
				"properties": {
					"gasLimit": {
						"type": "string"
					}
				},
				"required": [
					"gasLimit"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Fees": {
				"description": "Contains info about legacy and/or EIP-1559 fees",
				"properties": {
					"gasPrice": {
						"type": "string"
					},
					"maxFeePerGas": {
						"type": "string"
					},
					"maxPriorityFeePerGas": {
						"type": "string"
					}
				},
				"required": [
					"gasPrice"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GasFees": {
				"description": "Contains info about current recommended fees to use in a transaction.\nEstimates for slow, average and fast confirmation speeds provided as well.",
				"properties": {
					"gasPrice": {
						"type": "string"
					},
					"baseFeePerGas": {
						"type": "string"
					},
					"maxPriorityFeePerGas": {
						"type": "string"
					},
					"slow": {
						"$ref": "#/components/schemas/Fees"
					},
					"average": {
						"$ref": "#/components/schemas/Fees"
					},
					"fast": {
						"$ref": "#/components/schemas/Fees"
					}
				},
				"required": [
					"gasPrice",
					"slow",
					"average",
					"fast"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SendTxBody": {
				"description": "Contains the serialized raw transaction hex",
				"properties": {
					"hex": {
						"type": "string"
					}
				},
				"required": [
					"hex"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenMetadata": {
				"description": "Contains info about token metadata (ERC-721/ERC-1155)",
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"media": {
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"image",
									"video"
								]
							},
							"url": {
								"type": "string"
							}
						},
						"required": [
							"url"
						],
						"type": "object"
					}
				},
				"required": [
					"name",
					"description",
					"media"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenType": {
				"type": "string",
				"enum": [
					"erc721",
					"erc1155"
				],
				"description": "Supported token types for token metadata"
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "@shapeshiftoss/arbitrum-api",
		"version": "9.3.0",
		"license": {
			"name": "MIT"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/v1/info": {
			"get": {
				"operationId": "GetInfo",
				"responses": {
					"200": {
						"description": "coinstack info",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseInfo"
								},
								"examples": {
									"Example 1": {
										"value": {
											"network": "mainnet"
										}
									}
								}
							}
						}
					}
				},
				"description": "Get information about the running coinstack",
				"tags": [
					"v1"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/v1/account/{pubkey}": {
			"get": {
				"operationId": "GetAccount",
				"responses": {
					"200": {
						"description": "account details",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Account"
								},
								"examples": {
									"Example 1": {
										"value": {
											"balance": "25865025000000",
											"unconfirmedBalance": "0",
											"nonce": 5,
											"pubkey": "0x9D1170D30944F2E30664Be502aC57F6096fB5366",
											"tokens": [
												{
													"balance": "0",
													"contract": "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
													"decimals": 18,
													"name": "Dai Stablecoin",
													"symbol": "DAI",
													"type": "ERC20"
												},
												{
													"balance": "0",
													"contract": "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
													"decimals": 6,
													"name": "Tether USD",
													"symbol": "USDT",
													"type": "ERC20"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestError"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerError"
								}
							}
						}
					}
				},
				"description": "Get account details by address",
				"tags": [
					"v1"
				],
				"security": [],
				"parameters": [
					{
						"description": "account address",
						"in": "path",
						"name": "pubkey",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0x9D1170D30944F2E30664Be502aC57F6096fB5366"
					}
				]
			}
		},
		"/api/v1/account/{pubkey}/txs": {
			"get": {
				"operationId": "GetTxHistory",
				"responses": {
					"200": {
						"description": "transaction history",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TxHistory"
								},
								"examples": {
									"Example 1": {
										"value": {
											"pubkey": "0x9D1170D30944F2E30664Be502aC57F6096fB5366",
											"cursor": "eyJibG9ja2Jvb2tQYWdlIjoyLCJleHBsb3JlclBhZ2UiOjEsImJsb2NrYm9va1R4aWQiOiIweGRhYjE2ODcyNWViMzYyMmQ2MTNkNWRhZWRiZmE5MTdiZWFjNGZhNTJhNWZhYzg2MDk5ZDg1ZmI3MWI1OTYyYTUiLCJibG9ja0hlaWdodCI6NzcyOTExMDV9",
											"txs": [
												{
													"txid": "0xdab168725eb3622d613d5daedbfa917beac4fa52a5fac86099d85fb71b5962a5",
													"blockHash": "0x332643127493036faba7de88a6fb7d5e8b150d64526c1908fddbeb99fec2c674",
													"blockHeight": 77291105,
													"timestamp": 1680697466,
													"status": 1,
													"from": "0x9D1170D30944F2E30664Be502aC57F6096fB5366",
													"to": "0xc0ef185cC29A3D9f36977BfA92862f833AD59e95",
													"confirmations": 59521378,
													"value": "4159598947212301",
													"fee": "34455000000000",
													"gasLimit": "446815",
													"gasUsed": "344550",
													"gasPrice": "100000000"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestError"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerError"
								}
							}
						}
					}
				},
				"description": "Get transaction history by address",
				"tags": [
					"v1"
				],
				"security": [],
				"parameters": [
					{
						"description": "account address",
						"in": "path",
						"name": "pubkey",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0x9D1170D30944F2E30664Be502aC57F6096fB5366"
					},
					{
						"description": "the cursor returned in previous query (base64 encoded json object with a 'page' property)",
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "page size (10 by default)",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "from block number (0 by default)",
						"in": "query",
						"name": "from",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "to block number (pending by default)",
						"in": "query",
						"name": "to",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/v1/tx/{txid}": {
			"get": {
				"operationId": "GetTransaction",
				"responses": {
					"200": {
						"description": "transaction payload",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Tx"
								},
								"examples": {
									"Example 1": {
										"value": {
											"txid": "0xdab168725eb3622d613d5daedbfa917beac4fa52a5fac86099d85fb71b5962a5",
											"blockHash": "0x332643127493036faba7de88a6fb7d5e8b150d64526c1908fddbeb99fec2c674",
											"blockHeight": 77291105,
											"timestamp": 1680697466,
											"status": 1,
											"from": "0x9D1170D30944F2E30664Be502aC57F6096fB5366",
											"to": "0xc0ef185cC29A3D9f36977BfA92862f833AD59e95",
											"confirmations": 59521508,
											"value": "4159598947212301",
											"fee": "34455000000000",
											"gasLimit": "446815",
											"gasUsed": "344550",
											"gasPrice": "100000000"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestError"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerError"
								}
							}
						}
					}
				},
				"description": "Get transaction details",
				"tags": [
					"v1"
				],
				"security": [],
				"parameters": [
					{
						"description": "transaction hash",
						"in": "path",
						"name": "txid",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0xdab168725eb3622d613d5daedbfa917beac4fa52a5fac86099d85fb71b5962a5"
					}
				]
			}
		},
		"/api/v1/gas/estimate": {
			"get": {
				"operationId": "EstimateGas",
				"responses": {
					"200": {
						"description": "estimated gas cost",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GasEstimate"
								},
								"examples": {
									"Example 1": {
										"value": {
											"gasLimit": "374764"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerError"
								}
							}
						}
					}
				},
				"description": "Get the estimated gas cost of a transaction",
				"tags": [
					"v1"
				],
				"security": [],
				"parameters": [
					{
						"description": "input data",
						"in": "query",
						"name": "data",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0x"
					},
					{
						"description": "from address",
						"in": "query",
						"name": "from",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0x0000000000000000000000000000000000000000"
					},
					{
						"description": "to address",
						"in": "query",
						"name": "to",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0x9D1170D30944F2E30664Be502aC57F6096fB5366"
					},
					{
						"description": "transaction value in wei",
						"in": "query",
						"name": "value",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "1337"
					}
				]
			}
		},
		"/api/v1/gas/fees": {
			"get": {
				"operationId": "GetGasFees",
				"responses": {
					"200": {
						"description": "current fees specified in wei",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GasFees"
								},
								"examples": {
									"Example 1": {
										"value": {
											"gasPrice": "100000000",
											"baseFeePerGas": "100000000",
											"maxPriorityFeePerGas": "0",
											"slow": {
												"gasPrice": "184334277",
												"maxFeePerGas": "190000001",
												"maxPriorityFeePerGas": "90000001"
											},
											"average": {
												"gasPrice": "187859277",
												"maxFeePerGas": "205000001",
												"maxPriorityFeePerGas": "105000001"
											},
											"fast": {
												"gasPrice": "199001183",
												"maxFeePerGas": "290000001",
												"maxPriorityFeePerGas": "190000001"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerError"
								}
							}
						}
					}
				},
				"description": "Get the current recommended gas fees to use in a transaction\n\n* For EIP-1559 transactions, use `maxFeePerGas` and `maxPriorityFeePerGas`\n* For Legacy transactions, use `gasPrice`",
				"tags": [
					"v1"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/v1/send": {
			"post": {
				"operationId": "SendTx",
				"responses": {
					"200": {
						"description": "transaction id",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								},
								"examples": {
									"Example 1": {
										"value": "0xb9d4ad5408f53eac8627f9ccd840ba8fb3469d55cd9cc2a11c6e049f1eef4edd"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BadRequestError"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerError"
								}
							}
						}
					}
				},
				"description": "Broadcast signed raw transaction",
				"tags": [
					"v1"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "serialized raw transaction hex",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SendTxBody",
								"description": "serialized raw transaction hex"
							},
							"example": {
								"hex": "0xf86c0a85046c7cfe0083016dea94d1310c1e038bc12865d3d3997275b3e4737c6302880b503be34d9fe80080269fc7eaaa9c21f59adf8ad43ed66cf5ef9ee1c317bd4d32cd65401e7aaca47cfaa0387d79c65b90be6260d09dcfb780f29dd8133b9b1ceb20b83b7e442b4bfc30cb"
							}
						}
					}
				}
			}
		},
		"/api/v1/metadata/token": {
			"get": {
				"operationId": "GetTokenMetadata",
				"responses": {
					"200": {
						"description": "token metadata",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TokenMetadata"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Dragon 30",
											"description": "",
											"media": {
												"url": "https://img.momoworld.io/dragon/52.png",
												"type": "image"
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationError"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalServerError"
								}
							}
						}
					}
				},
				"description": "Get token metadata",
				"tags": [
					"v1"
				],
				"security": [],
				"parameters": [
					{
						"description": "contract address",
						"in": "query",
						"name": "contract",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0x1E3E1ed17A8Df57C215b45f00c2eC4717B33a93D"
					},
					{
						"description": "token identifier",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "1000143"
					},
					{
						"description": "token type (erc721 or erc1155)",
						"in": "query",
						"name": "type",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/TokenType"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}